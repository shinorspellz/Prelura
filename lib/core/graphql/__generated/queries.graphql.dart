// ignore_for_file: type=lint
import 'dart:async';
import 'package:gql/ast.dart';
import 'package:graphql/client.dart' as graphql;
import 'schema.graphql.dart';

class Query$ViewMe {
  Query$ViewMe({
    this.viewMe,
    this.$__typename = 'Query',
  });

  factory Query$ViewMe.fromJson(Map<String, dynamic> json) {
    final l$viewMe = json['viewMe'];
    final l$$__typename = json['__typename'];
    return Query$ViewMe(
      viewMe: l$viewMe == null
          ? null
          : Query$ViewMe$viewMe.fromJson((l$viewMe as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final Query$ViewMe$viewMe? viewMe;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$viewMe = viewMe;
    _resultData['viewMe'] = l$viewMe?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$viewMe = viewMe;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$viewMe,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$ViewMe || runtimeType != other.runtimeType) {
      return false;
    }
    final l$viewMe = viewMe;
    final lOther$viewMe = other.viewMe;
    if (l$viewMe != lOther$viewMe) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$ViewMe on Query$ViewMe {
  CopyWith$Query$ViewMe<Query$ViewMe> get copyWith => CopyWith$Query$ViewMe(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$ViewMe<TRes> {
  factory CopyWith$Query$ViewMe(
    Query$ViewMe instance,
    TRes Function(Query$ViewMe) then,
  ) = _CopyWithImpl$Query$ViewMe;

  factory CopyWith$Query$ViewMe.stub(TRes res) = _CopyWithStubImpl$Query$ViewMe;

  TRes call({
    Query$ViewMe$viewMe? viewMe,
    String? $__typename,
  });
  CopyWith$Query$ViewMe$viewMe<TRes> get viewMe;
}

class _CopyWithImpl$Query$ViewMe<TRes> implements CopyWith$Query$ViewMe<TRes> {
  _CopyWithImpl$Query$ViewMe(
    this._instance,
    this._then,
  );

  final Query$ViewMe _instance;

  final TRes Function(Query$ViewMe) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? viewMe = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$ViewMe(
        viewMe: viewMe == _undefined
            ? _instance.viewMe
            : (viewMe as Query$ViewMe$viewMe?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$ViewMe$viewMe<TRes> get viewMe {
    final local$viewMe = _instance.viewMe;
    return local$viewMe == null
        ? CopyWith$Query$ViewMe$viewMe.stub(_then(_instance))
        : CopyWith$Query$ViewMe$viewMe(local$viewMe, (e) => call(viewMe: e));
  }
}

class _CopyWithStubImpl$Query$ViewMe<TRes>
    implements CopyWith$Query$ViewMe<TRes> {
  _CopyWithStubImpl$Query$ViewMe(this._res);

  TRes _res;

  call({
    Query$ViewMe$viewMe? viewMe,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$ViewMe$viewMe<TRes> get viewMe =>
      CopyWith$Query$ViewMe$viewMe.stub(_res);
}

const documentNodeQueryViewMe = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'ViewMe'),
    variableDefinitions: [],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'viewMe'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'firstName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'lastName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'username'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'email'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'bio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'profilePictureUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'gender'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'dob'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'dateJoined'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'lastLogin'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'fullName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isMultibuyEnabled'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'shippingAddress'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'listing'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isVerified'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'lastSeen'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'latitude'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'longitude'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'locationName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'noOfFollowing'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'noOfFollowers'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'phone'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'number'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'countryCode'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'isVacationMode'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$ViewMe _parserFn$Query$ViewMe(Map<String, dynamic> data) =>
    Query$ViewMe.fromJson(data);
typedef OnQueryComplete$Query$ViewMe = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$ViewMe?,
);

class Options$Query$ViewMe extends graphql.QueryOptions<Query$ViewMe> {
  Options$Query$ViewMe({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$ViewMe? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$ViewMe? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$ViewMe(data),
                  ),
          onError: onError,
          document: documentNodeQueryViewMe,
          parserFn: _parserFn$Query$ViewMe,
        );

  final OnQueryComplete$Query$ViewMe? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$ViewMe
    extends graphql.WatchQueryOptions<Query$ViewMe> {
  WatchOptions$Query$ViewMe({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$ViewMe? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryViewMe,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$ViewMe,
        );
}

class FetchMoreOptions$Query$ViewMe extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$ViewMe({required graphql.UpdateQuery updateQuery})
      : super(
          updateQuery: updateQuery,
          document: documentNodeQueryViewMe,
        );
}

extension ClientExtension$Query$ViewMe on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$ViewMe>> query$ViewMe(
          [Options$Query$ViewMe? options]) async =>
      await this.query(options ?? Options$Query$ViewMe());
  graphql.ObservableQuery<Query$ViewMe> watchQuery$ViewMe(
          [WatchOptions$Query$ViewMe? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$ViewMe());
  void writeQuery$ViewMe({
    required Query$ViewMe data,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
            operation: graphql.Operation(document: documentNodeQueryViewMe)),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$ViewMe? readQuery$ViewMe({bool optimistic = true}) {
    final result = this.readQuery(
      graphql.Request(
          operation: graphql.Operation(document: documentNodeQueryViewMe)),
      optimistic: optimistic,
    );
    return result == null ? null : Query$ViewMe.fromJson(result);
  }
}

class Query$ViewMe$viewMe {
  Query$ViewMe$viewMe({
    this.id,
    this.firstName,
    this.lastName,
    this.username,
    this.email,
    this.bio,
    this.profilePictureUrl,
    this.gender,
    this.displayName,
    this.dob,
    this.dateJoined,
    this.lastLogin,
    this.fullName,
    this.isMultibuyEnabled,
    this.shippingAddress,
    this.listing,
    this.isVerified,
    this.lastSeen,
    this.location,
    this.noOfFollowing,
    this.noOfFollowers,
    this.phone,
    this.isVacationMode,
    this.$__typename = 'UserType',
  });

  factory Query$ViewMe$viewMe.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$firstName = json['firstName'];
    final l$lastName = json['lastName'];
    final l$username = json['username'];
    final l$email = json['email'];
    final l$bio = json['bio'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$gender = json['gender'];
    final l$displayName = json['displayName'];
    final l$dob = json['dob'];
    final l$dateJoined = json['dateJoined'];
    final l$lastLogin = json['lastLogin'];
    final l$fullName = json['fullName'];
    final l$isMultibuyEnabled = json['isMultibuyEnabled'];
    final l$shippingAddress = json['shippingAddress'];
    final l$listing = json['listing'];
    final l$isVerified = json['isVerified'];
    final l$lastSeen = json['lastSeen'];
    final l$location = json['location'];
    final l$noOfFollowing = json['noOfFollowing'];
    final l$noOfFollowers = json['noOfFollowers'];
    final l$phone = json['phone'];
    final l$isVacationMode = json['isVacationMode'];
    final l$$__typename = json['__typename'];
    return Query$ViewMe$viewMe(
      id: (l$id as int?),
      firstName: (l$firstName as String?),
      lastName: (l$lastName as String?),
      username: (l$username as String?),
      email: (l$email as String?),
      bio: (l$bio as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      gender: (l$gender as String?),
      displayName: (l$displayName as String?),
      dob: l$dob == null ? null : DateTime.parse((l$dob as String)),
      dateJoined: l$dateJoined == null
          ? null
          : DateTime.parse((l$dateJoined as String)),
      lastLogin:
          l$lastLogin == null ? null : DateTime.parse((l$lastLogin as String)),
      fullName: (l$fullName as String?),
      isMultibuyEnabled: (l$isMultibuyEnabled as bool?),
      shippingAddress: (l$shippingAddress as String?),
      listing: (l$listing as int?),
      isVerified: (l$isVerified as bool?),
      lastSeen:
          l$lastSeen == null ? null : DateTime.parse((l$lastSeen as String)),
      location: l$location == null
          ? null
          : Query$ViewMe$viewMe$location.fromJson(
              (l$location as Map<String, dynamic>)),
      noOfFollowing: (l$noOfFollowing as int?),
      noOfFollowers: (l$noOfFollowers as int?),
      phone: l$phone == null
          ? null
          : Query$ViewMe$viewMe$phone.fromJson(
              (l$phone as Map<String, dynamic>)),
      isVacationMode: (l$isVacationMode as bool?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? firstName;

  final String? lastName;

  final String? username;

  final String? email;

  final String? bio;

  final String? profilePictureUrl;

  final String? gender;

  final String? displayName;

  final DateTime? dob;

  final DateTime? dateJoined;

  final DateTime? lastLogin;

  final String? fullName;

  final bool? isMultibuyEnabled;

  final String? shippingAddress;

  final int? listing;

  final bool? isVerified;

  final DateTime? lastSeen;

  final Query$ViewMe$viewMe$location? location;

  final int? noOfFollowing;

  final int? noOfFollowers;

  final Query$ViewMe$viewMe$phone? phone;

  final bool? isVacationMode;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$firstName = firstName;
    _resultData['firstName'] = l$firstName;
    final l$lastName = lastName;
    _resultData['lastName'] = l$lastName;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$email = email;
    _resultData['email'] = l$email;
    final l$bio = bio;
    _resultData['bio'] = l$bio;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$gender = gender;
    _resultData['gender'] = l$gender;
    final l$displayName = displayName;
    _resultData['displayName'] = l$displayName;
    final l$dob = dob;
    _resultData['dob'] = l$dob?.toIso8601String();
    final l$dateJoined = dateJoined;
    _resultData['dateJoined'] = l$dateJoined?.toIso8601String();
    final l$lastLogin = lastLogin;
    _resultData['lastLogin'] = l$lastLogin?.toIso8601String();
    final l$fullName = fullName;
    _resultData['fullName'] = l$fullName;
    final l$isMultibuyEnabled = isMultibuyEnabled;
    _resultData['isMultibuyEnabled'] = l$isMultibuyEnabled;
    final l$shippingAddress = shippingAddress;
    _resultData['shippingAddress'] = l$shippingAddress;
    final l$listing = listing;
    _resultData['listing'] = l$listing;
    final l$isVerified = isVerified;
    _resultData['isVerified'] = l$isVerified;
    final l$lastSeen = lastSeen;
    _resultData['lastSeen'] = l$lastSeen?.toIso8601String();
    final l$location = location;
    _resultData['location'] = l$location?.toJson();
    final l$noOfFollowing = noOfFollowing;
    _resultData['noOfFollowing'] = l$noOfFollowing;
    final l$noOfFollowers = noOfFollowers;
    _resultData['noOfFollowers'] = l$noOfFollowers;
    final l$phone = phone;
    _resultData['phone'] = l$phone?.toJson();
    final l$isVacationMode = isVacationMode;
    _resultData['isVacationMode'] = l$isVacationMode;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$firstName = firstName;
    final l$lastName = lastName;
    final l$username = username;
    final l$email = email;
    final l$bio = bio;
    final l$profilePictureUrl = profilePictureUrl;
    final l$gender = gender;
    final l$displayName = displayName;
    final l$dob = dob;
    final l$dateJoined = dateJoined;
    final l$lastLogin = lastLogin;
    final l$fullName = fullName;
    final l$isMultibuyEnabled = isMultibuyEnabled;
    final l$shippingAddress = shippingAddress;
    final l$listing = listing;
    final l$isVerified = isVerified;
    final l$lastSeen = lastSeen;
    final l$location = location;
    final l$noOfFollowing = noOfFollowing;
    final l$noOfFollowers = noOfFollowers;
    final l$phone = phone;
    final l$isVacationMode = isVacationMode;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$firstName,
      l$lastName,
      l$username,
      l$email,
      l$bio,
      l$profilePictureUrl,
      l$gender,
      l$displayName,
      l$dob,
      l$dateJoined,
      l$lastLogin,
      l$fullName,
      l$isMultibuyEnabled,
      l$shippingAddress,
      l$listing,
      l$isVerified,
      l$lastSeen,
      l$location,
      l$noOfFollowing,
      l$noOfFollowers,
      l$phone,
      l$isVacationMode,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$ViewMe$viewMe || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$firstName = firstName;
    final lOther$firstName = other.firstName;
    if (l$firstName != lOther$firstName) {
      return false;
    }
    final l$lastName = lastName;
    final lOther$lastName = other.lastName;
    if (l$lastName != lOther$lastName) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (l$email != lOther$email) {
      return false;
    }
    final l$bio = bio;
    final lOther$bio = other.bio;
    if (l$bio != lOther$bio) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$gender = gender;
    final lOther$gender = other.gender;
    if (l$gender != lOther$gender) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$dob = dob;
    final lOther$dob = other.dob;
    if (l$dob != lOther$dob) {
      return false;
    }
    final l$dateJoined = dateJoined;
    final lOther$dateJoined = other.dateJoined;
    if (l$dateJoined != lOther$dateJoined) {
      return false;
    }
    final l$lastLogin = lastLogin;
    final lOther$lastLogin = other.lastLogin;
    if (l$lastLogin != lOther$lastLogin) {
      return false;
    }
    final l$fullName = fullName;
    final lOther$fullName = other.fullName;
    if (l$fullName != lOther$fullName) {
      return false;
    }
    final l$isMultibuyEnabled = isMultibuyEnabled;
    final lOther$isMultibuyEnabled = other.isMultibuyEnabled;
    if (l$isMultibuyEnabled != lOther$isMultibuyEnabled) {
      return false;
    }
    final l$shippingAddress = shippingAddress;
    final lOther$shippingAddress = other.shippingAddress;
    if (l$shippingAddress != lOther$shippingAddress) {
      return false;
    }
    final l$listing = listing;
    final lOther$listing = other.listing;
    if (l$listing != lOther$listing) {
      return false;
    }
    final l$isVerified = isVerified;
    final lOther$isVerified = other.isVerified;
    if (l$isVerified != lOther$isVerified) {
      return false;
    }
    final l$lastSeen = lastSeen;
    final lOther$lastSeen = other.lastSeen;
    if (l$lastSeen != lOther$lastSeen) {
      return false;
    }
    final l$location = location;
    final lOther$location = other.location;
    if (l$location != lOther$location) {
      return false;
    }
    final l$noOfFollowing = noOfFollowing;
    final lOther$noOfFollowing = other.noOfFollowing;
    if (l$noOfFollowing != lOther$noOfFollowing) {
      return false;
    }
    final l$noOfFollowers = noOfFollowers;
    final lOther$noOfFollowers = other.noOfFollowers;
    if (l$noOfFollowers != lOther$noOfFollowers) {
      return false;
    }
    final l$phone = phone;
    final lOther$phone = other.phone;
    if (l$phone != lOther$phone) {
      return false;
    }
    final l$isVacationMode = isVacationMode;
    final lOther$isVacationMode = other.isVacationMode;
    if (l$isVacationMode != lOther$isVacationMode) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$ViewMe$viewMe on Query$ViewMe$viewMe {
  CopyWith$Query$ViewMe$viewMe<Query$ViewMe$viewMe> get copyWith =>
      CopyWith$Query$ViewMe$viewMe(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$ViewMe$viewMe<TRes> {
  factory CopyWith$Query$ViewMe$viewMe(
    Query$ViewMe$viewMe instance,
    TRes Function(Query$ViewMe$viewMe) then,
  ) = _CopyWithImpl$Query$ViewMe$viewMe;

  factory CopyWith$Query$ViewMe$viewMe.stub(TRes res) =
      _CopyWithStubImpl$Query$ViewMe$viewMe;

  TRes call({
    int? id,
    String? firstName,
    String? lastName,
    String? username,
    String? email,
    String? bio,
    String? profilePictureUrl,
    String? gender,
    String? displayName,
    DateTime? dob,
    DateTime? dateJoined,
    DateTime? lastLogin,
    String? fullName,
    bool? isMultibuyEnabled,
    String? shippingAddress,
    int? listing,
    bool? isVerified,
    DateTime? lastSeen,
    Query$ViewMe$viewMe$location? location,
    int? noOfFollowing,
    int? noOfFollowers,
    Query$ViewMe$viewMe$phone? phone,
    bool? isVacationMode,
    String? $__typename,
  });
  CopyWith$Query$ViewMe$viewMe$location<TRes> get location;
  CopyWith$Query$ViewMe$viewMe$phone<TRes> get phone;
}

class _CopyWithImpl$Query$ViewMe$viewMe<TRes>
    implements CopyWith$Query$ViewMe$viewMe<TRes> {
  _CopyWithImpl$Query$ViewMe$viewMe(
    this._instance,
    this._then,
  );

  final Query$ViewMe$viewMe _instance;

  final TRes Function(Query$ViewMe$viewMe) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? firstName = _undefined,
    Object? lastName = _undefined,
    Object? username = _undefined,
    Object? email = _undefined,
    Object? bio = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? gender = _undefined,
    Object? displayName = _undefined,
    Object? dob = _undefined,
    Object? dateJoined = _undefined,
    Object? lastLogin = _undefined,
    Object? fullName = _undefined,
    Object? isMultibuyEnabled = _undefined,
    Object? shippingAddress = _undefined,
    Object? listing = _undefined,
    Object? isVerified = _undefined,
    Object? lastSeen = _undefined,
    Object? location = _undefined,
    Object? noOfFollowing = _undefined,
    Object? noOfFollowers = _undefined,
    Object? phone = _undefined,
    Object? isVacationMode = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$ViewMe$viewMe(
        id: id == _undefined ? _instance.id : (id as int?),
        firstName: firstName == _undefined
            ? _instance.firstName
            : (firstName as String?),
        lastName:
            lastName == _undefined ? _instance.lastName : (lastName as String?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        email: email == _undefined ? _instance.email : (email as String?),
        bio: bio == _undefined ? _instance.bio : (bio as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        gender: gender == _undefined ? _instance.gender : (gender as String?),
        displayName: displayName == _undefined
            ? _instance.displayName
            : (displayName as String?),
        dob: dob == _undefined ? _instance.dob : (dob as DateTime?),
        dateJoined: dateJoined == _undefined
            ? _instance.dateJoined
            : (dateJoined as DateTime?),
        lastLogin: lastLogin == _undefined
            ? _instance.lastLogin
            : (lastLogin as DateTime?),
        fullName:
            fullName == _undefined ? _instance.fullName : (fullName as String?),
        isMultibuyEnabled: isMultibuyEnabled == _undefined
            ? _instance.isMultibuyEnabled
            : (isMultibuyEnabled as bool?),
        shippingAddress: shippingAddress == _undefined
            ? _instance.shippingAddress
            : (shippingAddress as String?),
        listing: listing == _undefined ? _instance.listing : (listing as int?),
        isVerified: isVerified == _undefined
            ? _instance.isVerified
            : (isVerified as bool?),
        lastSeen: lastSeen == _undefined
            ? _instance.lastSeen
            : (lastSeen as DateTime?),
        location: location == _undefined
            ? _instance.location
            : (location as Query$ViewMe$viewMe$location?),
        noOfFollowing: noOfFollowing == _undefined
            ? _instance.noOfFollowing
            : (noOfFollowing as int?),
        noOfFollowers: noOfFollowers == _undefined
            ? _instance.noOfFollowers
            : (noOfFollowers as int?),
        phone: phone == _undefined
            ? _instance.phone
            : (phone as Query$ViewMe$viewMe$phone?),
        isVacationMode: isVacationMode == _undefined
            ? _instance.isVacationMode
            : (isVacationMode as bool?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$ViewMe$viewMe$location<TRes> get location {
    final local$location = _instance.location;
    return local$location == null
        ? CopyWith$Query$ViewMe$viewMe$location.stub(_then(_instance))
        : CopyWith$Query$ViewMe$viewMe$location(
            local$location, (e) => call(location: e));
  }

  CopyWith$Query$ViewMe$viewMe$phone<TRes> get phone {
    final local$phone = _instance.phone;
    return local$phone == null
        ? CopyWith$Query$ViewMe$viewMe$phone.stub(_then(_instance))
        : CopyWith$Query$ViewMe$viewMe$phone(
            local$phone, (e) => call(phone: e));
  }
}

class _CopyWithStubImpl$Query$ViewMe$viewMe<TRes>
    implements CopyWith$Query$ViewMe$viewMe<TRes> {
  _CopyWithStubImpl$Query$ViewMe$viewMe(this._res);

  TRes _res;

  call({
    int? id,
    String? firstName,
    String? lastName,
    String? username,
    String? email,
    String? bio,
    String? profilePictureUrl,
    String? gender,
    String? displayName,
    DateTime? dob,
    DateTime? dateJoined,
    DateTime? lastLogin,
    String? fullName,
    bool? isMultibuyEnabled,
    String? shippingAddress,
    int? listing,
    bool? isVerified,
    DateTime? lastSeen,
    Query$ViewMe$viewMe$location? location,
    int? noOfFollowing,
    int? noOfFollowers,
    Query$ViewMe$viewMe$phone? phone,
    bool? isVacationMode,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$ViewMe$viewMe$location<TRes> get location =>
      CopyWith$Query$ViewMe$viewMe$location.stub(_res);

  CopyWith$Query$ViewMe$viewMe$phone<TRes> get phone =>
      CopyWith$Query$ViewMe$viewMe$phone.stub(_res);
}

class Query$ViewMe$viewMe$location {
  Query$ViewMe$viewMe$location({
    this.latitude,
    this.longitude,
    this.locationName,
    this.$__typename = 'LocationType',
  });

  factory Query$ViewMe$viewMe$location.fromJson(Map<String, dynamic> json) {
    final l$latitude = json['latitude'];
    final l$longitude = json['longitude'];
    final l$locationName = json['locationName'];
    final l$$__typename = json['__typename'];
    return Query$ViewMe$viewMe$location(
      latitude: (l$latitude as String?),
      longitude: (l$longitude as String?),
      locationName: (l$locationName as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? latitude;

  final String? longitude;

  final String? locationName;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$latitude = latitude;
    _resultData['latitude'] = l$latitude;
    final l$longitude = longitude;
    _resultData['longitude'] = l$longitude;
    final l$locationName = locationName;
    _resultData['locationName'] = l$locationName;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$latitude = latitude;
    final l$longitude = longitude;
    final l$locationName = locationName;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$latitude,
      l$longitude,
      l$locationName,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$ViewMe$viewMe$location ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$latitude = latitude;
    final lOther$latitude = other.latitude;
    if (l$latitude != lOther$latitude) {
      return false;
    }
    final l$longitude = longitude;
    final lOther$longitude = other.longitude;
    if (l$longitude != lOther$longitude) {
      return false;
    }
    final l$locationName = locationName;
    final lOther$locationName = other.locationName;
    if (l$locationName != lOther$locationName) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$ViewMe$viewMe$location
    on Query$ViewMe$viewMe$location {
  CopyWith$Query$ViewMe$viewMe$location<Query$ViewMe$viewMe$location>
      get copyWith => CopyWith$Query$ViewMe$viewMe$location(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$ViewMe$viewMe$location<TRes> {
  factory CopyWith$Query$ViewMe$viewMe$location(
    Query$ViewMe$viewMe$location instance,
    TRes Function(Query$ViewMe$viewMe$location) then,
  ) = _CopyWithImpl$Query$ViewMe$viewMe$location;

  factory CopyWith$Query$ViewMe$viewMe$location.stub(TRes res) =
      _CopyWithStubImpl$Query$ViewMe$viewMe$location;

  TRes call({
    String? latitude,
    String? longitude,
    String? locationName,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$ViewMe$viewMe$location<TRes>
    implements CopyWith$Query$ViewMe$viewMe$location<TRes> {
  _CopyWithImpl$Query$ViewMe$viewMe$location(
    this._instance,
    this._then,
  );

  final Query$ViewMe$viewMe$location _instance;

  final TRes Function(Query$ViewMe$viewMe$location) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? latitude = _undefined,
    Object? longitude = _undefined,
    Object? locationName = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$ViewMe$viewMe$location(
        latitude:
            latitude == _undefined ? _instance.latitude : (latitude as String?),
        longitude: longitude == _undefined
            ? _instance.longitude
            : (longitude as String?),
        locationName: locationName == _undefined
            ? _instance.locationName
            : (locationName as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$ViewMe$viewMe$location<TRes>
    implements CopyWith$Query$ViewMe$viewMe$location<TRes> {
  _CopyWithStubImpl$Query$ViewMe$viewMe$location(this._res);

  TRes _res;

  call({
    String? latitude,
    String? longitude,
    String? locationName,
    String? $__typename,
  }) =>
      _res;
}

class Query$ViewMe$viewMe$phone {
  Query$ViewMe$viewMe$phone({
    this.number,
    this.countryCode,
    this.$__typename = 'PhoneType',
  });

  factory Query$ViewMe$viewMe$phone.fromJson(Map<String, dynamic> json) {
    final l$number = json['number'];
    final l$countryCode = json['countryCode'];
    final l$$__typename = json['__typename'];
    return Query$ViewMe$viewMe$phone(
      number: (l$number as String?),
      countryCode: (l$countryCode as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? number;

  final String? countryCode;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$number = number;
    _resultData['number'] = l$number;
    final l$countryCode = countryCode;
    _resultData['countryCode'] = l$countryCode;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$number = number;
    final l$countryCode = countryCode;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$number,
      l$countryCode,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$ViewMe$viewMe$phone ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$number = number;
    final lOther$number = other.number;
    if (l$number != lOther$number) {
      return false;
    }
    final l$countryCode = countryCode;
    final lOther$countryCode = other.countryCode;
    if (l$countryCode != lOther$countryCode) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$ViewMe$viewMe$phone
    on Query$ViewMe$viewMe$phone {
  CopyWith$Query$ViewMe$viewMe$phone<Query$ViewMe$viewMe$phone> get copyWith =>
      CopyWith$Query$ViewMe$viewMe$phone(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$ViewMe$viewMe$phone<TRes> {
  factory CopyWith$Query$ViewMe$viewMe$phone(
    Query$ViewMe$viewMe$phone instance,
    TRes Function(Query$ViewMe$viewMe$phone) then,
  ) = _CopyWithImpl$Query$ViewMe$viewMe$phone;

  factory CopyWith$Query$ViewMe$viewMe$phone.stub(TRes res) =
      _CopyWithStubImpl$Query$ViewMe$viewMe$phone;

  TRes call({
    String? number,
    String? countryCode,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$ViewMe$viewMe$phone<TRes>
    implements CopyWith$Query$ViewMe$viewMe$phone<TRes> {
  _CopyWithImpl$Query$ViewMe$viewMe$phone(
    this._instance,
    this._then,
  );

  final Query$ViewMe$viewMe$phone _instance;

  final TRes Function(Query$ViewMe$viewMe$phone) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? number = _undefined,
    Object? countryCode = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$ViewMe$viewMe$phone(
        number: number == _undefined ? _instance.number : (number as String?),
        countryCode: countryCode == _undefined
            ? _instance.countryCode
            : (countryCode as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$ViewMe$viewMe$phone<TRes>
    implements CopyWith$Query$ViewMe$viewMe$phone<TRes> {
  _CopyWithStubImpl$Query$ViewMe$viewMe$phone(this._res);

  TRes _res;

  call({
    String? number,
    String? countryCode,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$SearchUser {
  factory Variables$Query$SearchUser({required String search}) =>
      Variables$Query$SearchUser._({
        r'search': search,
      });

  Variables$Query$SearchUser._(this._$data);

  factory Variables$Query$SearchUser.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$search = data['search'];
    result$data['search'] = (l$search as String);
    return Variables$Query$SearchUser._(result$data);
  }

  Map<String, dynamic> _$data;

  String get search => (_$data['search'] as String);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$search = search;
    result$data['search'] = l$search;
    return result$data;
  }

  CopyWith$Variables$Query$SearchUser<Variables$Query$SearchUser>
      get copyWith => CopyWith$Variables$Query$SearchUser(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$SearchUser ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$search = search;
    final lOther$search = other.search;
    if (l$search != lOther$search) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$search = search;
    return Object.hashAll([l$search]);
  }
}

abstract class CopyWith$Variables$Query$SearchUser<TRes> {
  factory CopyWith$Variables$Query$SearchUser(
    Variables$Query$SearchUser instance,
    TRes Function(Variables$Query$SearchUser) then,
  ) = _CopyWithImpl$Variables$Query$SearchUser;

  factory CopyWith$Variables$Query$SearchUser.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$SearchUser;

  TRes call({String? search});
}

class _CopyWithImpl$Variables$Query$SearchUser<TRes>
    implements CopyWith$Variables$Query$SearchUser<TRes> {
  _CopyWithImpl$Variables$Query$SearchUser(
    this._instance,
    this._then,
  );

  final Variables$Query$SearchUser _instance;

  final TRes Function(Variables$Query$SearchUser) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? search = _undefined}) =>
      _then(Variables$Query$SearchUser._({
        ..._instance._$data,
        if (search != _undefined && search != null)
          'search': (search as String),
      }));
}

class _CopyWithStubImpl$Variables$Query$SearchUser<TRes>
    implements CopyWith$Variables$Query$SearchUser<TRes> {
  _CopyWithStubImpl$Variables$Query$SearchUser(this._res);

  TRes _res;

  call({String? search}) => _res;
}

class Query$SearchUser {
  Query$SearchUser({
    this.searchUsers,
    this.$__typename = 'Query',
  });

  factory Query$SearchUser.fromJson(Map<String, dynamic> json) {
    final l$searchUsers = json['searchUsers'];
    final l$$__typename = json['__typename'];
    return Query$SearchUser(
      searchUsers: (l$searchUsers as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$SearchUser$searchUsers.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$SearchUser$searchUsers?>? searchUsers;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$searchUsers = searchUsers;
    _resultData['searchUsers'] =
        l$searchUsers?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$searchUsers = searchUsers;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$searchUsers == null
          ? null
          : Object.hashAll(l$searchUsers.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$SearchUser || runtimeType != other.runtimeType) {
      return false;
    }
    final l$searchUsers = searchUsers;
    final lOther$searchUsers = other.searchUsers;
    if (l$searchUsers != null && lOther$searchUsers != null) {
      if (l$searchUsers.length != lOther$searchUsers.length) {
        return false;
      }
      for (int i = 0; i < l$searchUsers.length; i++) {
        final l$searchUsers$entry = l$searchUsers[i];
        final lOther$searchUsers$entry = lOther$searchUsers[i];
        if (l$searchUsers$entry != lOther$searchUsers$entry) {
          return false;
        }
      }
    } else if (l$searchUsers != lOther$searchUsers) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$SearchUser on Query$SearchUser {
  CopyWith$Query$SearchUser<Query$SearchUser> get copyWith =>
      CopyWith$Query$SearchUser(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$SearchUser<TRes> {
  factory CopyWith$Query$SearchUser(
    Query$SearchUser instance,
    TRes Function(Query$SearchUser) then,
  ) = _CopyWithImpl$Query$SearchUser;

  factory CopyWith$Query$SearchUser.stub(TRes res) =
      _CopyWithStubImpl$Query$SearchUser;

  TRes call({
    List<Query$SearchUser$searchUsers?>? searchUsers,
    String? $__typename,
  });
  TRes searchUsers(
      Iterable<Query$SearchUser$searchUsers?>? Function(
              Iterable<
                  CopyWith$Query$SearchUser$searchUsers<
                      Query$SearchUser$searchUsers>?>?)
          _fn);
}

class _CopyWithImpl$Query$SearchUser<TRes>
    implements CopyWith$Query$SearchUser<TRes> {
  _CopyWithImpl$Query$SearchUser(
    this._instance,
    this._then,
  );

  final Query$SearchUser _instance;

  final TRes Function(Query$SearchUser) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? searchUsers = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$SearchUser(
        searchUsers: searchUsers == _undefined
            ? _instance.searchUsers
            : (searchUsers as List<Query$SearchUser$searchUsers?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes searchUsers(
          Iterable<Query$SearchUser$searchUsers?>? Function(
                  Iterable<
                      CopyWith$Query$SearchUser$searchUsers<
                          Query$SearchUser$searchUsers>?>?)
              _fn) =>
      call(
          searchUsers: _fn(_instance.searchUsers?.map((e) => e == null
              ? null
              : CopyWith$Query$SearchUser$searchUsers(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$SearchUser<TRes>
    implements CopyWith$Query$SearchUser<TRes> {
  _CopyWithStubImpl$Query$SearchUser(this._res);

  TRes _res;

  call({
    List<Query$SearchUser$searchUsers?>? searchUsers,
    String? $__typename,
  }) =>
      _res;

  searchUsers(_fn) => _res;
}

const documentNodeQuerySearchUser = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'SearchUser'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'search')),
        type: NamedTypeNode(
          name: NameNode(value: 'String'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      )
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'searchUsers'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'search'),
            value: VariableNode(name: NameNode(value: 'search')),
          )
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'firstName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'lastName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'username'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'email'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'bio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'profilePictureUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'gender'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'dob'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'dateJoined'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'lastLogin'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'fullName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'listing'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'phone'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'number'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'countryCode'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$SearchUser _parserFn$Query$SearchUser(Map<String, dynamic> data) =>
    Query$SearchUser.fromJson(data);
typedef OnQueryComplete$Query$SearchUser = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$SearchUser?,
);

class Options$Query$SearchUser extends graphql.QueryOptions<Query$SearchUser> {
  Options$Query$SearchUser({
    String? operationName,
    required Variables$Query$SearchUser variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$SearchUser? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$SearchUser? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$SearchUser(data),
                  ),
          onError: onError,
          document: documentNodeQuerySearchUser,
          parserFn: _parserFn$Query$SearchUser,
        );

  final OnQueryComplete$Query$SearchUser? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$SearchUser
    extends graphql.WatchQueryOptions<Query$SearchUser> {
  WatchOptions$Query$SearchUser({
    String? operationName,
    required Variables$Query$SearchUser variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$SearchUser? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQuerySearchUser,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$SearchUser,
        );
}

class FetchMoreOptions$Query$SearchUser extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$SearchUser({
    required graphql.UpdateQuery updateQuery,
    required Variables$Query$SearchUser variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables.toJson(),
          document: documentNodeQuerySearchUser,
        );
}

extension ClientExtension$Query$SearchUser on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$SearchUser>> query$SearchUser(
          Options$Query$SearchUser options) async =>
      await this.query(options);
  graphql.ObservableQuery<Query$SearchUser> watchQuery$SearchUser(
          WatchOptions$Query$SearchUser options) =>
      this.watchQuery(options);
  void writeQuery$SearchUser({
    required Query$SearchUser data,
    required Variables$Query$SearchUser variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation: graphql.Operation(document: documentNodeQuerySearchUser),
          variables: variables.toJson(),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$SearchUser? readQuery$SearchUser({
    required Variables$Query$SearchUser variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQuerySearchUser),
        variables: variables.toJson(),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$SearchUser.fromJson(result);
  }
}

class Query$SearchUser$searchUsers {
  Query$SearchUser$searchUsers({
    this.id,
    this.firstName,
    this.lastName,
    this.username,
    this.email,
    this.bio,
    this.profilePictureUrl,
    this.gender,
    this.displayName,
    this.dob,
    this.dateJoined,
    this.lastLogin,
    this.fullName,
    this.listing,
    this.phone,
    this.$__typename = 'UserType',
  });

  factory Query$SearchUser$searchUsers.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$firstName = json['firstName'];
    final l$lastName = json['lastName'];
    final l$username = json['username'];
    final l$email = json['email'];
    final l$bio = json['bio'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$gender = json['gender'];
    final l$displayName = json['displayName'];
    final l$dob = json['dob'];
    final l$dateJoined = json['dateJoined'];
    final l$lastLogin = json['lastLogin'];
    final l$fullName = json['fullName'];
    final l$listing = json['listing'];
    final l$phone = json['phone'];
    final l$$__typename = json['__typename'];
    return Query$SearchUser$searchUsers(
      id: (l$id as int?),
      firstName: (l$firstName as String?),
      lastName: (l$lastName as String?),
      username: (l$username as String?),
      email: (l$email as String?),
      bio: (l$bio as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      gender: (l$gender as String?),
      displayName: (l$displayName as String?),
      dob: l$dob == null ? null : DateTime.parse((l$dob as String)),
      dateJoined: l$dateJoined == null
          ? null
          : DateTime.parse((l$dateJoined as String)),
      lastLogin:
          l$lastLogin == null ? null : DateTime.parse((l$lastLogin as String)),
      fullName: (l$fullName as String?),
      listing: (l$listing as int?),
      phone: l$phone == null
          ? null
          : Query$SearchUser$searchUsers$phone.fromJson(
              (l$phone as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? firstName;

  final String? lastName;

  final String? username;

  final String? email;

  final String? bio;

  final String? profilePictureUrl;

  final String? gender;

  final String? displayName;

  final DateTime? dob;

  final DateTime? dateJoined;

  final DateTime? lastLogin;

  final String? fullName;

  final int? listing;

  final Query$SearchUser$searchUsers$phone? phone;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$firstName = firstName;
    _resultData['firstName'] = l$firstName;
    final l$lastName = lastName;
    _resultData['lastName'] = l$lastName;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$email = email;
    _resultData['email'] = l$email;
    final l$bio = bio;
    _resultData['bio'] = l$bio;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$gender = gender;
    _resultData['gender'] = l$gender;
    final l$displayName = displayName;
    _resultData['displayName'] = l$displayName;
    final l$dob = dob;
    _resultData['dob'] = l$dob?.toIso8601String();
    final l$dateJoined = dateJoined;
    _resultData['dateJoined'] = l$dateJoined?.toIso8601String();
    final l$lastLogin = lastLogin;
    _resultData['lastLogin'] = l$lastLogin?.toIso8601String();
    final l$fullName = fullName;
    _resultData['fullName'] = l$fullName;
    final l$listing = listing;
    _resultData['listing'] = l$listing;
    final l$phone = phone;
    _resultData['phone'] = l$phone?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$firstName = firstName;
    final l$lastName = lastName;
    final l$username = username;
    final l$email = email;
    final l$bio = bio;
    final l$profilePictureUrl = profilePictureUrl;
    final l$gender = gender;
    final l$displayName = displayName;
    final l$dob = dob;
    final l$dateJoined = dateJoined;
    final l$lastLogin = lastLogin;
    final l$fullName = fullName;
    final l$listing = listing;
    final l$phone = phone;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$firstName,
      l$lastName,
      l$username,
      l$email,
      l$bio,
      l$profilePictureUrl,
      l$gender,
      l$displayName,
      l$dob,
      l$dateJoined,
      l$lastLogin,
      l$fullName,
      l$listing,
      l$phone,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$SearchUser$searchUsers ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$firstName = firstName;
    final lOther$firstName = other.firstName;
    if (l$firstName != lOther$firstName) {
      return false;
    }
    final l$lastName = lastName;
    final lOther$lastName = other.lastName;
    if (l$lastName != lOther$lastName) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (l$email != lOther$email) {
      return false;
    }
    final l$bio = bio;
    final lOther$bio = other.bio;
    if (l$bio != lOther$bio) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$gender = gender;
    final lOther$gender = other.gender;
    if (l$gender != lOther$gender) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$dob = dob;
    final lOther$dob = other.dob;
    if (l$dob != lOther$dob) {
      return false;
    }
    final l$dateJoined = dateJoined;
    final lOther$dateJoined = other.dateJoined;
    if (l$dateJoined != lOther$dateJoined) {
      return false;
    }
    final l$lastLogin = lastLogin;
    final lOther$lastLogin = other.lastLogin;
    if (l$lastLogin != lOther$lastLogin) {
      return false;
    }
    final l$fullName = fullName;
    final lOther$fullName = other.fullName;
    if (l$fullName != lOther$fullName) {
      return false;
    }
    final l$listing = listing;
    final lOther$listing = other.listing;
    if (l$listing != lOther$listing) {
      return false;
    }
    final l$phone = phone;
    final lOther$phone = other.phone;
    if (l$phone != lOther$phone) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$SearchUser$searchUsers
    on Query$SearchUser$searchUsers {
  CopyWith$Query$SearchUser$searchUsers<Query$SearchUser$searchUsers>
      get copyWith => CopyWith$Query$SearchUser$searchUsers(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$SearchUser$searchUsers<TRes> {
  factory CopyWith$Query$SearchUser$searchUsers(
    Query$SearchUser$searchUsers instance,
    TRes Function(Query$SearchUser$searchUsers) then,
  ) = _CopyWithImpl$Query$SearchUser$searchUsers;

  factory CopyWith$Query$SearchUser$searchUsers.stub(TRes res) =
      _CopyWithStubImpl$Query$SearchUser$searchUsers;

  TRes call({
    int? id,
    String? firstName,
    String? lastName,
    String? username,
    String? email,
    String? bio,
    String? profilePictureUrl,
    String? gender,
    String? displayName,
    DateTime? dob,
    DateTime? dateJoined,
    DateTime? lastLogin,
    String? fullName,
    int? listing,
    Query$SearchUser$searchUsers$phone? phone,
    String? $__typename,
  });
  CopyWith$Query$SearchUser$searchUsers$phone<TRes> get phone;
}

class _CopyWithImpl$Query$SearchUser$searchUsers<TRes>
    implements CopyWith$Query$SearchUser$searchUsers<TRes> {
  _CopyWithImpl$Query$SearchUser$searchUsers(
    this._instance,
    this._then,
  );

  final Query$SearchUser$searchUsers _instance;

  final TRes Function(Query$SearchUser$searchUsers) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? firstName = _undefined,
    Object? lastName = _undefined,
    Object? username = _undefined,
    Object? email = _undefined,
    Object? bio = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? gender = _undefined,
    Object? displayName = _undefined,
    Object? dob = _undefined,
    Object? dateJoined = _undefined,
    Object? lastLogin = _undefined,
    Object? fullName = _undefined,
    Object? listing = _undefined,
    Object? phone = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$SearchUser$searchUsers(
        id: id == _undefined ? _instance.id : (id as int?),
        firstName: firstName == _undefined
            ? _instance.firstName
            : (firstName as String?),
        lastName:
            lastName == _undefined ? _instance.lastName : (lastName as String?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        email: email == _undefined ? _instance.email : (email as String?),
        bio: bio == _undefined ? _instance.bio : (bio as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        gender: gender == _undefined ? _instance.gender : (gender as String?),
        displayName: displayName == _undefined
            ? _instance.displayName
            : (displayName as String?),
        dob: dob == _undefined ? _instance.dob : (dob as DateTime?),
        dateJoined: dateJoined == _undefined
            ? _instance.dateJoined
            : (dateJoined as DateTime?),
        lastLogin: lastLogin == _undefined
            ? _instance.lastLogin
            : (lastLogin as DateTime?),
        fullName:
            fullName == _undefined ? _instance.fullName : (fullName as String?),
        listing: listing == _undefined ? _instance.listing : (listing as int?),
        phone: phone == _undefined
            ? _instance.phone
            : (phone as Query$SearchUser$searchUsers$phone?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$SearchUser$searchUsers$phone<TRes> get phone {
    final local$phone = _instance.phone;
    return local$phone == null
        ? CopyWith$Query$SearchUser$searchUsers$phone.stub(_then(_instance))
        : CopyWith$Query$SearchUser$searchUsers$phone(
            local$phone, (e) => call(phone: e));
  }
}

class _CopyWithStubImpl$Query$SearchUser$searchUsers<TRes>
    implements CopyWith$Query$SearchUser$searchUsers<TRes> {
  _CopyWithStubImpl$Query$SearchUser$searchUsers(this._res);

  TRes _res;

  call({
    int? id,
    String? firstName,
    String? lastName,
    String? username,
    String? email,
    String? bio,
    String? profilePictureUrl,
    String? gender,
    String? displayName,
    DateTime? dob,
    DateTime? dateJoined,
    DateTime? lastLogin,
    String? fullName,
    int? listing,
    Query$SearchUser$searchUsers$phone? phone,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$SearchUser$searchUsers$phone<TRes> get phone =>
      CopyWith$Query$SearchUser$searchUsers$phone.stub(_res);
}

class Query$SearchUser$searchUsers$phone {
  Query$SearchUser$searchUsers$phone({
    this.number,
    this.countryCode,
    this.$__typename = 'PhoneType',
  });

  factory Query$SearchUser$searchUsers$phone.fromJson(
      Map<String, dynamic> json) {
    final l$number = json['number'];
    final l$countryCode = json['countryCode'];
    final l$$__typename = json['__typename'];
    return Query$SearchUser$searchUsers$phone(
      number: (l$number as String?),
      countryCode: (l$countryCode as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? number;

  final String? countryCode;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$number = number;
    _resultData['number'] = l$number;
    final l$countryCode = countryCode;
    _resultData['countryCode'] = l$countryCode;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$number = number;
    final l$countryCode = countryCode;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$number,
      l$countryCode,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$SearchUser$searchUsers$phone ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$number = number;
    final lOther$number = other.number;
    if (l$number != lOther$number) {
      return false;
    }
    final l$countryCode = countryCode;
    final lOther$countryCode = other.countryCode;
    if (l$countryCode != lOther$countryCode) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$SearchUser$searchUsers$phone
    on Query$SearchUser$searchUsers$phone {
  CopyWith$Query$SearchUser$searchUsers$phone<
          Query$SearchUser$searchUsers$phone>
      get copyWith => CopyWith$Query$SearchUser$searchUsers$phone(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$SearchUser$searchUsers$phone<TRes> {
  factory CopyWith$Query$SearchUser$searchUsers$phone(
    Query$SearchUser$searchUsers$phone instance,
    TRes Function(Query$SearchUser$searchUsers$phone) then,
  ) = _CopyWithImpl$Query$SearchUser$searchUsers$phone;

  factory CopyWith$Query$SearchUser$searchUsers$phone.stub(TRes res) =
      _CopyWithStubImpl$Query$SearchUser$searchUsers$phone;

  TRes call({
    String? number,
    String? countryCode,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$SearchUser$searchUsers$phone<TRes>
    implements CopyWith$Query$SearchUser$searchUsers$phone<TRes> {
  _CopyWithImpl$Query$SearchUser$searchUsers$phone(
    this._instance,
    this._then,
  );

  final Query$SearchUser$searchUsers$phone _instance;

  final TRes Function(Query$SearchUser$searchUsers$phone) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? number = _undefined,
    Object? countryCode = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$SearchUser$searchUsers$phone(
        number: number == _undefined ? _instance.number : (number as String?),
        countryCode: countryCode == _undefined
            ? _instance.countryCode
            : (countryCode as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$SearchUser$searchUsers$phone<TRes>
    implements CopyWith$Query$SearchUser$searchUsers$phone<TRes> {
  _CopyWithStubImpl$Query$SearchUser$searchUsers$phone(this._res);

  TRes _res;

  call({
    String? number,
    String? countryCode,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$GetUser {
  factory Variables$Query$GetUser({required String username}) =>
      Variables$Query$GetUser._({
        r'username': username,
      });

  Variables$Query$GetUser._(this._$data);

  factory Variables$Query$GetUser.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$username = data['username'];
    result$data['username'] = (l$username as String);
    return Variables$Query$GetUser._(result$data);
  }

  Map<String, dynamic> _$data;

  String get username => (_$data['username'] as String);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$username = username;
    result$data['username'] = l$username;
    return result$data;
  }

  CopyWith$Variables$Query$GetUser<Variables$Query$GetUser> get copyWith =>
      CopyWith$Variables$Query$GetUser(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$GetUser || runtimeType != other.runtimeType) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$username = username;
    return Object.hashAll([l$username]);
  }
}

abstract class CopyWith$Variables$Query$GetUser<TRes> {
  factory CopyWith$Variables$Query$GetUser(
    Variables$Query$GetUser instance,
    TRes Function(Variables$Query$GetUser) then,
  ) = _CopyWithImpl$Variables$Query$GetUser;

  factory CopyWith$Variables$Query$GetUser.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$GetUser;

  TRes call({String? username});
}

class _CopyWithImpl$Variables$Query$GetUser<TRes>
    implements CopyWith$Variables$Query$GetUser<TRes> {
  _CopyWithImpl$Variables$Query$GetUser(
    this._instance,
    this._then,
  );

  final Variables$Query$GetUser _instance;

  final TRes Function(Variables$Query$GetUser) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? username = _undefined}) =>
      _then(Variables$Query$GetUser._({
        ..._instance._$data,
        if (username != _undefined && username != null)
          'username': (username as String),
      }));
}

class _CopyWithStubImpl$Variables$Query$GetUser<TRes>
    implements CopyWith$Variables$Query$GetUser<TRes> {
  _CopyWithStubImpl$Variables$Query$GetUser(this._res);

  TRes _res;

  call({String? username}) => _res;
}

class Query$GetUser {
  Query$GetUser({
    this.getUser,
    this.$__typename = 'Query',
  });

  factory Query$GetUser.fromJson(Map<String, dynamic> json) {
    final l$getUser = json['getUser'];
    final l$$__typename = json['__typename'];
    return Query$GetUser(
      getUser: l$getUser == null
          ? null
          : Query$GetUser$getUser.fromJson((l$getUser as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final Query$GetUser$getUser? getUser;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$getUser = getUser;
    _resultData['getUser'] = l$getUser?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$getUser = getUser;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$getUser,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$GetUser || runtimeType != other.runtimeType) {
      return false;
    }
    final l$getUser = getUser;
    final lOther$getUser = other.getUser;
    if (l$getUser != lOther$getUser) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$GetUser on Query$GetUser {
  CopyWith$Query$GetUser<Query$GetUser> get copyWith => CopyWith$Query$GetUser(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$GetUser<TRes> {
  factory CopyWith$Query$GetUser(
    Query$GetUser instance,
    TRes Function(Query$GetUser) then,
  ) = _CopyWithImpl$Query$GetUser;

  factory CopyWith$Query$GetUser.stub(TRes res) =
      _CopyWithStubImpl$Query$GetUser;

  TRes call({
    Query$GetUser$getUser? getUser,
    String? $__typename,
  });
  CopyWith$Query$GetUser$getUser<TRes> get getUser;
}

class _CopyWithImpl$Query$GetUser<TRes>
    implements CopyWith$Query$GetUser<TRes> {
  _CopyWithImpl$Query$GetUser(
    this._instance,
    this._then,
  );

  final Query$GetUser _instance;

  final TRes Function(Query$GetUser) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? getUser = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$GetUser(
        getUser: getUser == _undefined
            ? _instance.getUser
            : (getUser as Query$GetUser$getUser?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$GetUser$getUser<TRes> get getUser {
    final local$getUser = _instance.getUser;
    return local$getUser == null
        ? CopyWith$Query$GetUser$getUser.stub(_then(_instance))
        : CopyWith$Query$GetUser$getUser(
            local$getUser, (e) => call(getUser: e));
  }
}

class _CopyWithStubImpl$Query$GetUser<TRes>
    implements CopyWith$Query$GetUser<TRes> {
  _CopyWithStubImpl$Query$GetUser(this._res);

  TRes _res;

  call({
    Query$GetUser$getUser? getUser,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$GetUser$getUser<TRes> get getUser =>
      CopyWith$Query$GetUser$getUser.stub(_res);
}

const documentNodeQueryGetUser = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'GetUser'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'username')),
        type: NamedTypeNode(
          name: NameNode(value: 'String'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      )
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'getUser'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'username'),
            value: VariableNode(name: NameNode(value: 'username')),
          )
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'firstName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'lastName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'username'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'email'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'bio'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'profilePictureUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'gender'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'displayName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'dob'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'dateJoined'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'lastLogin'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'fullName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'listing'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'lastSeen'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isMultibuyEnabled'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'shippingAddress'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'latitude'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'longitude'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'locationName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'noOfFollowing'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'noOfFollowers'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isFollowing'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isVacationMode'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'phone'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'number'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'countryCode'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$GetUser _parserFn$Query$GetUser(Map<String, dynamic> data) =>
    Query$GetUser.fromJson(data);
typedef OnQueryComplete$Query$GetUser = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$GetUser?,
);

class Options$Query$GetUser extends graphql.QueryOptions<Query$GetUser> {
  Options$Query$GetUser({
    String? operationName,
    required Variables$Query$GetUser variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$GetUser? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$GetUser? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$GetUser(data),
                  ),
          onError: onError,
          document: documentNodeQueryGetUser,
          parserFn: _parserFn$Query$GetUser,
        );

  final OnQueryComplete$Query$GetUser? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$GetUser
    extends graphql.WatchQueryOptions<Query$GetUser> {
  WatchOptions$Query$GetUser({
    String? operationName,
    required Variables$Query$GetUser variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$GetUser? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryGetUser,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$GetUser,
        );
}

class FetchMoreOptions$Query$GetUser extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$GetUser({
    required graphql.UpdateQuery updateQuery,
    required Variables$Query$GetUser variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables.toJson(),
          document: documentNodeQueryGetUser,
        );
}

extension ClientExtension$Query$GetUser on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$GetUser>> query$GetUser(
          Options$Query$GetUser options) async =>
      await this.query(options);
  graphql.ObservableQuery<Query$GetUser> watchQuery$GetUser(
          WatchOptions$Query$GetUser options) =>
      this.watchQuery(options);
  void writeQuery$GetUser({
    required Query$GetUser data,
    required Variables$Query$GetUser variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation: graphql.Operation(document: documentNodeQueryGetUser),
          variables: variables.toJson(),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$GetUser? readQuery$GetUser({
    required Variables$Query$GetUser variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQueryGetUser),
        variables: variables.toJson(),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$GetUser.fromJson(result);
  }
}

class Query$GetUser$getUser {
  Query$GetUser$getUser({
    this.id,
    this.firstName,
    this.lastName,
    this.username,
    this.email,
    this.bio,
    this.profilePictureUrl,
    this.gender,
    this.displayName,
    this.dob,
    this.dateJoined,
    this.lastLogin,
    this.fullName,
    this.listing,
    this.lastSeen,
    this.isMultibuyEnabled,
    this.shippingAddress,
    this.location,
    this.noOfFollowing,
    this.noOfFollowers,
    this.isFollowing,
    this.isVacationMode,
    this.phone,
    this.$__typename = 'UserType',
  });

  factory Query$GetUser$getUser.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$firstName = json['firstName'];
    final l$lastName = json['lastName'];
    final l$username = json['username'];
    final l$email = json['email'];
    final l$bio = json['bio'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$gender = json['gender'];
    final l$displayName = json['displayName'];
    final l$dob = json['dob'];
    final l$dateJoined = json['dateJoined'];
    final l$lastLogin = json['lastLogin'];
    final l$fullName = json['fullName'];
    final l$listing = json['listing'];
    final l$lastSeen = json['lastSeen'];
    final l$isMultibuyEnabled = json['isMultibuyEnabled'];
    final l$shippingAddress = json['shippingAddress'];
    final l$location = json['location'];
    final l$noOfFollowing = json['noOfFollowing'];
    final l$noOfFollowers = json['noOfFollowers'];
    final l$isFollowing = json['isFollowing'];
    final l$isVacationMode = json['isVacationMode'];
    final l$phone = json['phone'];
    final l$$__typename = json['__typename'];
    return Query$GetUser$getUser(
      id: (l$id as int?),
      firstName: (l$firstName as String?),
      lastName: (l$lastName as String?),
      username: (l$username as String?),
      email: (l$email as String?),
      bio: (l$bio as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      gender: (l$gender as String?),
      displayName: (l$displayName as String?),
      dob: l$dob == null ? null : DateTime.parse((l$dob as String)),
      dateJoined: l$dateJoined == null
          ? null
          : DateTime.parse((l$dateJoined as String)),
      lastLogin:
          l$lastLogin == null ? null : DateTime.parse((l$lastLogin as String)),
      fullName: (l$fullName as String?),
      listing: (l$listing as int?),
      lastSeen:
          l$lastSeen == null ? null : DateTime.parse((l$lastSeen as String)),
      isMultibuyEnabled: (l$isMultibuyEnabled as bool?),
      shippingAddress: (l$shippingAddress as String?),
      location: l$location == null
          ? null
          : Query$GetUser$getUser$location.fromJson(
              (l$location as Map<String, dynamic>)),
      noOfFollowing: (l$noOfFollowing as int?),
      noOfFollowers: (l$noOfFollowers as int?),
      isFollowing: (l$isFollowing as bool?),
      isVacationMode: (l$isVacationMode as bool?),
      phone: l$phone == null
          ? null
          : Query$GetUser$getUser$phone.fromJson(
              (l$phone as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? firstName;

  final String? lastName;

  final String? username;

  final String? email;

  final String? bio;

  final String? profilePictureUrl;

  final String? gender;

  final String? displayName;

  final DateTime? dob;

  final DateTime? dateJoined;

  final DateTime? lastLogin;

  final String? fullName;

  final int? listing;

  final DateTime? lastSeen;

  final bool? isMultibuyEnabled;

  final String? shippingAddress;

  final Query$GetUser$getUser$location? location;

  final int? noOfFollowing;

  final int? noOfFollowers;

  final bool? isFollowing;

  final bool? isVacationMode;

  final Query$GetUser$getUser$phone? phone;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$firstName = firstName;
    _resultData['firstName'] = l$firstName;
    final l$lastName = lastName;
    _resultData['lastName'] = l$lastName;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$email = email;
    _resultData['email'] = l$email;
    final l$bio = bio;
    _resultData['bio'] = l$bio;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$gender = gender;
    _resultData['gender'] = l$gender;
    final l$displayName = displayName;
    _resultData['displayName'] = l$displayName;
    final l$dob = dob;
    _resultData['dob'] = l$dob?.toIso8601String();
    final l$dateJoined = dateJoined;
    _resultData['dateJoined'] = l$dateJoined?.toIso8601String();
    final l$lastLogin = lastLogin;
    _resultData['lastLogin'] = l$lastLogin?.toIso8601String();
    final l$fullName = fullName;
    _resultData['fullName'] = l$fullName;
    final l$listing = listing;
    _resultData['listing'] = l$listing;
    final l$lastSeen = lastSeen;
    _resultData['lastSeen'] = l$lastSeen?.toIso8601String();
    final l$isMultibuyEnabled = isMultibuyEnabled;
    _resultData['isMultibuyEnabled'] = l$isMultibuyEnabled;
    final l$shippingAddress = shippingAddress;
    _resultData['shippingAddress'] = l$shippingAddress;
    final l$location = location;
    _resultData['location'] = l$location?.toJson();
    final l$noOfFollowing = noOfFollowing;
    _resultData['noOfFollowing'] = l$noOfFollowing;
    final l$noOfFollowers = noOfFollowers;
    _resultData['noOfFollowers'] = l$noOfFollowers;
    final l$isFollowing = isFollowing;
    _resultData['isFollowing'] = l$isFollowing;
    final l$isVacationMode = isVacationMode;
    _resultData['isVacationMode'] = l$isVacationMode;
    final l$phone = phone;
    _resultData['phone'] = l$phone?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$firstName = firstName;
    final l$lastName = lastName;
    final l$username = username;
    final l$email = email;
    final l$bio = bio;
    final l$profilePictureUrl = profilePictureUrl;
    final l$gender = gender;
    final l$displayName = displayName;
    final l$dob = dob;
    final l$dateJoined = dateJoined;
    final l$lastLogin = lastLogin;
    final l$fullName = fullName;
    final l$listing = listing;
    final l$lastSeen = lastSeen;
    final l$isMultibuyEnabled = isMultibuyEnabled;
    final l$shippingAddress = shippingAddress;
    final l$location = location;
    final l$noOfFollowing = noOfFollowing;
    final l$noOfFollowers = noOfFollowers;
    final l$isFollowing = isFollowing;
    final l$isVacationMode = isVacationMode;
    final l$phone = phone;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$firstName,
      l$lastName,
      l$username,
      l$email,
      l$bio,
      l$profilePictureUrl,
      l$gender,
      l$displayName,
      l$dob,
      l$dateJoined,
      l$lastLogin,
      l$fullName,
      l$listing,
      l$lastSeen,
      l$isMultibuyEnabled,
      l$shippingAddress,
      l$location,
      l$noOfFollowing,
      l$noOfFollowers,
      l$isFollowing,
      l$isVacationMode,
      l$phone,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$GetUser$getUser || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$firstName = firstName;
    final lOther$firstName = other.firstName;
    if (l$firstName != lOther$firstName) {
      return false;
    }
    final l$lastName = lastName;
    final lOther$lastName = other.lastName;
    if (l$lastName != lOther$lastName) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (l$email != lOther$email) {
      return false;
    }
    final l$bio = bio;
    final lOther$bio = other.bio;
    if (l$bio != lOther$bio) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$gender = gender;
    final lOther$gender = other.gender;
    if (l$gender != lOther$gender) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$dob = dob;
    final lOther$dob = other.dob;
    if (l$dob != lOther$dob) {
      return false;
    }
    final l$dateJoined = dateJoined;
    final lOther$dateJoined = other.dateJoined;
    if (l$dateJoined != lOther$dateJoined) {
      return false;
    }
    final l$lastLogin = lastLogin;
    final lOther$lastLogin = other.lastLogin;
    if (l$lastLogin != lOther$lastLogin) {
      return false;
    }
    final l$fullName = fullName;
    final lOther$fullName = other.fullName;
    if (l$fullName != lOther$fullName) {
      return false;
    }
    final l$listing = listing;
    final lOther$listing = other.listing;
    if (l$listing != lOther$listing) {
      return false;
    }
    final l$lastSeen = lastSeen;
    final lOther$lastSeen = other.lastSeen;
    if (l$lastSeen != lOther$lastSeen) {
      return false;
    }
    final l$isMultibuyEnabled = isMultibuyEnabled;
    final lOther$isMultibuyEnabled = other.isMultibuyEnabled;
    if (l$isMultibuyEnabled != lOther$isMultibuyEnabled) {
      return false;
    }
    final l$shippingAddress = shippingAddress;
    final lOther$shippingAddress = other.shippingAddress;
    if (l$shippingAddress != lOther$shippingAddress) {
      return false;
    }
    final l$location = location;
    final lOther$location = other.location;
    if (l$location != lOther$location) {
      return false;
    }
    final l$noOfFollowing = noOfFollowing;
    final lOther$noOfFollowing = other.noOfFollowing;
    if (l$noOfFollowing != lOther$noOfFollowing) {
      return false;
    }
    final l$noOfFollowers = noOfFollowers;
    final lOther$noOfFollowers = other.noOfFollowers;
    if (l$noOfFollowers != lOther$noOfFollowers) {
      return false;
    }
    final l$isFollowing = isFollowing;
    final lOther$isFollowing = other.isFollowing;
    if (l$isFollowing != lOther$isFollowing) {
      return false;
    }
    final l$isVacationMode = isVacationMode;
    final lOther$isVacationMode = other.isVacationMode;
    if (l$isVacationMode != lOther$isVacationMode) {
      return false;
    }
    final l$phone = phone;
    final lOther$phone = other.phone;
    if (l$phone != lOther$phone) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$GetUser$getUser on Query$GetUser$getUser {
  CopyWith$Query$GetUser$getUser<Query$GetUser$getUser> get copyWith =>
      CopyWith$Query$GetUser$getUser(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$GetUser$getUser<TRes> {
  factory CopyWith$Query$GetUser$getUser(
    Query$GetUser$getUser instance,
    TRes Function(Query$GetUser$getUser) then,
  ) = _CopyWithImpl$Query$GetUser$getUser;

  factory CopyWith$Query$GetUser$getUser.stub(TRes res) =
      _CopyWithStubImpl$Query$GetUser$getUser;

  TRes call({
    int? id,
    String? firstName,
    String? lastName,
    String? username,
    String? email,
    String? bio,
    String? profilePictureUrl,
    String? gender,
    String? displayName,
    DateTime? dob,
    DateTime? dateJoined,
    DateTime? lastLogin,
    String? fullName,
    int? listing,
    DateTime? lastSeen,
    bool? isMultibuyEnabled,
    String? shippingAddress,
    Query$GetUser$getUser$location? location,
    int? noOfFollowing,
    int? noOfFollowers,
    bool? isFollowing,
    bool? isVacationMode,
    Query$GetUser$getUser$phone? phone,
    String? $__typename,
  });
  CopyWith$Query$GetUser$getUser$location<TRes> get location;
  CopyWith$Query$GetUser$getUser$phone<TRes> get phone;
}

class _CopyWithImpl$Query$GetUser$getUser<TRes>
    implements CopyWith$Query$GetUser$getUser<TRes> {
  _CopyWithImpl$Query$GetUser$getUser(
    this._instance,
    this._then,
  );

  final Query$GetUser$getUser _instance;

  final TRes Function(Query$GetUser$getUser) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? firstName = _undefined,
    Object? lastName = _undefined,
    Object? username = _undefined,
    Object? email = _undefined,
    Object? bio = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? gender = _undefined,
    Object? displayName = _undefined,
    Object? dob = _undefined,
    Object? dateJoined = _undefined,
    Object? lastLogin = _undefined,
    Object? fullName = _undefined,
    Object? listing = _undefined,
    Object? lastSeen = _undefined,
    Object? isMultibuyEnabled = _undefined,
    Object? shippingAddress = _undefined,
    Object? location = _undefined,
    Object? noOfFollowing = _undefined,
    Object? noOfFollowers = _undefined,
    Object? isFollowing = _undefined,
    Object? isVacationMode = _undefined,
    Object? phone = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$GetUser$getUser(
        id: id == _undefined ? _instance.id : (id as int?),
        firstName: firstName == _undefined
            ? _instance.firstName
            : (firstName as String?),
        lastName:
            lastName == _undefined ? _instance.lastName : (lastName as String?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        email: email == _undefined ? _instance.email : (email as String?),
        bio: bio == _undefined ? _instance.bio : (bio as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        gender: gender == _undefined ? _instance.gender : (gender as String?),
        displayName: displayName == _undefined
            ? _instance.displayName
            : (displayName as String?),
        dob: dob == _undefined ? _instance.dob : (dob as DateTime?),
        dateJoined: dateJoined == _undefined
            ? _instance.dateJoined
            : (dateJoined as DateTime?),
        lastLogin: lastLogin == _undefined
            ? _instance.lastLogin
            : (lastLogin as DateTime?),
        fullName:
            fullName == _undefined ? _instance.fullName : (fullName as String?),
        listing: listing == _undefined ? _instance.listing : (listing as int?),
        lastSeen: lastSeen == _undefined
            ? _instance.lastSeen
            : (lastSeen as DateTime?),
        isMultibuyEnabled: isMultibuyEnabled == _undefined
            ? _instance.isMultibuyEnabled
            : (isMultibuyEnabled as bool?),
        shippingAddress: shippingAddress == _undefined
            ? _instance.shippingAddress
            : (shippingAddress as String?),
        location: location == _undefined
            ? _instance.location
            : (location as Query$GetUser$getUser$location?),
        noOfFollowing: noOfFollowing == _undefined
            ? _instance.noOfFollowing
            : (noOfFollowing as int?),
        noOfFollowers: noOfFollowers == _undefined
            ? _instance.noOfFollowers
            : (noOfFollowers as int?),
        isFollowing: isFollowing == _undefined
            ? _instance.isFollowing
            : (isFollowing as bool?),
        isVacationMode: isVacationMode == _undefined
            ? _instance.isVacationMode
            : (isVacationMode as bool?),
        phone: phone == _undefined
            ? _instance.phone
            : (phone as Query$GetUser$getUser$phone?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$GetUser$getUser$location<TRes> get location {
    final local$location = _instance.location;
    return local$location == null
        ? CopyWith$Query$GetUser$getUser$location.stub(_then(_instance))
        : CopyWith$Query$GetUser$getUser$location(
            local$location, (e) => call(location: e));
  }

  CopyWith$Query$GetUser$getUser$phone<TRes> get phone {
    final local$phone = _instance.phone;
    return local$phone == null
        ? CopyWith$Query$GetUser$getUser$phone.stub(_then(_instance))
        : CopyWith$Query$GetUser$getUser$phone(
            local$phone, (e) => call(phone: e));
  }
}

class _CopyWithStubImpl$Query$GetUser$getUser<TRes>
    implements CopyWith$Query$GetUser$getUser<TRes> {
  _CopyWithStubImpl$Query$GetUser$getUser(this._res);

  TRes _res;

  call({
    int? id,
    String? firstName,
    String? lastName,
    String? username,
    String? email,
    String? bio,
    String? profilePictureUrl,
    String? gender,
    String? displayName,
    DateTime? dob,
    DateTime? dateJoined,
    DateTime? lastLogin,
    String? fullName,
    int? listing,
    DateTime? lastSeen,
    bool? isMultibuyEnabled,
    String? shippingAddress,
    Query$GetUser$getUser$location? location,
    int? noOfFollowing,
    int? noOfFollowers,
    bool? isFollowing,
    bool? isVacationMode,
    Query$GetUser$getUser$phone? phone,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$GetUser$getUser$location<TRes> get location =>
      CopyWith$Query$GetUser$getUser$location.stub(_res);

  CopyWith$Query$GetUser$getUser$phone<TRes> get phone =>
      CopyWith$Query$GetUser$getUser$phone.stub(_res);
}

class Query$GetUser$getUser$location {
  Query$GetUser$getUser$location({
    this.latitude,
    this.longitude,
    this.locationName,
    this.$__typename = 'LocationType',
  });

  factory Query$GetUser$getUser$location.fromJson(Map<String, dynamic> json) {
    final l$latitude = json['latitude'];
    final l$longitude = json['longitude'];
    final l$locationName = json['locationName'];
    final l$$__typename = json['__typename'];
    return Query$GetUser$getUser$location(
      latitude: (l$latitude as String?),
      longitude: (l$longitude as String?),
      locationName: (l$locationName as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? latitude;

  final String? longitude;

  final String? locationName;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$latitude = latitude;
    _resultData['latitude'] = l$latitude;
    final l$longitude = longitude;
    _resultData['longitude'] = l$longitude;
    final l$locationName = locationName;
    _resultData['locationName'] = l$locationName;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$latitude = latitude;
    final l$longitude = longitude;
    final l$locationName = locationName;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$latitude,
      l$longitude,
      l$locationName,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$GetUser$getUser$location ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$latitude = latitude;
    final lOther$latitude = other.latitude;
    if (l$latitude != lOther$latitude) {
      return false;
    }
    final l$longitude = longitude;
    final lOther$longitude = other.longitude;
    if (l$longitude != lOther$longitude) {
      return false;
    }
    final l$locationName = locationName;
    final lOther$locationName = other.locationName;
    if (l$locationName != lOther$locationName) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$GetUser$getUser$location
    on Query$GetUser$getUser$location {
  CopyWith$Query$GetUser$getUser$location<Query$GetUser$getUser$location>
      get copyWith => CopyWith$Query$GetUser$getUser$location(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$GetUser$getUser$location<TRes> {
  factory CopyWith$Query$GetUser$getUser$location(
    Query$GetUser$getUser$location instance,
    TRes Function(Query$GetUser$getUser$location) then,
  ) = _CopyWithImpl$Query$GetUser$getUser$location;

  factory CopyWith$Query$GetUser$getUser$location.stub(TRes res) =
      _CopyWithStubImpl$Query$GetUser$getUser$location;

  TRes call({
    String? latitude,
    String? longitude,
    String? locationName,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$GetUser$getUser$location<TRes>
    implements CopyWith$Query$GetUser$getUser$location<TRes> {
  _CopyWithImpl$Query$GetUser$getUser$location(
    this._instance,
    this._then,
  );

  final Query$GetUser$getUser$location _instance;

  final TRes Function(Query$GetUser$getUser$location) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? latitude = _undefined,
    Object? longitude = _undefined,
    Object? locationName = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$GetUser$getUser$location(
        latitude:
            latitude == _undefined ? _instance.latitude : (latitude as String?),
        longitude: longitude == _undefined
            ? _instance.longitude
            : (longitude as String?),
        locationName: locationName == _undefined
            ? _instance.locationName
            : (locationName as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$GetUser$getUser$location<TRes>
    implements CopyWith$Query$GetUser$getUser$location<TRes> {
  _CopyWithStubImpl$Query$GetUser$getUser$location(this._res);

  TRes _res;

  call({
    String? latitude,
    String? longitude,
    String? locationName,
    String? $__typename,
  }) =>
      _res;
}

class Query$GetUser$getUser$phone {
  Query$GetUser$getUser$phone({
    this.number,
    this.countryCode,
    this.$__typename = 'PhoneType',
  });

  factory Query$GetUser$getUser$phone.fromJson(Map<String, dynamic> json) {
    final l$number = json['number'];
    final l$countryCode = json['countryCode'];
    final l$$__typename = json['__typename'];
    return Query$GetUser$getUser$phone(
      number: (l$number as String?),
      countryCode: (l$countryCode as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? number;

  final String? countryCode;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$number = number;
    _resultData['number'] = l$number;
    final l$countryCode = countryCode;
    _resultData['countryCode'] = l$countryCode;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$number = number;
    final l$countryCode = countryCode;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$number,
      l$countryCode,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$GetUser$getUser$phone ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$number = number;
    final lOther$number = other.number;
    if (l$number != lOther$number) {
      return false;
    }
    final l$countryCode = countryCode;
    final lOther$countryCode = other.countryCode;
    if (l$countryCode != lOther$countryCode) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$GetUser$getUser$phone
    on Query$GetUser$getUser$phone {
  CopyWith$Query$GetUser$getUser$phone<Query$GetUser$getUser$phone>
      get copyWith => CopyWith$Query$GetUser$getUser$phone(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$GetUser$getUser$phone<TRes> {
  factory CopyWith$Query$GetUser$getUser$phone(
    Query$GetUser$getUser$phone instance,
    TRes Function(Query$GetUser$getUser$phone) then,
  ) = _CopyWithImpl$Query$GetUser$getUser$phone;

  factory CopyWith$Query$GetUser$getUser$phone.stub(TRes res) =
      _CopyWithStubImpl$Query$GetUser$getUser$phone;

  TRes call({
    String? number,
    String? countryCode,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$GetUser$getUser$phone<TRes>
    implements CopyWith$Query$GetUser$getUser$phone<TRes> {
  _CopyWithImpl$Query$GetUser$getUser$phone(
    this._instance,
    this._then,
  );

  final Query$GetUser$getUser$phone _instance;

  final TRes Function(Query$GetUser$getUser$phone) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? number = _undefined,
    Object? countryCode = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$GetUser$getUser$phone(
        number: number == _undefined ? _instance.number : (number as String?),
        countryCode: countryCode == _undefined
            ? _instance.countryCode
            : (countryCode as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$GetUser$getUser$phone<TRes>
    implements CopyWith$Query$GetUser$getUser$phone<TRes> {
  _CopyWithStubImpl$Query$GetUser$getUser$phone(this._res);

  TRes _res;

  call({
    String? number,
    String? countryCode,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$Product {
  factory Variables$Query$Product({required int id}) =>
      Variables$Query$Product._({
        r'id': id,
      });

  Variables$Query$Product._(this._$data);

  factory Variables$Query$Product.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = (l$id as int);
    return Variables$Query$Product._(result$data);
  }

  Map<String, dynamic> _$data;

  int get id => (_$data['id'] as int);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = l$id;
    return result$data;
  }

  CopyWith$Variables$Query$Product<Variables$Query$Product> get copyWith =>
      CopyWith$Variables$Query$Product(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$Product || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    return Object.hashAll([l$id]);
  }
}

abstract class CopyWith$Variables$Query$Product<TRes> {
  factory CopyWith$Variables$Query$Product(
    Variables$Query$Product instance,
    TRes Function(Variables$Query$Product) then,
  ) = _CopyWithImpl$Variables$Query$Product;

  factory CopyWith$Variables$Query$Product.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$Product;

  TRes call({int? id});
}

class _CopyWithImpl$Variables$Query$Product<TRes>
    implements CopyWith$Variables$Query$Product<TRes> {
  _CopyWithImpl$Variables$Query$Product(
    this._instance,
    this._then,
  );

  final Variables$Query$Product _instance;

  final TRes Function(Variables$Query$Product) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? id = _undefined}) => _then(Variables$Query$Product._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as int),
      }));
}

class _CopyWithStubImpl$Variables$Query$Product<TRes>
    implements CopyWith$Variables$Query$Product<TRes> {
  _CopyWithStubImpl$Variables$Query$Product(this._res);

  TRes _res;

  call({int? id}) => _res;
}

class Query$Product {
  Query$Product({
    this.product,
    this.$__typename = 'Query',
  });

  factory Query$Product.fromJson(Map<String, dynamic> json) {
    final l$product = json['product'];
    final l$$__typename = json['__typename'];
    return Query$Product(
      product: l$product == null
          ? null
          : Query$Product$product.fromJson((l$product as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final Query$Product$product? product;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$product = product;
    _resultData['product'] = l$product?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$product = product;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$product,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Product || runtimeType != other.runtimeType) {
      return false;
    }
    final l$product = product;
    final lOther$product = other.product;
    if (l$product != lOther$product) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Product on Query$Product {
  CopyWith$Query$Product<Query$Product> get copyWith => CopyWith$Query$Product(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$Product<TRes> {
  factory CopyWith$Query$Product(
    Query$Product instance,
    TRes Function(Query$Product) then,
  ) = _CopyWithImpl$Query$Product;

  factory CopyWith$Query$Product.stub(TRes res) =
      _CopyWithStubImpl$Query$Product;

  TRes call({
    Query$Product$product? product,
    String? $__typename,
  });
  CopyWith$Query$Product$product<TRes> get product;
}

class _CopyWithImpl$Query$Product<TRes>
    implements CopyWith$Query$Product<TRes> {
  _CopyWithImpl$Query$Product(
    this._instance,
    this._then,
  );

  final Query$Product _instance;

  final TRes Function(Query$Product) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? product = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Product(
        product: product == _undefined
            ? _instance.product
            : (product as Query$Product$product?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$Product$product<TRes> get product {
    final local$product = _instance.product;
    return local$product == null
        ? CopyWith$Query$Product$product.stub(_then(_instance))
        : CopyWith$Query$Product$product(
            local$product, (e) => call(product: e));
  }
}

class _CopyWithStubImpl$Query$Product<TRes>
    implements CopyWith$Query$Product<TRes> {
  _CopyWithStubImpl$Query$Product(this._res);

  TRes _res;

  call({
    Query$Product$product? product,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$Product$product<TRes> get product =>
      CopyWith$Query$Product$product.stub(_res);
}

const documentNodeQueryProduct = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'Product'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'id')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      )
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'product'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'id'),
            value: VariableNode(name: NameNode(value: 'id')),
          )
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isFeatured'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'category'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'seller'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'profilePictureUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'condition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'discountPrice'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'size'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'condition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'price'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'parcelSize'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'views'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'likes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'userLiked'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'imagesUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'color'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'style'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'materials'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'customBrand'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'brand'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$Product _parserFn$Query$Product(Map<String, dynamic> data) =>
    Query$Product.fromJson(data);
typedef OnQueryComplete$Query$Product = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$Product?,
);

class Options$Query$Product extends graphql.QueryOptions<Query$Product> {
  Options$Query$Product({
    String? operationName,
    required Variables$Query$Product variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$Product? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$Product? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$Product(data),
                  ),
          onError: onError,
          document: documentNodeQueryProduct,
          parserFn: _parserFn$Query$Product,
        );

  final OnQueryComplete$Query$Product? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$Product
    extends graphql.WatchQueryOptions<Query$Product> {
  WatchOptions$Query$Product({
    String? operationName,
    required Variables$Query$Product variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$Product? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryProduct,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$Product,
        );
}

class FetchMoreOptions$Query$Product extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$Product({
    required graphql.UpdateQuery updateQuery,
    required Variables$Query$Product variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables.toJson(),
          document: documentNodeQueryProduct,
        );
}

extension ClientExtension$Query$Product on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$Product>> query$Product(
          Options$Query$Product options) async =>
      await this.query(options);
  graphql.ObservableQuery<Query$Product> watchQuery$Product(
          WatchOptions$Query$Product options) =>
      this.watchQuery(options);
  void writeQuery$Product({
    required Query$Product data,
    required Variables$Query$Product variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation: graphql.Operation(document: documentNodeQueryProduct),
          variables: variables.toJson(),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$Product? readQuery$Product({
    required Variables$Query$Product variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQueryProduct),
        variables: variables.toJson(),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$Product.fromJson(result);
  }
}

class Query$Product$product {
  Query$Product$product({
    required this.id,
    required this.name,
    required this.description,
    required this.isFeatured,
    this.category,
    this.seller,
    this.condition,
    required this.discountPrice,
    this.size,
    this.price,
    this.parcelSize,
    required this.views,
    required this.likes,
    this.userLiked,
    required this.imagesUrl,
    required this.createdAt,
    required this.updatedAt,
    required this.color,
    this.style,
    this.materials,
    this.customBrand,
    this.brand,
    this.$__typename = 'ProductType',
  });

  factory Query$Product$product.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$description = json['description'];
    final l$isFeatured = json['isFeatured'];
    final l$category = json['category'];
    final l$seller = json['seller'];
    final l$condition = json['condition'];
    final l$discountPrice = json['discountPrice'];
    final l$size = json['size'];
    final l$price = json['price'];
    final l$parcelSize = json['parcelSize'];
    final l$views = json['views'];
    final l$likes = json['likes'];
    final l$userLiked = json['userLiked'];
    final l$imagesUrl = json['imagesUrl'];
    final l$createdAt = json['createdAt'];
    final l$updatedAt = json['updatedAt'];
    final l$color = json['color'];
    final l$style = json['style'];
    final l$materials = json['materials'];
    final l$customBrand = json['customBrand'];
    final l$brand = json['brand'];
    final l$$__typename = json['__typename'];
    return Query$Product$product(
      id: (l$id as String),
      name: (l$name as String),
      description: (l$description as String),
      isFeatured: (l$isFeatured as bool),
      category: l$category == null
          ? null
          : Query$Product$product$category.fromJson(
              (l$category as Map<String, dynamic>)),
      seller: l$seller == null
          ? null
          : Query$Product$product$seller.fromJson(
              (l$seller as Map<String, dynamic>)),
      condition: l$condition == null
          ? null
          : fromJson$Enum$ProductsProductConditionChoices(
              (l$condition as String)),
      discountPrice: (l$discountPrice as String),
      size: l$size == null
          ? null
          : Query$Product$product$size.fromJson(
              (l$size as Map<String, dynamic>)),
      price: (l$price as num?)?.toDouble(),
      parcelSize: l$parcelSize == null
          ? null
          : fromJson$Enum$ProductsProductParcelSizeChoices(
              (l$parcelSize as String)),
      views: (l$views as int),
      likes: (l$likes as int),
      userLiked: (l$userLiked as bool?),
      imagesUrl:
          (l$imagesUrl as List<dynamic>).map((e) => (e as String)).toList(),
      createdAt: DateTime.parse((l$createdAt as String)),
      updatedAt: DateTime.parse((l$updatedAt as String)),
      color: (l$color as List<dynamic>).map((e) => (e as String)).toList(),
      style: l$style == null
          ? null
          : fromJson$Enum$ProductsProductStyleChoices((l$style as String)),
      materials: (l$materials as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$Product$product$materials.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      customBrand: (l$customBrand as String?),
      brand: l$brand == null
          ? null
          : Query$Product$product$brand.fromJson(
              (l$brand as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String name;

  final String description;

  final bool isFeatured;

  final Query$Product$product$category? category;

  final Query$Product$product$seller? seller;

  final Enum$ProductsProductConditionChoices? condition;

  final String discountPrice;

  final Query$Product$product$size? size;

  final double? price;

  final Enum$ProductsProductParcelSizeChoices? parcelSize;

  final int views;

  final int likes;

  final bool? userLiked;

  final List<String> imagesUrl;

  final DateTime createdAt;

  final DateTime updatedAt;

  final List<String> color;

  final Enum$ProductsProductStyleChoices? style;

  final List<Query$Product$product$materials?>? materials;

  final String? customBrand;

  final Query$Product$product$brand? brand;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$description = description;
    _resultData['description'] = l$description;
    final l$isFeatured = isFeatured;
    _resultData['isFeatured'] = l$isFeatured;
    final l$category = category;
    _resultData['category'] = l$category?.toJson();
    final l$seller = seller;
    _resultData['seller'] = l$seller?.toJson();
    final l$condition = condition;
    _resultData['condition'] = l$condition == null
        ? null
        : toJson$Enum$ProductsProductConditionChoices(l$condition);
    final l$discountPrice = discountPrice;
    _resultData['discountPrice'] = l$discountPrice;
    final l$size = size;
    _resultData['size'] = l$size?.toJson();
    final l$price = price;
    _resultData['price'] = l$price;
    final l$parcelSize = parcelSize;
    _resultData['parcelSize'] = l$parcelSize == null
        ? null
        : toJson$Enum$ProductsProductParcelSizeChoices(l$parcelSize);
    final l$views = views;
    _resultData['views'] = l$views;
    final l$likes = likes;
    _resultData['likes'] = l$likes;
    final l$userLiked = userLiked;
    _resultData['userLiked'] = l$userLiked;
    final l$imagesUrl = imagesUrl;
    _resultData['imagesUrl'] = l$imagesUrl.map((e) => e).toList();
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt.toIso8601String();
    final l$color = color;
    _resultData['color'] = l$color.map((e) => e).toList();
    final l$style = style;
    _resultData['style'] = l$style == null
        ? null
        : toJson$Enum$ProductsProductStyleChoices(l$style);
    final l$materials = materials;
    _resultData['materials'] = l$materials?.map((e) => e?.toJson()).toList();
    final l$customBrand = customBrand;
    _resultData['customBrand'] = l$customBrand;
    final l$brand = brand;
    _resultData['brand'] = l$brand?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$description = description;
    final l$isFeatured = isFeatured;
    final l$category = category;
    final l$seller = seller;
    final l$condition = condition;
    final l$discountPrice = discountPrice;
    final l$size = size;
    final l$price = price;
    final l$parcelSize = parcelSize;
    final l$views = views;
    final l$likes = likes;
    final l$userLiked = userLiked;
    final l$imagesUrl = imagesUrl;
    final l$createdAt = createdAt;
    final l$updatedAt = updatedAt;
    final l$color = color;
    final l$style = style;
    final l$materials = materials;
    final l$customBrand = customBrand;
    final l$brand = brand;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$description,
      l$isFeatured,
      l$category,
      l$seller,
      l$condition,
      l$discountPrice,
      l$size,
      l$price,
      l$parcelSize,
      l$views,
      l$likes,
      l$userLiked,
      Object.hashAll(l$imagesUrl.map((v) => v)),
      l$createdAt,
      l$updatedAt,
      Object.hashAll(l$color.map((v) => v)),
      l$style,
      l$materials == null ? null : Object.hashAll(l$materials.map((v) => v)),
      l$customBrand,
      l$brand,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Product$product || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (l$description != lOther$description) {
      return false;
    }
    final l$isFeatured = isFeatured;
    final lOther$isFeatured = other.isFeatured;
    if (l$isFeatured != lOther$isFeatured) {
      return false;
    }
    final l$category = category;
    final lOther$category = other.category;
    if (l$category != lOther$category) {
      return false;
    }
    final l$seller = seller;
    final lOther$seller = other.seller;
    if (l$seller != lOther$seller) {
      return false;
    }
    final l$condition = condition;
    final lOther$condition = other.condition;
    if (l$condition != lOther$condition) {
      return false;
    }
    final l$discountPrice = discountPrice;
    final lOther$discountPrice = other.discountPrice;
    if (l$discountPrice != lOther$discountPrice) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (l$size != lOther$size) {
      return false;
    }
    final l$price = price;
    final lOther$price = other.price;
    if (l$price != lOther$price) {
      return false;
    }
    final l$parcelSize = parcelSize;
    final lOther$parcelSize = other.parcelSize;
    if (l$parcelSize != lOther$parcelSize) {
      return false;
    }
    final l$views = views;
    final lOther$views = other.views;
    if (l$views != lOther$views) {
      return false;
    }
    final l$likes = likes;
    final lOther$likes = other.likes;
    if (l$likes != lOther$likes) {
      return false;
    }
    final l$userLiked = userLiked;
    final lOther$userLiked = other.userLiked;
    if (l$userLiked != lOther$userLiked) {
      return false;
    }
    final l$imagesUrl = imagesUrl;
    final lOther$imagesUrl = other.imagesUrl;
    if (l$imagesUrl.length != lOther$imagesUrl.length) {
      return false;
    }
    for (int i = 0; i < l$imagesUrl.length; i++) {
      final l$imagesUrl$entry = l$imagesUrl[i];
      final lOther$imagesUrl$entry = lOther$imagesUrl[i];
      if (l$imagesUrl$entry != lOther$imagesUrl$entry) {
        return false;
      }
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$color = color;
    final lOther$color = other.color;
    if (l$color.length != lOther$color.length) {
      return false;
    }
    for (int i = 0; i < l$color.length; i++) {
      final l$color$entry = l$color[i];
      final lOther$color$entry = lOther$color[i];
      if (l$color$entry != lOther$color$entry) {
        return false;
      }
    }
    final l$style = style;
    final lOther$style = other.style;
    if (l$style != lOther$style) {
      return false;
    }
    final l$materials = materials;
    final lOther$materials = other.materials;
    if (l$materials != null && lOther$materials != null) {
      if (l$materials.length != lOther$materials.length) {
        return false;
      }
      for (int i = 0; i < l$materials.length; i++) {
        final l$materials$entry = l$materials[i];
        final lOther$materials$entry = lOther$materials[i];
        if (l$materials$entry != lOther$materials$entry) {
          return false;
        }
      }
    } else if (l$materials != lOther$materials) {
      return false;
    }
    final l$customBrand = customBrand;
    final lOther$customBrand = other.customBrand;
    if (l$customBrand != lOther$customBrand) {
      return false;
    }
    final l$brand = brand;
    final lOther$brand = other.brand;
    if (l$brand != lOther$brand) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Product$product on Query$Product$product {
  CopyWith$Query$Product$product<Query$Product$product> get copyWith =>
      CopyWith$Query$Product$product(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$Product$product<TRes> {
  factory CopyWith$Query$Product$product(
    Query$Product$product instance,
    TRes Function(Query$Product$product) then,
  ) = _CopyWithImpl$Query$Product$product;

  factory CopyWith$Query$Product$product.stub(TRes res) =
      _CopyWithStubImpl$Query$Product$product;

  TRes call({
    String? id,
    String? name,
    String? description,
    bool? isFeatured,
    Query$Product$product$category? category,
    Query$Product$product$seller? seller,
    Enum$ProductsProductConditionChoices? condition,
    String? discountPrice,
    Query$Product$product$size? size,
    double? price,
    Enum$ProductsProductParcelSizeChoices? parcelSize,
    int? views,
    int? likes,
    bool? userLiked,
    List<String>? imagesUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<String>? color,
    Enum$ProductsProductStyleChoices? style,
    List<Query$Product$product$materials?>? materials,
    String? customBrand,
    Query$Product$product$brand? brand,
    String? $__typename,
  });
  CopyWith$Query$Product$product$category<TRes> get category;
  CopyWith$Query$Product$product$seller<TRes> get seller;
  CopyWith$Query$Product$product$size<TRes> get size;
  TRes materials(
      Iterable<Query$Product$product$materials?>? Function(
              Iterable<
                  CopyWith$Query$Product$product$materials<
                      Query$Product$product$materials>?>?)
          _fn);
  CopyWith$Query$Product$product$brand<TRes> get brand;
}

class _CopyWithImpl$Query$Product$product<TRes>
    implements CopyWith$Query$Product$product<TRes> {
  _CopyWithImpl$Query$Product$product(
    this._instance,
    this._then,
  );

  final Query$Product$product _instance;

  final TRes Function(Query$Product$product) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? description = _undefined,
    Object? isFeatured = _undefined,
    Object? category = _undefined,
    Object? seller = _undefined,
    Object? condition = _undefined,
    Object? discountPrice = _undefined,
    Object? size = _undefined,
    Object? price = _undefined,
    Object? parcelSize = _undefined,
    Object? views = _undefined,
    Object? likes = _undefined,
    Object? userLiked = _undefined,
    Object? imagesUrl = _undefined,
    Object? createdAt = _undefined,
    Object? updatedAt = _undefined,
    Object? color = _undefined,
    Object? style = _undefined,
    Object? materials = _undefined,
    Object? customBrand = _undefined,
    Object? brand = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Product$product(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        description: description == _undefined || description == null
            ? _instance.description
            : (description as String),
        isFeatured: isFeatured == _undefined || isFeatured == null
            ? _instance.isFeatured
            : (isFeatured as bool),
        category: category == _undefined
            ? _instance.category
            : (category as Query$Product$product$category?),
        seller: seller == _undefined
            ? _instance.seller
            : (seller as Query$Product$product$seller?),
        condition: condition == _undefined
            ? _instance.condition
            : (condition as Enum$ProductsProductConditionChoices?),
        discountPrice: discountPrice == _undefined || discountPrice == null
            ? _instance.discountPrice
            : (discountPrice as String),
        size: size == _undefined
            ? _instance.size
            : (size as Query$Product$product$size?),
        price: price == _undefined ? _instance.price : (price as double?),
        parcelSize: parcelSize == _undefined
            ? _instance.parcelSize
            : (parcelSize as Enum$ProductsProductParcelSizeChoices?),
        views: views == _undefined || views == null
            ? _instance.views
            : (views as int),
        likes: likes == _undefined || likes == null
            ? _instance.likes
            : (likes as int),
        userLiked: userLiked == _undefined
            ? _instance.userLiked
            : (userLiked as bool?),
        imagesUrl: imagesUrl == _undefined || imagesUrl == null
            ? _instance.imagesUrl
            : (imagesUrl as List<String>),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        updatedAt: updatedAt == _undefined || updatedAt == null
            ? _instance.updatedAt
            : (updatedAt as DateTime),
        color: color == _undefined || color == null
            ? _instance.color
            : (color as List<String>),
        style: style == _undefined
            ? _instance.style
            : (style as Enum$ProductsProductStyleChoices?),
        materials: materials == _undefined
            ? _instance.materials
            : (materials as List<Query$Product$product$materials?>?),
        customBrand: customBrand == _undefined
            ? _instance.customBrand
            : (customBrand as String?),
        brand: brand == _undefined
            ? _instance.brand
            : (brand as Query$Product$product$brand?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$Product$product$category<TRes> get category {
    final local$category = _instance.category;
    return local$category == null
        ? CopyWith$Query$Product$product$category.stub(_then(_instance))
        : CopyWith$Query$Product$product$category(
            local$category, (e) => call(category: e));
  }

  CopyWith$Query$Product$product$seller<TRes> get seller {
    final local$seller = _instance.seller;
    return local$seller == null
        ? CopyWith$Query$Product$product$seller.stub(_then(_instance))
        : CopyWith$Query$Product$product$seller(
            local$seller, (e) => call(seller: e));
  }

  CopyWith$Query$Product$product$size<TRes> get size {
    final local$size = _instance.size;
    return local$size == null
        ? CopyWith$Query$Product$product$size.stub(_then(_instance))
        : CopyWith$Query$Product$product$size(local$size, (e) => call(size: e));
  }

  TRes materials(
          Iterable<Query$Product$product$materials?>? Function(
                  Iterable<
                      CopyWith$Query$Product$product$materials<
                          Query$Product$product$materials>?>?)
              _fn) =>
      call(
          materials: _fn(_instance.materials?.map((e) => e == null
              ? null
              : CopyWith$Query$Product$product$materials(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Query$Product$product$brand<TRes> get brand {
    final local$brand = _instance.brand;
    return local$brand == null
        ? CopyWith$Query$Product$product$brand.stub(_then(_instance))
        : CopyWith$Query$Product$product$brand(
            local$brand, (e) => call(brand: e));
  }
}

class _CopyWithStubImpl$Query$Product$product<TRes>
    implements CopyWith$Query$Product$product<TRes> {
  _CopyWithStubImpl$Query$Product$product(this._res);

  TRes _res;

  call({
    String? id,
    String? name,
    String? description,
    bool? isFeatured,
    Query$Product$product$category? category,
    Query$Product$product$seller? seller,
    Enum$ProductsProductConditionChoices? condition,
    String? discountPrice,
    Query$Product$product$size? size,
    double? price,
    Enum$ProductsProductParcelSizeChoices? parcelSize,
    int? views,
    int? likes,
    bool? userLiked,
    List<String>? imagesUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<String>? color,
    Enum$ProductsProductStyleChoices? style,
    List<Query$Product$product$materials?>? materials,
    String? customBrand,
    Query$Product$product$brand? brand,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$Product$product$category<TRes> get category =>
      CopyWith$Query$Product$product$category.stub(_res);

  CopyWith$Query$Product$product$seller<TRes> get seller =>
      CopyWith$Query$Product$product$seller.stub(_res);

  CopyWith$Query$Product$product$size<TRes> get size =>
      CopyWith$Query$Product$product$size.stub(_res);

  materials(_fn) => _res;

  CopyWith$Query$Product$product$brand<TRes> get brand =>
      CopyWith$Query$Product$product$brand.stub(_res);
}

class Query$Product$product$category {
  Query$Product$product$category({
    this.id,
    this.name,
    this.$__typename = 'CategoryType',
  });

  factory Query$Product$product$category.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$Product$product$category(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Product$product$category ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Product$product$category
    on Query$Product$product$category {
  CopyWith$Query$Product$product$category<Query$Product$product$category>
      get copyWith => CopyWith$Query$Product$product$category(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Product$product$category<TRes> {
  factory CopyWith$Query$Product$product$category(
    Query$Product$product$category instance,
    TRes Function(Query$Product$product$category) then,
  ) = _CopyWithImpl$Query$Product$product$category;

  factory CopyWith$Query$Product$product$category.stub(TRes res) =
      _CopyWithStubImpl$Query$Product$product$category;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Product$product$category<TRes>
    implements CopyWith$Query$Product$product$category<TRes> {
  _CopyWithImpl$Query$Product$product$category(
    this._instance,
    this._then,
  );

  final Query$Product$product$category _instance;

  final TRes Function(Query$Product$product$category) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Product$product$category(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Product$product$category<TRes>
    implements CopyWith$Query$Product$product$category<TRes> {
  _CopyWithStubImpl$Query$Product$product$category(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$Product$product$seller {
  Query$Product$product$seller({
    this.id,
    this.username,
    this.profilePictureUrl,
    this.$__typename = 'UserType',
  });

  factory Query$Product$product$seller.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$$__typename = json['__typename'];
    return Query$Product$product$seller(
      id: (l$id as int?),
      username: (l$username as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String? profilePictureUrl;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$profilePictureUrl = profilePictureUrl;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$profilePictureUrl,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Product$product$seller ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Product$product$seller
    on Query$Product$product$seller {
  CopyWith$Query$Product$product$seller<Query$Product$product$seller>
      get copyWith => CopyWith$Query$Product$product$seller(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Product$product$seller<TRes> {
  factory CopyWith$Query$Product$product$seller(
    Query$Product$product$seller instance,
    TRes Function(Query$Product$product$seller) then,
  ) = _CopyWithImpl$Query$Product$product$seller;

  factory CopyWith$Query$Product$product$seller.stub(TRes res) =
      _CopyWithStubImpl$Query$Product$product$seller;

  TRes call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Product$product$seller<TRes>
    implements CopyWith$Query$Product$product$seller<TRes> {
  _CopyWithImpl$Query$Product$product$seller(
    this._instance,
    this._then,
  );

  final Query$Product$product$seller _instance;

  final TRes Function(Query$Product$product$seller) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Product$product$seller(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Product$product$seller<TRes>
    implements CopyWith$Query$Product$product$seller<TRes> {
  _CopyWithStubImpl$Query$Product$product$seller(this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? $__typename,
  }) =>
      _res;
}

class Query$Product$product$size {
  Query$Product$product$size({
    this.id,
    this.name,
    this.$__typename = 'SizeType',
  });

  factory Query$Product$product$size.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$Product$product$size(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Product$product$size ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Product$product$size
    on Query$Product$product$size {
  CopyWith$Query$Product$product$size<Query$Product$product$size>
      get copyWith => CopyWith$Query$Product$product$size(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Product$product$size<TRes> {
  factory CopyWith$Query$Product$product$size(
    Query$Product$product$size instance,
    TRes Function(Query$Product$product$size) then,
  ) = _CopyWithImpl$Query$Product$product$size;

  factory CopyWith$Query$Product$product$size.stub(TRes res) =
      _CopyWithStubImpl$Query$Product$product$size;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Product$product$size<TRes>
    implements CopyWith$Query$Product$product$size<TRes> {
  _CopyWithImpl$Query$Product$product$size(
    this._instance,
    this._then,
  );

  final Query$Product$product$size _instance;

  final TRes Function(Query$Product$product$size) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Product$product$size(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Product$product$size<TRes>
    implements CopyWith$Query$Product$product$size<TRes> {
  _CopyWithStubImpl$Query$Product$product$size(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$Product$product$materials {
  Query$Product$product$materials({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$Product$product$materials.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$Product$product$materials(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Product$product$materials ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Product$product$materials
    on Query$Product$product$materials {
  CopyWith$Query$Product$product$materials<Query$Product$product$materials>
      get copyWith => CopyWith$Query$Product$product$materials(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Product$product$materials<TRes> {
  factory CopyWith$Query$Product$product$materials(
    Query$Product$product$materials instance,
    TRes Function(Query$Product$product$materials) then,
  ) = _CopyWithImpl$Query$Product$product$materials;

  factory CopyWith$Query$Product$product$materials.stub(TRes res) =
      _CopyWithStubImpl$Query$Product$product$materials;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Product$product$materials<TRes>
    implements CopyWith$Query$Product$product$materials<TRes> {
  _CopyWithImpl$Query$Product$product$materials(
    this._instance,
    this._then,
  );

  final Query$Product$product$materials _instance;

  final TRes Function(Query$Product$product$materials) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Product$product$materials(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Product$product$materials<TRes>
    implements CopyWith$Query$Product$product$materials<TRes> {
  _CopyWithStubImpl$Query$Product$product$materials(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$Product$product$brand {
  Query$Product$product$brand({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$Product$product$brand.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$Product$product$brand(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Product$product$brand ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Product$product$brand
    on Query$Product$product$brand {
  CopyWith$Query$Product$product$brand<Query$Product$product$brand>
      get copyWith => CopyWith$Query$Product$product$brand(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Product$product$brand<TRes> {
  factory CopyWith$Query$Product$product$brand(
    Query$Product$product$brand instance,
    TRes Function(Query$Product$product$brand) then,
  ) = _CopyWithImpl$Query$Product$product$brand;

  factory CopyWith$Query$Product$product$brand.stub(TRes res) =
      _CopyWithStubImpl$Query$Product$product$brand;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Product$product$brand<TRes>
    implements CopyWith$Query$Product$product$brand<TRes> {
  _CopyWithImpl$Query$Product$product$brand(
    this._instance,
    this._then,
  );

  final Query$Product$product$brand _instance;

  final TRes Function(Query$Product$product$brand) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Product$product$brand(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Product$product$brand<TRes>
    implements CopyWith$Query$Product$product$brand<TRes> {
  _CopyWithStubImpl$Query$Product$product$brand(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$RecentlyViewedproducts {
  Query$RecentlyViewedproducts({
    this.recentlyViewedProducts,
    this.$__typename = 'Query',
  });

  factory Query$RecentlyViewedproducts.fromJson(Map<String, dynamic> json) {
    final l$recentlyViewedProducts = json['recentlyViewedProducts'];
    final l$$__typename = json['__typename'];
    return Query$RecentlyViewedproducts(
      recentlyViewedProducts: (l$recentlyViewedProducts as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$RecentlyViewedproducts$recentlyViewedProducts.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$RecentlyViewedproducts$recentlyViewedProducts?>?
      recentlyViewedProducts;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$recentlyViewedProducts = recentlyViewedProducts;
    _resultData['recentlyViewedProducts'] =
        l$recentlyViewedProducts?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$recentlyViewedProducts = recentlyViewedProducts;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$recentlyViewedProducts == null
          ? null
          : Object.hashAll(l$recentlyViewedProducts.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$RecentlyViewedproducts ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$recentlyViewedProducts = recentlyViewedProducts;
    final lOther$recentlyViewedProducts = other.recentlyViewedProducts;
    if (l$recentlyViewedProducts != null &&
        lOther$recentlyViewedProducts != null) {
      if (l$recentlyViewedProducts.length !=
          lOther$recentlyViewedProducts.length) {
        return false;
      }
      for (int i = 0; i < l$recentlyViewedProducts.length; i++) {
        final l$recentlyViewedProducts$entry = l$recentlyViewedProducts[i];
        final lOther$recentlyViewedProducts$entry =
            lOther$recentlyViewedProducts[i];
        if (l$recentlyViewedProducts$entry !=
            lOther$recentlyViewedProducts$entry) {
          return false;
        }
      }
    } else if (l$recentlyViewedProducts != lOther$recentlyViewedProducts) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$RecentlyViewedproducts
    on Query$RecentlyViewedproducts {
  CopyWith$Query$RecentlyViewedproducts<Query$RecentlyViewedproducts>
      get copyWith => CopyWith$Query$RecentlyViewedproducts(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$RecentlyViewedproducts<TRes> {
  factory CopyWith$Query$RecentlyViewedproducts(
    Query$RecentlyViewedproducts instance,
    TRes Function(Query$RecentlyViewedproducts) then,
  ) = _CopyWithImpl$Query$RecentlyViewedproducts;

  factory CopyWith$Query$RecentlyViewedproducts.stub(TRes res) =
      _CopyWithStubImpl$Query$RecentlyViewedproducts;

  TRes call({
    List<Query$RecentlyViewedproducts$recentlyViewedProducts?>?
        recentlyViewedProducts,
    String? $__typename,
  });
  TRes recentlyViewedProducts(
      Iterable<Query$RecentlyViewedproducts$recentlyViewedProducts?>? Function(
              Iterable<
                  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts<
                      Query$RecentlyViewedproducts$recentlyViewedProducts>?>?)
          _fn);
}

class _CopyWithImpl$Query$RecentlyViewedproducts<TRes>
    implements CopyWith$Query$RecentlyViewedproducts<TRes> {
  _CopyWithImpl$Query$RecentlyViewedproducts(
    this._instance,
    this._then,
  );

  final Query$RecentlyViewedproducts _instance;

  final TRes Function(Query$RecentlyViewedproducts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? recentlyViewedProducts = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$RecentlyViewedproducts(
        recentlyViewedProducts: recentlyViewedProducts == _undefined
            ? _instance.recentlyViewedProducts
            : (recentlyViewedProducts
                as List<Query$RecentlyViewedproducts$recentlyViewedProducts?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes recentlyViewedProducts(
          Iterable<Query$RecentlyViewedproducts$recentlyViewedProducts?>? Function(
                  Iterable<
                      CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts<
                          Query$RecentlyViewedproducts$recentlyViewedProducts>?>?)
              _fn) =>
      call(
          recentlyViewedProducts:
              _fn(_instance.recentlyViewedProducts?.map((e) => e == null
                  ? null
                  : CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts(
                      e,
                      (i) => i,
                    )))?.toList());
}

class _CopyWithStubImpl$Query$RecentlyViewedproducts<TRes>
    implements CopyWith$Query$RecentlyViewedproducts<TRes> {
  _CopyWithStubImpl$Query$RecentlyViewedproducts(this._res);

  TRes _res;

  call({
    List<Query$RecentlyViewedproducts$recentlyViewedProducts?>?
        recentlyViewedProducts,
    String? $__typename,
  }) =>
      _res;

  recentlyViewedProducts(_fn) => _res;
}

const documentNodeQueryRecentlyViewedproducts = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'RecentlyViewedproducts'),
    variableDefinitions: [],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'recentlyViewedProducts'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isFeatured'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'category'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'size'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'seller'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'profilePictureUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'condition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'discountPrice'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'condition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'price'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'parcelSize'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'views'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'likes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'userLiked'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'imagesUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'likes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'color'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'style'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'materials'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'customBrand'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'brand'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'hashtags'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$RecentlyViewedproducts _parserFn$Query$RecentlyViewedproducts(
        Map<String, dynamic> data) =>
    Query$RecentlyViewedproducts.fromJson(data);
typedef OnQueryComplete$Query$RecentlyViewedproducts = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$RecentlyViewedproducts?,
);

class Options$Query$RecentlyViewedproducts
    extends graphql.QueryOptions<Query$RecentlyViewedproducts> {
  Options$Query$RecentlyViewedproducts({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$RecentlyViewedproducts? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$RecentlyViewedproducts? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null
                        ? null
                        : _parserFn$Query$RecentlyViewedproducts(data),
                  ),
          onError: onError,
          document: documentNodeQueryRecentlyViewedproducts,
          parserFn: _parserFn$Query$RecentlyViewedproducts,
        );

  final OnQueryComplete$Query$RecentlyViewedproducts? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$RecentlyViewedproducts
    extends graphql.WatchQueryOptions<Query$RecentlyViewedproducts> {
  WatchOptions$Query$RecentlyViewedproducts({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$RecentlyViewedproducts? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryRecentlyViewedproducts,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$RecentlyViewedproducts,
        );
}

class FetchMoreOptions$Query$RecentlyViewedproducts
    extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$RecentlyViewedproducts(
      {required graphql.UpdateQuery updateQuery})
      : super(
          updateQuery: updateQuery,
          document: documentNodeQueryRecentlyViewedproducts,
        );
}

extension ClientExtension$Query$RecentlyViewedproducts
    on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$RecentlyViewedproducts>>
      query$RecentlyViewedproducts(
              [Options$Query$RecentlyViewedproducts? options]) async =>
          await this.query(options ?? Options$Query$RecentlyViewedproducts());
  graphql.ObservableQuery<
      Query$RecentlyViewedproducts> watchQuery$RecentlyViewedproducts(
          [WatchOptions$Query$RecentlyViewedproducts? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$RecentlyViewedproducts());
  void writeQuery$RecentlyViewedproducts({
    required Query$RecentlyViewedproducts data,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
            operation: graphql.Operation(
                document: documentNodeQueryRecentlyViewedproducts)),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$RecentlyViewedproducts? readQuery$RecentlyViewedproducts(
      {bool optimistic = true}) {
    final result = this.readQuery(
      graphql.Request(
          operation: graphql.Operation(
              document: documentNodeQueryRecentlyViewedproducts)),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Query$RecentlyViewedproducts.fromJson(result);
  }
}

class Query$RecentlyViewedproducts$recentlyViewedProducts {
  Query$RecentlyViewedproducts$recentlyViewedProducts({
    required this.id,
    required this.name,
    required this.description,
    required this.isFeatured,
    this.category,
    this.size,
    this.seller,
    this.condition,
    required this.discountPrice,
    this.price,
    this.parcelSize,
    required this.views,
    required this.likes,
    this.userLiked,
    required this.imagesUrl,
    required this.createdAt,
    required this.updatedAt,
    required this.color,
    this.style,
    this.materials,
    this.customBrand,
    this.brand,
    required this.hashtags,
    this.$__typename = 'ProductType',
  });

  factory Query$RecentlyViewedproducts$recentlyViewedProducts.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$description = json['description'];
    final l$isFeatured = json['isFeatured'];
    final l$category = json['category'];
    final l$size = json['size'];
    final l$seller = json['seller'];
    final l$condition = json['condition'];
    final l$discountPrice = json['discountPrice'];
    final l$price = json['price'];
    final l$parcelSize = json['parcelSize'];
    final l$views = json['views'];
    final l$likes = json['likes'];
    final l$userLiked = json['userLiked'];
    final l$imagesUrl = json['imagesUrl'];
    final l$createdAt = json['createdAt'];
    final l$updatedAt = json['updatedAt'];
    final l$color = json['color'];
    final l$style = json['style'];
    final l$materials = json['materials'];
    final l$customBrand = json['customBrand'];
    final l$brand = json['brand'];
    final l$hashtags = json['hashtags'];
    final l$$__typename = json['__typename'];
    return Query$RecentlyViewedproducts$recentlyViewedProducts(
      id: (l$id as String),
      name: (l$name as String),
      description: (l$description as String),
      isFeatured: (l$isFeatured as bool),
      category: l$category == null
          ? null
          : Query$RecentlyViewedproducts$recentlyViewedProducts$category
              .fromJson((l$category as Map<String, dynamic>)),
      size: l$size == null
          ? null
          : Query$RecentlyViewedproducts$recentlyViewedProducts$size.fromJson(
              (l$size as Map<String, dynamic>)),
      seller: l$seller == null
          ? null
          : Query$RecentlyViewedproducts$recentlyViewedProducts$seller.fromJson(
              (l$seller as Map<String, dynamic>)),
      condition: l$condition == null
          ? null
          : fromJson$Enum$ProductsProductConditionChoices(
              (l$condition as String)),
      discountPrice: (l$discountPrice as String),
      price: (l$price as num?)?.toDouble(),
      parcelSize: l$parcelSize == null
          ? null
          : fromJson$Enum$ProductsProductParcelSizeChoices(
              (l$parcelSize as String)),
      views: (l$views as int),
      likes: (l$likes as int),
      userLiked: (l$userLiked as bool?),
      imagesUrl:
          (l$imagesUrl as List<dynamic>).map((e) => (e as String)).toList(),
      createdAt: DateTime.parse((l$createdAt as String)),
      updatedAt: DateTime.parse((l$updatedAt as String)),
      color: (l$color as List<dynamic>).map((e) => (e as String)).toList(),
      style: l$style == null
          ? null
          : fromJson$Enum$ProductsProductStyleChoices((l$style as String)),
      materials: (l$materials as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$RecentlyViewedproducts$recentlyViewedProducts$materials
                  .fromJson((e as Map<String, dynamic>)))
          .toList(),
      customBrand: (l$customBrand as String?),
      brand: l$brand == null
          ? null
          : Query$RecentlyViewedproducts$recentlyViewedProducts$brand.fromJson(
              (l$brand as Map<String, dynamic>)),
      hashtags: (l$hashtags as String),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String name;

  final String description;

  final bool isFeatured;

  final Query$RecentlyViewedproducts$recentlyViewedProducts$category? category;

  final Query$RecentlyViewedproducts$recentlyViewedProducts$size? size;

  final Query$RecentlyViewedproducts$recentlyViewedProducts$seller? seller;

  final Enum$ProductsProductConditionChoices? condition;

  final String discountPrice;

  final double? price;

  final Enum$ProductsProductParcelSizeChoices? parcelSize;

  final int views;

  final int likes;

  final bool? userLiked;

  final List<String> imagesUrl;

  final DateTime createdAt;

  final DateTime updatedAt;

  final List<String> color;

  final Enum$ProductsProductStyleChoices? style;

  final List<Query$RecentlyViewedproducts$recentlyViewedProducts$materials?>?
      materials;

  final String? customBrand;

  final Query$RecentlyViewedproducts$recentlyViewedProducts$brand? brand;

  final String hashtags;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$description = description;
    _resultData['description'] = l$description;
    final l$isFeatured = isFeatured;
    _resultData['isFeatured'] = l$isFeatured;
    final l$category = category;
    _resultData['category'] = l$category?.toJson();
    final l$size = size;
    _resultData['size'] = l$size?.toJson();
    final l$seller = seller;
    _resultData['seller'] = l$seller?.toJson();
    final l$condition = condition;
    _resultData['condition'] = l$condition == null
        ? null
        : toJson$Enum$ProductsProductConditionChoices(l$condition);
    final l$discountPrice = discountPrice;
    _resultData['discountPrice'] = l$discountPrice;
    final l$price = price;
    _resultData['price'] = l$price;
    final l$parcelSize = parcelSize;
    _resultData['parcelSize'] = l$parcelSize == null
        ? null
        : toJson$Enum$ProductsProductParcelSizeChoices(l$parcelSize);
    final l$views = views;
    _resultData['views'] = l$views;
    final l$likes = likes;
    _resultData['likes'] = l$likes;
    final l$userLiked = userLiked;
    _resultData['userLiked'] = l$userLiked;
    final l$imagesUrl = imagesUrl;
    _resultData['imagesUrl'] = l$imagesUrl.map((e) => e).toList();
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt.toIso8601String();
    final l$color = color;
    _resultData['color'] = l$color.map((e) => e).toList();
    final l$style = style;
    _resultData['style'] = l$style == null
        ? null
        : toJson$Enum$ProductsProductStyleChoices(l$style);
    final l$materials = materials;
    _resultData['materials'] = l$materials?.map((e) => e?.toJson()).toList();
    final l$customBrand = customBrand;
    _resultData['customBrand'] = l$customBrand;
    final l$brand = brand;
    _resultData['brand'] = l$brand?.toJson();
    final l$hashtags = hashtags;
    _resultData['hashtags'] = l$hashtags;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$description = description;
    final l$isFeatured = isFeatured;
    final l$category = category;
    final l$size = size;
    final l$seller = seller;
    final l$condition = condition;
    final l$discountPrice = discountPrice;
    final l$price = price;
    final l$parcelSize = parcelSize;
    final l$views = views;
    final l$likes = likes;
    final l$userLiked = userLiked;
    final l$imagesUrl = imagesUrl;
    final l$createdAt = createdAt;
    final l$updatedAt = updatedAt;
    final l$color = color;
    final l$style = style;
    final l$materials = materials;
    final l$customBrand = customBrand;
    final l$brand = brand;
    final l$hashtags = hashtags;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$description,
      l$isFeatured,
      l$category,
      l$size,
      l$seller,
      l$condition,
      l$discountPrice,
      l$price,
      l$parcelSize,
      l$views,
      l$likes,
      l$userLiked,
      Object.hashAll(l$imagesUrl.map((v) => v)),
      l$createdAt,
      l$updatedAt,
      Object.hashAll(l$color.map((v) => v)),
      l$style,
      l$materials == null ? null : Object.hashAll(l$materials.map((v) => v)),
      l$customBrand,
      l$brand,
      l$hashtags,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$RecentlyViewedproducts$recentlyViewedProducts ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (l$description != lOther$description) {
      return false;
    }
    final l$isFeatured = isFeatured;
    final lOther$isFeatured = other.isFeatured;
    if (l$isFeatured != lOther$isFeatured) {
      return false;
    }
    final l$category = category;
    final lOther$category = other.category;
    if (l$category != lOther$category) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (l$size != lOther$size) {
      return false;
    }
    final l$seller = seller;
    final lOther$seller = other.seller;
    if (l$seller != lOther$seller) {
      return false;
    }
    final l$condition = condition;
    final lOther$condition = other.condition;
    if (l$condition != lOther$condition) {
      return false;
    }
    final l$discountPrice = discountPrice;
    final lOther$discountPrice = other.discountPrice;
    if (l$discountPrice != lOther$discountPrice) {
      return false;
    }
    final l$price = price;
    final lOther$price = other.price;
    if (l$price != lOther$price) {
      return false;
    }
    final l$parcelSize = parcelSize;
    final lOther$parcelSize = other.parcelSize;
    if (l$parcelSize != lOther$parcelSize) {
      return false;
    }
    final l$views = views;
    final lOther$views = other.views;
    if (l$views != lOther$views) {
      return false;
    }
    final l$likes = likes;
    final lOther$likes = other.likes;
    if (l$likes != lOther$likes) {
      return false;
    }
    final l$userLiked = userLiked;
    final lOther$userLiked = other.userLiked;
    if (l$userLiked != lOther$userLiked) {
      return false;
    }
    final l$imagesUrl = imagesUrl;
    final lOther$imagesUrl = other.imagesUrl;
    if (l$imagesUrl.length != lOther$imagesUrl.length) {
      return false;
    }
    for (int i = 0; i < l$imagesUrl.length; i++) {
      final l$imagesUrl$entry = l$imagesUrl[i];
      final lOther$imagesUrl$entry = lOther$imagesUrl[i];
      if (l$imagesUrl$entry != lOther$imagesUrl$entry) {
        return false;
      }
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$color = color;
    final lOther$color = other.color;
    if (l$color.length != lOther$color.length) {
      return false;
    }
    for (int i = 0; i < l$color.length; i++) {
      final l$color$entry = l$color[i];
      final lOther$color$entry = lOther$color[i];
      if (l$color$entry != lOther$color$entry) {
        return false;
      }
    }
    final l$style = style;
    final lOther$style = other.style;
    if (l$style != lOther$style) {
      return false;
    }
    final l$materials = materials;
    final lOther$materials = other.materials;
    if (l$materials != null && lOther$materials != null) {
      if (l$materials.length != lOther$materials.length) {
        return false;
      }
      for (int i = 0; i < l$materials.length; i++) {
        final l$materials$entry = l$materials[i];
        final lOther$materials$entry = lOther$materials[i];
        if (l$materials$entry != lOther$materials$entry) {
          return false;
        }
      }
    } else if (l$materials != lOther$materials) {
      return false;
    }
    final l$customBrand = customBrand;
    final lOther$customBrand = other.customBrand;
    if (l$customBrand != lOther$customBrand) {
      return false;
    }
    final l$brand = brand;
    final lOther$brand = other.brand;
    if (l$brand != lOther$brand) {
      return false;
    }
    final l$hashtags = hashtags;
    final lOther$hashtags = other.hashtags;
    if (l$hashtags != lOther$hashtags) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$RecentlyViewedproducts$recentlyViewedProducts
    on Query$RecentlyViewedproducts$recentlyViewedProducts {
  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts<
          Query$RecentlyViewedproducts$recentlyViewedProducts>
      get copyWith =>
          CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts<
    TRes> {
  factory CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts(
    Query$RecentlyViewedproducts$recentlyViewedProducts instance,
    TRes Function(Query$RecentlyViewedproducts$recentlyViewedProducts) then,
  ) = _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts;

  factory CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts.stub(
          TRes res) =
      _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts;

  TRes call({
    String? id,
    String? name,
    String? description,
    bool? isFeatured,
    Query$RecentlyViewedproducts$recentlyViewedProducts$category? category,
    Query$RecentlyViewedproducts$recentlyViewedProducts$size? size,
    Query$RecentlyViewedproducts$recentlyViewedProducts$seller? seller,
    Enum$ProductsProductConditionChoices? condition,
    String? discountPrice,
    double? price,
    Enum$ProductsProductParcelSizeChoices? parcelSize,
    int? views,
    int? likes,
    bool? userLiked,
    List<String>? imagesUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<String>? color,
    Enum$ProductsProductStyleChoices? style,
    List<Query$RecentlyViewedproducts$recentlyViewedProducts$materials?>?
        materials,
    String? customBrand,
    Query$RecentlyViewedproducts$recentlyViewedProducts$brand? brand,
    String? hashtags,
    String? $__typename,
  });
  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$category<TRes>
      get category;
  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$size<TRes>
      get size;
  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$seller<TRes>
      get seller;
  TRes materials(
      Iterable<Query$RecentlyViewedproducts$recentlyViewedProducts$materials?>? Function(
              Iterable<
                  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$materials<
                      Query$RecentlyViewedproducts$recentlyViewedProducts$materials>?>?)
          _fn);
  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$brand<TRes>
      get brand;
}

class _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts<TRes>
    implements
        CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts<TRes> {
  _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts(
    this._instance,
    this._then,
  );

  final Query$RecentlyViewedproducts$recentlyViewedProducts _instance;

  final TRes Function(Query$RecentlyViewedproducts$recentlyViewedProducts)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? description = _undefined,
    Object? isFeatured = _undefined,
    Object? category = _undefined,
    Object? size = _undefined,
    Object? seller = _undefined,
    Object? condition = _undefined,
    Object? discountPrice = _undefined,
    Object? price = _undefined,
    Object? parcelSize = _undefined,
    Object? views = _undefined,
    Object? likes = _undefined,
    Object? userLiked = _undefined,
    Object? imagesUrl = _undefined,
    Object? createdAt = _undefined,
    Object? updatedAt = _undefined,
    Object? color = _undefined,
    Object? style = _undefined,
    Object? materials = _undefined,
    Object? customBrand = _undefined,
    Object? brand = _undefined,
    Object? hashtags = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$RecentlyViewedproducts$recentlyViewedProducts(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        description: description == _undefined || description == null
            ? _instance.description
            : (description as String),
        isFeatured: isFeatured == _undefined || isFeatured == null
            ? _instance.isFeatured
            : (isFeatured as bool),
        category: category == _undefined
            ? _instance.category
            : (category
                as Query$RecentlyViewedproducts$recentlyViewedProducts$category?),
        size: size == _undefined
            ? _instance.size
            : (size
                as Query$RecentlyViewedproducts$recentlyViewedProducts$size?),
        seller: seller == _undefined
            ? _instance.seller
            : (seller
                as Query$RecentlyViewedproducts$recentlyViewedProducts$seller?),
        condition: condition == _undefined
            ? _instance.condition
            : (condition as Enum$ProductsProductConditionChoices?),
        discountPrice: discountPrice == _undefined || discountPrice == null
            ? _instance.discountPrice
            : (discountPrice as String),
        price: price == _undefined ? _instance.price : (price as double?),
        parcelSize: parcelSize == _undefined
            ? _instance.parcelSize
            : (parcelSize as Enum$ProductsProductParcelSizeChoices?),
        views: views == _undefined || views == null
            ? _instance.views
            : (views as int),
        likes: likes == _undefined || likes == null
            ? _instance.likes
            : (likes as int),
        userLiked: userLiked == _undefined
            ? _instance.userLiked
            : (userLiked as bool?),
        imagesUrl: imagesUrl == _undefined || imagesUrl == null
            ? _instance.imagesUrl
            : (imagesUrl as List<String>),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        updatedAt: updatedAt == _undefined || updatedAt == null
            ? _instance.updatedAt
            : (updatedAt as DateTime),
        color: color == _undefined || color == null
            ? _instance.color
            : (color as List<String>),
        style: style == _undefined
            ? _instance.style
            : (style as Enum$ProductsProductStyleChoices?),
        materials: materials == _undefined
            ? _instance.materials
            : (materials as List<
                Query$RecentlyViewedproducts$recentlyViewedProducts$materials?>?),
        customBrand: customBrand == _undefined
            ? _instance.customBrand
            : (customBrand as String?),
        brand: brand == _undefined
            ? _instance.brand
            : (brand
                as Query$RecentlyViewedproducts$recentlyViewedProducts$brand?),
        hashtags: hashtags == _undefined || hashtags == null
            ? _instance.hashtags
            : (hashtags as String),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$category<TRes>
      get category {
    final local$category = _instance.category;
    return local$category == null
        ? CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$category
            .stub(_then(_instance))
        : CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$category(
            local$category, (e) => call(category: e));
  }

  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$size<TRes>
      get size {
    final local$size = _instance.size;
    return local$size == null
        ? CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$size
            .stub(_then(_instance))
        : CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$size(
            local$size, (e) => call(size: e));
  }

  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$seller<TRes>
      get seller {
    final local$seller = _instance.seller;
    return local$seller == null
        ? CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$seller
            .stub(_then(_instance))
        : CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$seller(
            local$seller, (e) => call(seller: e));
  }

  TRes materials(
          Iterable<Query$RecentlyViewedproducts$recentlyViewedProducts$materials?>? Function(
                  Iterable<
                      CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$materials<
                          Query$RecentlyViewedproducts$recentlyViewedProducts$materials>?>?)
              _fn) =>
      call(
          materials: _fn(_instance.materials?.map((e) => e == null
              ? null
              : CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$materials(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$brand<TRes>
      get brand {
    final local$brand = _instance.brand;
    return local$brand == null
        ? CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$brand
            .stub(_then(_instance))
        : CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$brand(
            local$brand, (e) => call(brand: e));
  }
}

class _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts<
        TRes>
    implements
        CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts<TRes> {
  _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts(
      this._res);

  TRes _res;

  call({
    String? id,
    String? name,
    String? description,
    bool? isFeatured,
    Query$RecentlyViewedproducts$recentlyViewedProducts$category? category,
    Query$RecentlyViewedproducts$recentlyViewedProducts$size? size,
    Query$RecentlyViewedproducts$recentlyViewedProducts$seller? seller,
    Enum$ProductsProductConditionChoices? condition,
    String? discountPrice,
    double? price,
    Enum$ProductsProductParcelSizeChoices? parcelSize,
    int? views,
    int? likes,
    bool? userLiked,
    List<String>? imagesUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<String>? color,
    Enum$ProductsProductStyleChoices? style,
    List<Query$RecentlyViewedproducts$recentlyViewedProducts$materials?>?
        materials,
    String? customBrand,
    Query$RecentlyViewedproducts$recentlyViewedProducts$brand? brand,
    String? hashtags,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$category<TRes>
      get category =>
          CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$category
              .stub(_res);

  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$size<TRes>
      get size =>
          CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$size
              .stub(_res);

  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$seller<TRes>
      get seller =>
          CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$seller
              .stub(_res);

  materials(_fn) => _res;

  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$brand<TRes>
      get brand =>
          CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$brand
              .stub(_res);
}

class Query$RecentlyViewedproducts$recentlyViewedProducts$category {
  Query$RecentlyViewedproducts$recentlyViewedProducts$category({
    this.id,
    this.name,
    this.$__typename = 'CategoryType',
  });

  factory Query$RecentlyViewedproducts$recentlyViewedProducts$category.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$RecentlyViewedproducts$recentlyViewedProducts$category(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other
            is! Query$RecentlyViewedproducts$recentlyViewedProducts$category ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$RecentlyViewedproducts$recentlyViewedProducts$category
    on Query$RecentlyViewedproducts$recentlyViewedProducts$category {
  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$category<
          Query$RecentlyViewedproducts$recentlyViewedProducts$category>
      get copyWith =>
          CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$category(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$category<
    TRes> {
  factory CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$category(
    Query$RecentlyViewedproducts$recentlyViewedProducts$category instance,
    TRes Function(Query$RecentlyViewedproducts$recentlyViewedProducts$category)
        then,
  ) = _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$category;

  factory CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$category.stub(
          TRes res) =
      _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$category;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$category<
        TRes>
    implements
        CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$category<
            TRes> {
  _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$category(
    this._instance,
    this._then,
  );

  final Query$RecentlyViewedproducts$recentlyViewedProducts$category _instance;

  final TRes Function(
      Query$RecentlyViewedproducts$recentlyViewedProducts$category) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$RecentlyViewedproducts$recentlyViewedProducts$category(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$category<
        TRes>
    implements
        CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$category<
            TRes> {
  _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$category(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$RecentlyViewedproducts$recentlyViewedProducts$size {
  Query$RecentlyViewedproducts$recentlyViewedProducts$size({
    this.id,
    this.name,
    this.$__typename = 'SizeType',
  });

  factory Query$RecentlyViewedproducts$recentlyViewedProducts$size.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$RecentlyViewedproducts$recentlyViewedProducts$size(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$RecentlyViewedproducts$recentlyViewedProducts$size ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$RecentlyViewedproducts$recentlyViewedProducts$size
    on Query$RecentlyViewedproducts$recentlyViewedProducts$size {
  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$size<
          Query$RecentlyViewedproducts$recentlyViewedProducts$size>
      get copyWith =>
          CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$size(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$size<
    TRes> {
  factory CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$size(
    Query$RecentlyViewedproducts$recentlyViewedProducts$size instance,
    TRes Function(Query$RecentlyViewedproducts$recentlyViewedProducts$size)
        then,
  ) = _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$size;

  factory CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$size.stub(
          TRes res) =
      _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$size;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$size<
        TRes>
    implements
        CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$size<
            TRes> {
  _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$size(
    this._instance,
    this._then,
  );

  final Query$RecentlyViewedproducts$recentlyViewedProducts$size _instance;

  final TRes Function(Query$RecentlyViewedproducts$recentlyViewedProducts$size)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$RecentlyViewedproducts$recentlyViewedProducts$size(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$size<
        TRes>
    implements
        CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$size<
            TRes> {
  _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$size(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$RecentlyViewedproducts$recentlyViewedProducts$seller {
  Query$RecentlyViewedproducts$recentlyViewedProducts$seller({
    this.id,
    this.username,
    this.profilePictureUrl,
    this.$__typename = 'UserType',
  });

  factory Query$RecentlyViewedproducts$recentlyViewedProducts$seller.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$$__typename = json['__typename'];
    return Query$RecentlyViewedproducts$recentlyViewedProducts$seller(
      id: (l$id as int?),
      username: (l$username as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String? profilePictureUrl;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$profilePictureUrl = profilePictureUrl;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$profilePictureUrl,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$RecentlyViewedproducts$recentlyViewedProducts$seller ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$RecentlyViewedproducts$recentlyViewedProducts$seller
    on Query$RecentlyViewedproducts$recentlyViewedProducts$seller {
  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$seller<
          Query$RecentlyViewedproducts$recentlyViewedProducts$seller>
      get copyWith =>
          CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$seller(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$seller<
    TRes> {
  factory CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$seller(
    Query$RecentlyViewedproducts$recentlyViewedProducts$seller instance,
    TRes Function(Query$RecentlyViewedproducts$recentlyViewedProducts$seller)
        then,
  ) = _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$seller;

  factory CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$seller.stub(
          TRes res) =
      _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$seller;

  TRes call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$seller<
        TRes>
    implements
        CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$seller<
            TRes> {
  _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$seller(
    this._instance,
    this._then,
  );

  final Query$RecentlyViewedproducts$recentlyViewedProducts$seller _instance;

  final TRes Function(
      Query$RecentlyViewedproducts$recentlyViewedProducts$seller) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$RecentlyViewedproducts$recentlyViewedProducts$seller(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$seller<
        TRes>
    implements
        CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$seller<
            TRes> {
  _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$seller(
      this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? $__typename,
  }) =>
      _res;
}

class Query$RecentlyViewedproducts$recentlyViewedProducts$materials {
  Query$RecentlyViewedproducts$recentlyViewedProducts$materials({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$RecentlyViewedproducts$recentlyViewedProducts$materials.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$RecentlyViewedproducts$recentlyViewedProducts$materials(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other
            is! Query$RecentlyViewedproducts$recentlyViewedProducts$materials ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$RecentlyViewedproducts$recentlyViewedProducts$materials
    on Query$RecentlyViewedproducts$recentlyViewedProducts$materials {
  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$materials<
          Query$RecentlyViewedproducts$recentlyViewedProducts$materials>
      get copyWith =>
          CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$materials(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$materials<
    TRes> {
  factory CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$materials(
    Query$RecentlyViewedproducts$recentlyViewedProducts$materials instance,
    TRes Function(Query$RecentlyViewedproducts$recentlyViewedProducts$materials)
        then,
  ) = _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$materials;

  factory CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$materials.stub(
          TRes res) =
      _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$materials;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$materials<
        TRes>
    implements
        CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$materials<
            TRes> {
  _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$materials(
    this._instance,
    this._then,
  );

  final Query$RecentlyViewedproducts$recentlyViewedProducts$materials _instance;

  final TRes Function(
      Query$RecentlyViewedproducts$recentlyViewedProducts$materials) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$RecentlyViewedproducts$recentlyViewedProducts$materials(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$materials<
        TRes>
    implements
        CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$materials<
            TRes> {
  _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$materials(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$RecentlyViewedproducts$recentlyViewedProducts$brand {
  Query$RecentlyViewedproducts$recentlyViewedProducts$brand({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$RecentlyViewedproducts$recentlyViewedProducts$brand.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$RecentlyViewedproducts$recentlyViewedProducts$brand(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$RecentlyViewedproducts$recentlyViewedProducts$brand ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$RecentlyViewedproducts$recentlyViewedProducts$brand
    on Query$RecentlyViewedproducts$recentlyViewedProducts$brand {
  CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$brand<
          Query$RecentlyViewedproducts$recentlyViewedProducts$brand>
      get copyWith =>
          CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$brand(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$brand<
    TRes> {
  factory CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$brand(
    Query$RecentlyViewedproducts$recentlyViewedProducts$brand instance,
    TRes Function(Query$RecentlyViewedproducts$recentlyViewedProducts$brand)
        then,
  ) = _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$brand;

  factory CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$brand.stub(
          TRes res) =
      _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$brand;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$brand<
        TRes>
    implements
        CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$brand<
            TRes> {
  _CopyWithImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$brand(
    this._instance,
    this._then,
  );

  final Query$RecentlyViewedproducts$recentlyViewedProducts$brand _instance;

  final TRes Function(Query$RecentlyViewedproducts$recentlyViewedProducts$brand)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$RecentlyViewedproducts$recentlyViewedProducts$brand(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$brand<
        TRes>
    implements
        CopyWith$Query$RecentlyViewedproducts$recentlyViewedProducts$brand<
            TRes> {
  _CopyWithStubImpl$Query$RecentlyViewedproducts$recentlyViewedProducts$brand(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$UserProducts {
  factory Variables$Query$UserProducts({
    String? search,
    String? username,
    int? pageCount,
    int? pageNumber,
    Input$ProductFiltersInput? filters,
    Enum$SortEnum? sort,
  }) =>
      Variables$Query$UserProducts._({
        if (search != null) r'search': search,
        if (username != null) r'username': username,
        if (pageCount != null) r'pageCount': pageCount,
        if (pageNumber != null) r'pageNumber': pageNumber,
        if (filters != null) r'filters': filters,
        if (sort != null) r'sort': sort,
      });

  Variables$Query$UserProducts._(this._$data);

  factory Variables$Query$UserProducts.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('search')) {
      final l$search = data['search'];
      result$data['search'] = (l$search as String?);
    }
    if (data.containsKey('username')) {
      final l$username = data['username'];
      result$data['username'] = (l$username as String?);
    }
    if (data.containsKey('pageCount')) {
      final l$pageCount = data['pageCount'];
      result$data['pageCount'] = (l$pageCount as int?);
    }
    if (data.containsKey('pageNumber')) {
      final l$pageNumber = data['pageNumber'];
      result$data['pageNumber'] = (l$pageNumber as int?);
    }
    if (data.containsKey('filters')) {
      final l$filters = data['filters'];
      result$data['filters'] = l$filters == null
          ? null
          : Input$ProductFiltersInput.fromJson(
              (l$filters as Map<String, dynamic>));
    }
    if (data.containsKey('sort')) {
      final l$sort = data['sort'];
      result$data['sort'] =
          l$sort == null ? null : fromJson$Enum$SortEnum((l$sort as String));
    }
    return Variables$Query$UserProducts._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get search => (_$data['search'] as String?);

  String? get username => (_$data['username'] as String?);

  int? get pageCount => (_$data['pageCount'] as int?);

  int? get pageNumber => (_$data['pageNumber'] as int?);

  Input$ProductFiltersInput? get filters =>
      (_$data['filters'] as Input$ProductFiltersInput?);

  Enum$SortEnum? get sort => (_$data['sort'] as Enum$SortEnum?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('search')) {
      final l$search = search;
      result$data['search'] = l$search;
    }
    if (_$data.containsKey('username')) {
      final l$username = username;
      result$data['username'] = l$username;
    }
    if (_$data.containsKey('pageCount')) {
      final l$pageCount = pageCount;
      result$data['pageCount'] = l$pageCount;
    }
    if (_$data.containsKey('pageNumber')) {
      final l$pageNumber = pageNumber;
      result$data['pageNumber'] = l$pageNumber;
    }
    if (_$data.containsKey('filters')) {
      final l$filters = filters;
      result$data['filters'] = l$filters?.toJson();
    }
    if (_$data.containsKey('sort')) {
      final l$sort = sort;
      result$data['sort'] =
          l$sort == null ? null : toJson$Enum$SortEnum(l$sort);
    }
    return result$data;
  }

  CopyWith$Variables$Query$UserProducts<Variables$Query$UserProducts>
      get copyWith => CopyWith$Variables$Query$UserProducts(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$UserProducts ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$search = search;
    final lOther$search = other.search;
    if (_$data.containsKey('search') != other._$data.containsKey('search')) {
      return false;
    }
    if (l$search != lOther$search) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (_$data.containsKey('username') !=
        other._$data.containsKey('username')) {
      return false;
    }
    if (l$username != lOther$username) {
      return false;
    }
    final l$pageCount = pageCount;
    final lOther$pageCount = other.pageCount;
    if (_$data.containsKey('pageCount') !=
        other._$data.containsKey('pageCount')) {
      return false;
    }
    if (l$pageCount != lOther$pageCount) {
      return false;
    }
    final l$pageNumber = pageNumber;
    final lOther$pageNumber = other.pageNumber;
    if (_$data.containsKey('pageNumber') !=
        other._$data.containsKey('pageNumber')) {
      return false;
    }
    if (l$pageNumber != lOther$pageNumber) {
      return false;
    }
    final l$filters = filters;
    final lOther$filters = other.filters;
    if (_$data.containsKey('filters') != other._$data.containsKey('filters')) {
      return false;
    }
    if (l$filters != lOther$filters) {
      return false;
    }
    final l$sort = sort;
    final lOther$sort = other.sort;
    if (_$data.containsKey('sort') != other._$data.containsKey('sort')) {
      return false;
    }
    if (l$sort != lOther$sort) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$search = search;
    final l$username = username;
    final l$pageCount = pageCount;
    final l$pageNumber = pageNumber;
    final l$filters = filters;
    final l$sort = sort;
    return Object.hashAll([
      _$data.containsKey('search') ? l$search : const {},
      _$data.containsKey('username') ? l$username : const {},
      _$data.containsKey('pageCount') ? l$pageCount : const {},
      _$data.containsKey('pageNumber') ? l$pageNumber : const {},
      _$data.containsKey('filters') ? l$filters : const {},
      _$data.containsKey('sort') ? l$sort : const {},
    ]);
  }
}

abstract class CopyWith$Variables$Query$UserProducts<TRes> {
  factory CopyWith$Variables$Query$UserProducts(
    Variables$Query$UserProducts instance,
    TRes Function(Variables$Query$UserProducts) then,
  ) = _CopyWithImpl$Variables$Query$UserProducts;

  factory CopyWith$Variables$Query$UserProducts.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$UserProducts;

  TRes call({
    String? search,
    String? username,
    int? pageCount,
    int? pageNumber,
    Input$ProductFiltersInput? filters,
    Enum$SortEnum? sort,
  });
}

class _CopyWithImpl$Variables$Query$UserProducts<TRes>
    implements CopyWith$Variables$Query$UserProducts<TRes> {
  _CopyWithImpl$Variables$Query$UserProducts(
    this._instance,
    this._then,
  );

  final Variables$Query$UserProducts _instance;

  final TRes Function(Variables$Query$UserProducts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? search = _undefined,
    Object? username = _undefined,
    Object? pageCount = _undefined,
    Object? pageNumber = _undefined,
    Object? filters = _undefined,
    Object? sort = _undefined,
  }) =>
      _then(Variables$Query$UserProducts._({
        ..._instance._$data,
        if (search != _undefined) 'search': (search as String?),
        if (username != _undefined) 'username': (username as String?),
        if (pageCount != _undefined) 'pageCount': (pageCount as int?),
        if (pageNumber != _undefined) 'pageNumber': (pageNumber as int?),
        if (filters != _undefined)
          'filters': (filters as Input$ProductFiltersInput?),
        if (sort != _undefined) 'sort': (sort as Enum$SortEnum?),
      }));
}

class _CopyWithStubImpl$Variables$Query$UserProducts<TRes>
    implements CopyWith$Variables$Query$UserProducts<TRes> {
  _CopyWithStubImpl$Variables$Query$UserProducts(this._res);

  TRes _res;

  call({
    String? search,
    String? username,
    int? pageCount,
    int? pageNumber,
    Input$ProductFiltersInput? filters,
    Enum$SortEnum? sort,
  }) =>
      _res;
}

class Query$UserProducts {
  Query$UserProducts({
    this.userProducts,
    this.$__typename = 'Query',
  });

  factory Query$UserProducts.fromJson(Map<String, dynamic> json) {
    final l$userProducts = json['userProducts'];
    final l$$__typename = json['__typename'];
    return Query$UserProducts(
      userProducts: (l$userProducts as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$UserProducts$userProducts.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$UserProducts$userProducts?>? userProducts;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userProducts = userProducts;
    _resultData['userProducts'] =
        l$userProducts?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userProducts = userProducts;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userProducts == null
          ? null
          : Object.hashAll(l$userProducts.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserProducts || runtimeType != other.runtimeType) {
      return false;
    }
    final l$userProducts = userProducts;
    final lOther$userProducts = other.userProducts;
    if (l$userProducts != null && lOther$userProducts != null) {
      if (l$userProducts.length != lOther$userProducts.length) {
        return false;
      }
      for (int i = 0; i < l$userProducts.length; i++) {
        final l$userProducts$entry = l$userProducts[i];
        final lOther$userProducts$entry = lOther$userProducts[i];
        if (l$userProducts$entry != lOther$userProducts$entry) {
          return false;
        }
      }
    } else if (l$userProducts != lOther$userProducts) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserProducts on Query$UserProducts {
  CopyWith$Query$UserProducts<Query$UserProducts> get copyWith =>
      CopyWith$Query$UserProducts(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$UserProducts<TRes> {
  factory CopyWith$Query$UserProducts(
    Query$UserProducts instance,
    TRes Function(Query$UserProducts) then,
  ) = _CopyWithImpl$Query$UserProducts;

  factory CopyWith$Query$UserProducts.stub(TRes res) =
      _CopyWithStubImpl$Query$UserProducts;

  TRes call({
    List<Query$UserProducts$userProducts?>? userProducts,
    String? $__typename,
  });
  TRes userProducts(
      Iterable<Query$UserProducts$userProducts?>? Function(
              Iterable<
                  CopyWith$Query$UserProducts$userProducts<
                      Query$UserProducts$userProducts>?>?)
          _fn);
}

class _CopyWithImpl$Query$UserProducts<TRes>
    implements CopyWith$Query$UserProducts<TRes> {
  _CopyWithImpl$Query$UserProducts(
    this._instance,
    this._then,
  );

  final Query$UserProducts _instance;

  final TRes Function(Query$UserProducts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userProducts = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserProducts(
        userProducts: userProducts == _undefined
            ? _instance.userProducts
            : (userProducts as List<Query$UserProducts$userProducts?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes userProducts(
          Iterable<Query$UserProducts$userProducts?>? Function(
                  Iterable<
                      CopyWith$Query$UserProducts$userProducts<
                          Query$UserProducts$userProducts>?>?)
              _fn) =>
      call(
          userProducts: _fn(_instance.userProducts?.map((e) => e == null
              ? null
              : CopyWith$Query$UserProducts$userProducts(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$UserProducts<TRes>
    implements CopyWith$Query$UserProducts<TRes> {
  _CopyWithStubImpl$Query$UserProducts(this._res);

  TRes _res;

  call({
    List<Query$UserProducts$userProducts?>? userProducts,
    String? $__typename,
  }) =>
      _res;

  userProducts(_fn) => _res;
}

const documentNodeQueryUserProducts = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'UserProducts'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'search')),
        type: NamedTypeNode(
          name: NameNode(value: 'String'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'username')),
        type: NamedTypeNode(
          name: NameNode(value: 'String'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageCount')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageNumber')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'filters')),
        type: NamedTypeNode(
          name: NameNode(value: 'ProductFiltersInput'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'sort')),
        type: NamedTypeNode(
          name: NameNode(value: 'SortEnum'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'userProducts'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'search'),
            value: VariableNode(name: NameNode(value: 'search')),
          ),
          ArgumentNode(
            name: NameNode(value: 'username'),
            value: VariableNode(name: NameNode(value: 'username')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageCount'),
            value: VariableNode(name: NameNode(value: 'pageCount')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageNumber'),
            value: VariableNode(name: NameNode(value: 'pageNumber')),
          ),
          ArgumentNode(
            name: NameNode(value: 'filters'),
            value: VariableNode(name: NameNode(value: 'filters')),
          ),
          ArgumentNode(
            name: NameNode(value: 'sort'),
            value: VariableNode(name: NameNode(value: 'sort')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isFeatured'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'category'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'size'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'seller'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'condition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'discountPrice'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'condition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'price'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'parcelSize'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'views'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'likes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'userLiked'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'imagesUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'color'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'style'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'materials'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'customBrand'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'brand'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$UserProducts _parserFn$Query$UserProducts(Map<String, dynamic> data) =>
    Query$UserProducts.fromJson(data);
typedef OnQueryComplete$Query$UserProducts = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$UserProducts?,
);

class Options$Query$UserProducts
    extends graphql.QueryOptions<Query$UserProducts> {
  Options$Query$UserProducts({
    String? operationName,
    Variables$Query$UserProducts? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$UserProducts? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$UserProducts? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$UserProducts(data),
                  ),
          onError: onError,
          document: documentNodeQueryUserProducts,
          parserFn: _parserFn$Query$UserProducts,
        );

  final OnQueryComplete$Query$UserProducts? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$UserProducts
    extends graphql.WatchQueryOptions<Query$UserProducts> {
  WatchOptions$Query$UserProducts({
    String? operationName,
    Variables$Query$UserProducts? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$UserProducts? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryUserProducts,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$UserProducts,
        );
}

class FetchMoreOptions$Query$UserProducts extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$UserProducts({
    required graphql.UpdateQuery updateQuery,
    Variables$Query$UserProducts? variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables?.toJson() ?? {},
          document: documentNodeQueryUserProducts,
        );
}

extension ClientExtension$Query$UserProducts on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$UserProducts>> query$UserProducts(
          [Options$Query$UserProducts? options]) async =>
      await this.query(options ?? Options$Query$UserProducts());
  graphql.ObservableQuery<Query$UserProducts> watchQuery$UserProducts(
          [WatchOptions$Query$UserProducts? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$UserProducts());
  void writeQuery$UserProducts({
    required Query$UserProducts data,
    Variables$Query$UserProducts? variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation: graphql.Operation(document: documentNodeQueryUserProducts),
          variables: variables?.toJson() ?? const {},
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$UserProducts? readQuery$UserProducts({
    Variables$Query$UserProducts? variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQueryUserProducts),
        variables: variables?.toJson() ?? const {},
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$UserProducts.fromJson(result);
  }
}

class Query$UserProducts$userProducts {
  Query$UserProducts$userProducts({
    required this.id,
    required this.name,
    required this.description,
    required this.isFeatured,
    this.category,
    this.size,
    this.seller,
    this.condition,
    required this.discountPrice,
    this.price,
    this.parcelSize,
    required this.views,
    required this.likes,
    this.userLiked,
    required this.imagesUrl,
    required this.createdAt,
    required this.updatedAt,
    required this.color,
    this.style,
    this.materials,
    this.customBrand,
    this.brand,
    this.$__typename = 'ProductType',
  });

  factory Query$UserProducts$userProducts.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$description = json['description'];
    final l$isFeatured = json['isFeatured'];
    final l$category = json['category'];
    final l$size = json['size'];
    final l$seller = json['seller'];
    final l$condition = json['condition'];
    final l$discountPrice = json['discountPrice'];
    final l$price = json['price'];
    final l$parcelSize = json['parcelSize'];
    final l$views = json['views'];
    final l$likes = json['likes'];
    final l$userLiked = json['userLiked'];
    final l$imagesUrl = json['imagesUrl'];
    final l$createdAt = json['createdAt'];
    final l$updatedAt = json['updatedAt'];
    final l$color = json['color'];
    final l$style = json['style'];
    final l$materials = json['materials'];
    final l$customBrand = json['customBrand'];
    final l$brand = json['brand'];
    final l$$__typename = json['__typename'];
    return Query$UserProducts$userProducts(
      id: (l$id as String),
      name: (l$name as String),
      description: (l$description as String),
      isFeatured: (l$isFeatured as bool),
      category: l$category == null
          ? null
          : Query$UserProducts$userProducts$category.fromJson(
              (l$category as Map<String, dynamic>)),
      size: l$size == null
          ? null
          : Query$UserProducts$userProducts$size.fromJson(
              (l$size as Map<String, dynamic>)),
      seller: l$seller == null
          ? null
          : Query$UserProducts$userProducts$seller.fromJson(
              (l$seller as Map<String, dynamic>)),
      condition: l$condition == null
          ? null
          : fromJson$Enum$ProductsProductConditionChoices(
              (l$condition as String)),
      discountPrice: (l$discountPrice as String),
      price: (l$price as num?)?.toDouble(),
      parcelSize: l$parcelSize == null
          ? null
          : fromJson$Enum$ProductsProductParcelSizeChoices(
              (l$parcelSize as String)),
      views: (l$views as int),
      likes: (l$likes as int),
      userLiked: (l$userLiked as bool?),
      imagesUrl:
          (l$imagesUrl as List<dynamic>).map((e) => (e as String)).toList(),
      createdAt: DateTime.parse((l$createdAt as String)),
      updatedAt: DateTime.parse((l$updatedAt as String)),
      color: (l$color as List<dynamic>).map((e) => (e as String)).toList(),
      style: l$style == null
          ? null
          : fromJson$Enum$ProductsProductStyleChoices((l$style as String)),
      materials: (l$materials as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$UserProducts$userProducts$materials.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      customBrand: (l$customBrand as String?),
      brand: l$brand == null
          ? null
          : Query$UserProducts$userProducts$brand.fromJson(
              (l$brand as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String name;

  final String description;

  final bool isFeatured;

  final Query$UserProducts$userProducts$category? category;

  final Query$UserProducts$userProducts$size? size;

  final Query$UserProducts$userProducts$seller? seller;

  final Enum$ProductsProductConditionChoices? condition;

  final String discountPrice;

  final double? price;

  final Enum$ProductsProductParcelSizeChoices? parcelSize;

  final int views;

  final int likes;

  final bool? userLiked;

  final List<String> imagesUrl;

  final DateTime createdAt;

  final DateTime updatedAt;

  final List<String> color;

  final Enum$ProductsProductStyleChoices? style;

  final List<Query$UserProducts$userProducts$materials?>? materials;

  final String? customBrand;

  final Query$UserProducts$userProducts$brand? brand;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$description = description;
    _resultData['description'] = l$description;
    final l$isFeatured = isFeatured;
    _resultData['isFeatured'] = l$isFeatured;
    final l$category = category;
    _resultData['category'] = l$category?.toJson();
    final l$size = size;
    _resultData['size'] = l$size?.toJson();
    final l$seller = seller;
    _resultData['seller'] = l$seller?.toJson();
    final l$condition = condition;
    _resultData['condition'] = l$condition == null
        ? null
        : toJson$Enum$ProductsProductConditionChoices(l$condition);
    final l$discountPrice = discountPrice;
    _resultData['discountPrice'] = l$discountPrice;
    final l$price = price;
    _resultData['price'] = l$price;
    final l$parcelSize = parcelSize;
    _resultData['parcelSize'] = l$parcelSize == null
        ? null
        : toJson$Enum$ProductsProductParcelSizeChoices(l$parcelSize);
    final l$views = views;
    _resultData['views'] = l$views;
    final l$likes = likes;
    _resultData['likes'] = l$likes;
    final l$userLiked = userLiked;
    _resultData['userLiked'] = l$userLiked;
    final l$imagesUrl = imagesUrl;
    _resultData['imagesUrl'] = l$imagesUrl.map((e) => e).toList();
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt.toIso8601String();
    final l$color = color;
    _resultData['color'] = l$color.map((e) => e).toList();
    final l$style = style;
    _resultData['style'] = l$style == null
        ? null
        : toJson$Enum$ProductsProductStyleChoices(l$style);
    final l$materials = materials;
    _resultData['materials'] = l$materials?.map((e) => e?.toJson()).toList();
    final l$customBrand = customBrand;
    _resultData['customBrand'] = l$customBrand;
    final l$brand = brand;
    _resultData['brand'] = l$brand?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$description = description;
    final l$isFeatured = isFeatured;
    final l$category = category;
    final l$size = size;
    final l$seller = seller;
    final l$condition = condition;
    final l$discountPrice = discountPrice;
    final l$price = price;
    final l$parcelSize = parcelSize;
    final l$views = views;
    final l$likes = likes;
    final l$userLiked = userLiked;
    final l$imagesUrl = imagesUrl;
    final l$createdAt = createdAt;
    final l$updatedAt = updatedAt;
    final l$color = color;
    final l$style = style;
    final l$materials = materials;
    final l$customBrand = customBrand;
    final l$brand = brand;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$description,
      l$isFeatured,
      l$category,
      l$size,
      l$seller,
      l$condition,
      l$discountPrice,
      l$price,
      l$parcelSize,
      l$views,
      l$likes,
      l$userLiked,
      Object.hashAll(l$imagesUrl.map((v) => v)),
      l$createdAt,
      l$updatedAt,
      Object.hashAll(l$color.map((v) => v)),
      l$style,
      l$materials == null ? null : Object.hashAll(l$materials.map((v) => v)),
      l$customBrand,
      l$brand,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserProducts$userProducts ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (l$description != lOther$description) {
      return false;
    }
    final l$isFeatured = isFeatured;
    final lOther$isFeatured = other.isFeatured;
    if (l$isFeatured != lOther$isFeatured) {
      return false;
    }
    final l$category = category;
    final lOther$category = other.category;
    if (l$category != lOther$category) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (l$size != lOther$size) {
      return false;
    }
    final l$seller = seller;
    final lOther$seller = other.seller;
    if (l$seller != lOther$seller) {
      return false;
    }
    final l$condition = condition;
    final lOther$condition = other.condition;
    if (l$condition != lOther$condition) {
      return false;
    }
    final l$discountPrice = discountPrice;
    final lOther$discountPrice = other.discountPrice;
    if (l$discountPrice != lOther$discountPrice) {
      return false;
    }
    final l$price = price;
    final lOther$price = other.price;
    if (l$price != lOther$price) {
      return false;
    }
    final l$parcelSize = parcelSize;
    final lOther$parcelSize = other.parcelSize;
    if (l$parcelSize != lOther$parcelSize) {
      return false;
    }
    final l$views = views;
    final lOther$views = other.views;
    if (l$views != lOther$views) {
      return false;
    }
    final l$likes = likes;
    final lOther$likes = other.likes;
    if (l$likes != lOther$likes) {
      return false;
    }
    final l$userLiked = userLiked;
    final lOther$userLiked = other.userLiked;
    if (l$userLiked != lOther$userLiked) {
      return false;
    }
    final l$imagesUrl = imagesUrl;
    final lOther$imagesUrl = other.imagesUrl;
    if (l$imagesUrl.length != lOther$imagesUrl.length) {
      return false;
    }
    for (int i = 0; i < l$imagesUrl.length; i++) {
      final l$imagesUrl$entry = l$imagesUrl[i];
      final lOther$imagesUrl$entry = lOther$imagesUrl[i];
      if (l$imagesUrl$entry != lOther$imagesUrl$entry) {
        return false;
      }
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$color = color;
    final lOther$color = other.color;
    if (l$color.length != lOther$color.length) {
      return false;
    }
    for (int i = 0; i < l$color.length; i++) {
      final l$color$entry = l$color[i];
      final lOther$color$entry = lOther$color[i];
      if (l$color$entry != lOther$color$entry) {
        return false;
      }
    }
    final l$style = style;
    final lOther$style = other.style;
    if (l$style != lOther$style) {
      return false;
    }
    final l$materials = materials;
    final lOther$materials = other.materials;
    if (l$materials != null && lOther$materials != null) {
      if (l$materials.length != lOther$materials.length) {
        return false;
      }
      for (int i = 0; i < l$materials.length; i++) {
        final l$materials$entry = l$materials[i];
        final lOther$materials$entry = lOther$materials[i];
        if (l$materials$entry != lOther$materials$entry) {
          return false;
        }
      }
    } else if (l$materials != lOther$materials) {
      return false;
    }
    final l$customBrand = customBrand;
    final lOther$customBrand = other.customBrand;
    if (l$customBrand != lOther$customBrand) {
      return false;
    }
    final l$brand = brand;
    final lOther$brand = other.brand;
    if (l$brand != lOther$brand) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserProducts$userProducts
    on Query$UserProducts$userProducts {
  CopyWith$Query$UserProducts$userProducts<Query$UserProducts$userProducts>
      get copyWith => CopyWith$Query$UserProducts$userProducts(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserProducts$userProducts<TRes> {
  factory CopyWith$Query$UserProducts$userProducts(
    Query$UserProducts$userProducts instance,
    TRes Function(Query$UserProducts$userProducts) then,
  ) = _CopyWithImpl$Query$UserProducts$userProducts;

  factory CopyWith$Query$UserProducts$userProducts.stub(TRes res) =
      _CopyWithStubImpl$Query$UserProducts$userProducts;

  TRes call({
    String? id,
    String? name,
    String? description,
    bool? isFeatured,
    Query$UserProducts$userProducts$category? category,
    Query$UserProducts$userProducts$size? size,
    Query$UserProducts$userProducts$seller? seller,
    Enum$ProductsProductConditionChoices? condition,
    String? discountPrice,
    double? price,
    Enum$ProductsProductParcelSizeChoices? parcelSize,
    int? views,
    int? likes,
    bool? userLiked,
    List<String>? imagesUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<String>? color,
    Enum$ProductsProductStyleChoices? style,
    List<Query$UserProducts$userProducts$materials?>? materials,
    String? customBrand,
    Query$UserProducts$userProducts$brand? brand,
    String? $__typename,
  });
  CopyWith$Query$UserProducts$userProducts$category<TRes> get category;
  CopyWith$Query$UserProducts$userProducts$size<TRes> get size;
  CopyWith$Query$UserProducts$userProducts$seller<TRes> get seller;
  TRes materials(
      Iterable<Query$UserProducts$userProducts$materials?>? Function(
              Iterable<
                  CopyWith$Query$UserProducts$userProducts$materials<
                      Query$UserProducts$userProducts$materials>?>?)
          _fn);
  CopyWith$Query$UserProducts$userProducts$brand<TRes> get brand;
}

class _CopyWithImpl$Query$UserProducts$userProducts<TRes>
    implements CopyWith$Query$UserProducts$userProducts<TRes> {
  _CopyWithImpl$Query$UserProducts$userProducts(
    this._instance,
    this._then,
  );

  final Query$UserProducts$userProducts _instance;

  final TRes Function(Query$UserProducts$userProducts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? description = _undefined,
    Object? isFeatured = _undefined,
    Object? category = _undefined,
    Object? size = _undefined,
    Object? seller = _undefined,
    Object? condition = _undefined,
    Object? discountPrice = _undefined,
    Object? price = _undefined,
    Object? parcelSize = _undefined,
    Object? views = _undefined,
    Object? likes = _undefined,
    Object? userLiked = _undefined,
    Object? imagesUrl = _undefined,
    Object? createdAt = _undefined,
    Object? updatedAt = _undefined,
    Object? color = _undefined,
    Object? style = _undefined,
    Object? materials = _undefined,
    Object? customBrand = _undefined,
    Object? brand = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserProducts$userProducts(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        description: description == _undefined || description == null
            ? _instance.description
            : (description as String),
        isFeatured: isFeatured == _undefined || isFeatured == null
            ? _instance.isFeatured
            : (isFeatured as bool),
        category: category == _undefined
            ? _instance.category
            : (category as Query$UserProducts$userProducts$category?),
        size: size == _undefined
            ? _instance.size
            : (size as Query$UserProducts$userProducts$size?),
        seller: seller == _undefined
            ? _instance.seller
            : (seller as Query$UserProducts$userProducts$seller?),
        condition: condition == _undefined
            ? _instance.condition
            : (condition as Enum$ProductsProductConditionChoices?),
        discountPrice: discountPrice == _undefined || discountPrice == null
            ? _instance.discountPrice
            : (discountPrice as String),
        price: price == _undefined ? _instance.price : (price as double?),
        parcelSize: parcelSize == _undefined
            ? _instance.parcelSize
            : (parcelSize as Enum$ProductsProductParcelSizeChoices?),
        views: views == _undefined || views == null
            ? _instance.views
            : (views as int),
        likes: likes == _undefined || likes == null
            ? _instance.likes
            : (likes as int),
        userLiked: userLiked == _undefined
            ? _instance.userLiked
            : (userLiked as bool?),
        imagesUrl: imagesUrl == _undefined || imagesUrl == null
            ? _instance.imagesUrl
            : (imagesUrl as List<String>),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        updatedAt: updatedAt == _undefined || updatedAt == null
            ? _instance.updatedAt
            : (updatedAt as DateTime),
        color: color == _undefined || color == null
            ? _instance.color
            : (color as List<String>),
        style: style == _undefined
            ? _instance.style
            : (style as Enum$ProductsProductStyleChoices?),
        materials: materials == _undefined
            ? _instance.materials
            : (materials as List<Query$UserProducts$userProducts$materials?>?),
        customBrand: customBrand == _undefined
            ? _instance.customBrand
            : (customBrand as String?),
        brand: brand == _undefined
            ? _instance.brand
            : (brand as Query$UserProducts$userProducts$brand?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$UserProducts$userProducts$category<TRes> get category {
    final local$category = _instance.category;
    return local$category == null
        ? CopyWith$Query$UserProducts$userProducts$category.stub(
            _then(_instance))
        : CopyWith$Query$UserProducts$userProducts$category(
            local$category, (e) => call(category: e));
  }

  CopyWith$Query$UserProducts$userProducts$size<TRes> get size {
    final local$size = _instance.size;
    return local$size == null
        ? CopyWith$Query$UserProducts$userProducts$size.stub(_then(_instance))
        : CopyWith$Query$UserProducts$userProducts$size(
            local$size, (e) => call(size: e));
  }

  CopyWith$Query$UserProducts$userProducts$seller<TRes> get seller {
    final local$seller = _instance.seller;
    return local$seller == null
        ? CopyWith$Query$UserProducts$userProducts$seller.stub(_then(_instance))
        : CopyWith$Query$UserProducts$userProducts$seller(
            local$seller, (e) => call(seller: e));
  }

  TRes materials(
          Iterable<Query$UserProducts$userProducts$materials?>? Function(
                  Iterable<
                      CopyWith$Query$UserProducts$userProducts$materials<
                          Query$UserProducts$userProducts$materials>?>?)
              _fn) =>
      call(
          materials: _fn(_instance.materials?.map((e) => e == null
              ? null
              : CopyWith$Query$UserProducts$userProducts$materials(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Query$UserProducts$userProducts$brand<TRes> get brand {
    final local$brand = _instance.brand;
    return local$brand == null
        ? CopyWith$Query$UserProducts$userProducts$brand.stub(_then(_instance))
        : CopyWith$Query$UserProducts$userProducts$brand(
            local$brand, (e) => call(brand: e));
  }
}

class _CopyWithStubImpl$Query$UserProducts$userProducts<TRes>
    implements CopyWith$Query$UserProducts$userProducts<TRes> {
  _CopyWithStubImpl$Query$UserProducts$userProducts(this._res);

  TRes _res;

  call({
    String? id,
    String? name,
    String? description,
    bool? isFeatured,
    Query$UserProducts$userProducts$category? category,
    Query$UserProducts$userProducts$size? size,
    Query$UserProducts$userProducts$seller? seller,
    Enum$ProductsProductConditionChoices? condition,
    String? discountPrice,
    double? price,
    Enum$ProductsProductParcelSizeChoices? parcelSize,
    int? views,
    int? likes,
    bool? userLiked,
    List<String>? imagesUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<String>? color,
    Enum$ProductsProductStyleChoices? style,
    List<Query$UserProducts$userProducts$materials?>? materials,
    String? customBrand,
    Query$UserProducts$userProducts$brand? brand,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$UserProducts$userProducts$category<TRes> get category =>
      CopyWith$Query$UserProducts$userProducts$category.stub(_res);

  CopyWith$Query$UserProducts$userProducts$size<TRes> get size =>
      CopyWith$Query$UserProducts$userProducts$size.stub(_res);

  CopyWith$Query$UserProducts$userProducts$seller<TRes> get seller =>
      CopyWith$Query$UserProducts$userProducts$seller.stub(_res);

  materials(_fn) => _res;

  CopyWith$Query$UserProducts$userProducts$brand<TRes> get brand =>
      CopyWith$Query$UserProducts$userProducts$brand.stub(_res);
}

class Query$UserProducts$userProducts$category {
  Query$UserProducts$userProducts$category({
    this.id,
    this.name,
    this.$__typename = 'CategoryType',
  });

  factory Query$UserProducts$userProducts$category.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$UserProducts$userProducts$category(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserProducts$userProducts$category ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserProducts$userProducts$category
    on Query$UserProducts$userProducts$category {
  CopyWith$Query$UserProducts$userProducts$category<
          Query$UserProducts$userProducts$category>
      get copyWith => CopyWith$Query$UserProducts$userProducts$category(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserProducts$userProducts$category<TRes> {
  factory CopyWith$Query$UserProducts$userProducts$category(
    Query$UserProducts$userProducts$category instance,
    TRes Function(Query$UserProducts$userProducts$category) then,
  ) = _CopyWithImpl$Query$UserProducts$userProducts$category;

  factory CopyWith$Query$UserProducts$userProducts$category.stub(TRes res) =
      _CopyWithStubImpl$Query$UserProducts$userProducts$category;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$UserProducts$userProducts$category<TRes>
    implements CopyWith$Query$UserProducts$userProducts$category<TRes> {
  _CopyWithImpl$Query$UserProducts$userProducts$category(
    this._instance,
    this._then,
  );

  final Query$UserProducts$userProducts$category _instance;

  final TRes Function(Query$UserProducts$userProducts$category) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserProducts$userProducts$category(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$UserProducts$userProducts$category<TRes>
    implements CopyWith$Query$UserProducts$userProducts$category<TRes> {
  _CopyWithStubImpl$Query$UserProducts$userProducts$category(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$UserProducts$userProducts$size {
  Query$UserProducts$userProducts$size({
    this.id,
    this.name,
    this.$__typename = 'SizeType',
  });

  factory Query$UserProducts$userProducts$size.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$UserProducts$userProducts$size(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserProducts$userProducts$size ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserProducts$userProducts$size
    on Query$UserProducts$userProducts$size {
  CopyWith$Query$UserProducts$userProducts$size<
          Query$UserProducts$userProducts$size>
      get copyWith => CopyWith$Query$UserProducts$userProducts$size(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserProducts$userProducts$size<TRes> {
  factory CopyWith$Query$UserProducts$userProducts$size(
    Query$UserProducts$userProducts$size instance,
    TRes Function(Query$UserProducts$userProducts$size) then,
  ) = _CopyWithImpl$Query$UserProducts$userProducts$size;

  factory CopyWith$Query$UserProducts$userProducts$size.stub(TRes res) =
      _CopyWithStubImpl$Query$UserProducts$userProducts$size;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$UserProducts$userProducts$size<TRes>
    implements CopyWith$Query$UserProducts$userProducts$size<TRes> {
  _CopyWithImpl$Query$UserProducts$userProducts$size(
    this._instance,
    this._then,
  );

  final Query$UserProducts$userProducts$size _instance;

  final TRes Function(Query$UserProducts$userProducts$size) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserProducts$userProducts$size(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$UserProducts$userProducts$size<TRes>
    implements CopyWith$Query$UserProducts$userProducts$size<TRes> {
  _CopyWithStubImpl$Query$UserProducts$userProducts$size(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$UserProducts$userProducts$seller {
  Query$UserProducts$userProducts$seller({
    this.id,
    this.username,
    this.$__typename = 'UserType',
  });

  factory Query$UserProducts$userProducts$seller.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$$__typename = json['__typename'];
    return Query$UserProducts$userProducts$seller(
      id: (l$id as int?),
      username: (l$username as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserProducts$userProducts$seller ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserProducts$userProducts$seller
    on Query$UserProducts$userProducts$seller {
  CopyWith$Query$UserProducts$userProducts$seller<
          Query$UserProducts$userProducts$seller>
      get copyWith => CopyWith$Query$UserProducts$userProducts$seller(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserProducts$userProducts$seller<TRes> {
  factory CopyWith$Query$UserProducts$userProducts$seller(
    Query$UserProducts$userProducts$seller instance,
    TRes Function(Query$UserProducts$userProducts$seller) then,
  ) = _CopyWithImpl$Query$UserProducts$userProducts$seller;

  factory CopyWith$Query$UserProducts$userProducts$seller.stub(TRes res) =
      _CopyWithStubImpl$Query$UserProducts$userProducts$seller;

  TRes call({
    int? id,
    String? username,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$UserProducts$userProducts$seller<TRes>
    implements CopyWith$Query$UserProducts$userProducts$seller<TRes> {
  _CopyWithImpl$Query$UserProducts$userProducts$seller(
    this._instance,
    this._then,
  );

  final Query$UserProducts$userProducts$seller _instance;

  final TRes Function(Query$UserProducts$userProducts$seller) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserProducts$userProducts$seller(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$UserProducts$userProducts$seller<TRes>
    implements CopyWith$Query$UserProducts$userProducts$seller<TRes> {
  _CopyWithStubImpl$Query$UserProducts$userProducts$seller(this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? $__typename,
  }) =>
      _res;
}

class Query$UserProducts$userProducts$materials {
  Query$UserProducts$userProducts$materials({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$UserProducts$userProducts$materials.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$UserProducts$userProducts$materials(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserProducts$userProducts$materials ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserProducts$userProducts$materials
    on Query$UserProducts$userProducts$materials {
  CopyWith$Query$UserProducts$userProducts$materials<
          Query$UserProducts$userProducts$materials>
      get copyWith => CopyWith$Query$UserProducts$userProducts$materials(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserProducts$userProducts$materials<TRes> {
  factory CopyWith$Query$UserProducts$userProducts$materials(
    Query$UserProducts$userProducts$materials instance,
    TRes Function(Query$UserProducts$userProducts$materials) then,
  ) = _CopyWithImpl$Query$UserProducts$userProducts$materials;

  factory CopyWith$Query$UserProducts$userProducts$materials.stub(TRes res) =
      _CopyWithStubImpl$Query$UserProducts$userProducts$materials;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$UserProducts$userProducts$materials<TRes>
    implements CopyWith$Query$UserProducts$userProducts$materials<TRes> {
  _CopyWithImpl$Query$UserProducts$userProducts$materials(
    this._instance,
    this._then,
  );

  final Query$UserProducts$userProducts$materials _instance;

  final TRes Function(Query$UserProducts$userProducts$materials) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserProducts$userProducts$materials(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$UserProducts$userProducts$materials<TRes>
    implements CopyWith$Query$UserProducts$userProducts$materials<TRes> {
  _CopyWithStubImpl$Query$UserProducts$userProducts$materials(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$UserProducts$userProducts$brand {
  Query$UserProducts$userProducts$brand({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$UserProducts$userProducts$brand.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$UserProducts$userProducts$brand(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserProducts$userProducts$brand ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserProducts$userProducts$brand
    on Query$UserProducts$userProducts$brand {
  CopyWith$Query$UserProducts$userProducts$brand<
          Query$UserProducts$userProducts$brand>
      get copyWith => CopyWith$Query$UserProducts$userProducts$brand(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserProducts$userProducts$brand<TRes> {
  factory CopyWith$Query$UserProducts$userProducts$brand(
    Query$UserProducts$userProducts$brand instance,
    TRes Function(Query$UserProducts$userProducts$brand) then,
  ) = _CopyWithImpl$Query$UserProducts$userProducts$brand;

  factory CopyWith$Query$UserProducts$userProducts$brand.stub(TRes res) =
      _CopyWithStubImpl$Query$UserProducts$userProducts$brand;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$UserProducts$userProducts$brand<TRes>
    implements CopyWith$Query$UserProducts$userProducts$brand<TRes> {
  _CopyWithImpl$Query$UserProducts$userProducts$brand(
    this._instance,
    this._then,
  );

  final Query$UserProducts$userProducts$brand _instance;

  final TRes Function(Query$UserProducts$userProducts$brand) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserProducts$userProducts$brand(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$UserProducts$userProducts$brand<TRes>
    implements CopyWith$Query$UserProducts$userProducts$brand<TRes> {
  _CopyWithStubImpl$Query$UserProducts$userProducts$brand(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$AllProducts {
  factory Variables$Query$AllProducts({
    String? search,
    int? pageCount,
    int? pageNumber,
    Input$ProductFiltersInput? filters,
    Enum$SortEnum? sort,
  }) =>
      Variables$Query$AllProducts._({
        if (search != null) r'search': search,
        if (pageCount != null) r'pageCount': pageCount,
        if (pageNumber != null) r'pageNumber': pageNumber,
        if (filters != null) r'filters': filters,
        if (sort != null) r'sort': sort,
      });

  Variables$Query$AllProducts._(this._$data);

  factory Variables$Query$AllProducts.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('search')) {
      final l$search = data['search'];
      result$data['search'] = (l$search as String?);
    }
    if (data.containsKey('pageCount')) {
      final l$pageCount = data['pageCount'];
      result$data['pageCount'] = (l$pageCount as int?);
    }
    if (data.containsKey('pageNumber')) {
      final l$pageNumber = data['pageNumber'];
      result$data['pageNumber'] = (l$pageNumber as int?);
    }
    if (data.containsKey('filters')) {
      final l$filters = data['filters'];
      result$data['filters'] = l$filters == null
          ? null
          : Input$ProductFiltersInput.fromJson(
              (l$filters as Map<String, dynamic>));
    }
    if (data.containsKey('sort')) {
      final l$sort = data['sort'];
      result$data['sort'] =
          l$sort == null ? null : fromJson$Enum$SortEnum((l$sort as String));
    }
    return Variables$Query$AllProducts._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get search => (_$data['search'] as String?);

  int? get pageCount => (_$data['pageCount'] as int?);

  int? get pageNumber => (_$data['pageNumber'] as int?);

  Input$ProductFiltersInput? get filters =>
      (_$data['filters'] as Input$ProductFiltersInput?);

  Enum$SortEnum? get sort => (_$data['sort'] as Enum$SortEnum?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('search')) {
      final l$search = search;
      result$data['search'] = l$search;
    }
    if (_$data.containsKey('pageCount')) {
      final l$pageCount = pageCount;
      result$data['pageCount'] = l$pageCount;
    }
    if (_$data.containsKey('pageNumber')) {
      final l$pageNumber = pageNumber;
      result$data['pageNumber'] = l$pageNumber;
    }
    if (_$data.containsKey('filters')) {
      final l$filters = filters;
      result$data['filters'] = l$filters?.toJson();
    }
    if (_$data.containsKey('sort')) {
      final l$sort = sort;
      result$data['sort'] =
          l$sort == null ? null : toJson$Enum$SortEnum(l$sort);
    }
    return result$data;
  }

  CopyWith$Variables$Query$AllProducts<Variables$Query$AllProducts>
      get copyWith => CopyWith$Variables$Query$AllProducts(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$AllProducts ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$search = search;
    final lOther$search = other.search;
    if (_$data.containsKey('search') != other._$data.containsKey('search')) {
      return false;
    }
    if (l$search != lOther$search) {
      return false;
    }
    final l$pageCount = pageCount;
    final lOther$pageCount = other.pageCount;
    if (_$data.containsKey('pageCount') !=
        other._$data.containsKey('pageCount')) {
      return false;
    }
    if (l$pageCount != lOther$pageCount) {
      return false;
    }
    final l$pageNumber = pageNumber;
    final lOther$pageNumber = other.pageNumber;
    if (_$data.containsKey('pageNumber') !=
        other._$data.containsKey('pageNumber')) {
      return false;
    }
    if (l$pageNumber != lOther$pageNumber) {
      return false;
    }
    final l$filters = filters;
    final lOther$filters = other.filters;
    if (_$data.containsKey('filters') != other._$data.containsKey('filters')) {
      return false;
    }
    if (l$filters != lOther$filters) {
      return false;
    }
    final l$sort = sort;
    final lOther$sort = other.sort;
    if (_$data.containsKey('sort') != other._$data.containsKey('sort')) {
      return false;
    }
    if (l$sort != lOther$sort) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$search = search;
    final l$pageCount = pageCount;
    final l$pageNumber = pageNumber;
    final l$filters = filters;
    final l$sort = sort;
    return Object.hashAll([
      _$data.containsKey('search') ? l$search : const {},
      _$data.containsKey('pageCount') ? l$pageCount : const {},
      _$data.containsKey('pageNumber') ? l$pageNumber : const {},
      _$data.containsKey('filters') ? l$filters : const {},
      _$data.containsKey('sort') ? l$sort : const {},
    ]);
  }
}

abstract class CopyWith$Variables$Query$AllProducts<TRes> {
  factory CopyWith$Variables$Query$AllProducts(
    Variables$Query$AllProducts instance,
    TRes Function(Variables$Query$AllProducts) then,
  ) = _CopyWithImpl$Variables$Query$AllProducts;

  factory CopyWith$Variables$Query$AllProducts.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$AllProducts;

  TRes call({
    String? search,
    int? pageCount,
    int? pageNumber,
    Input$ProductFiltersInput? filters,
    Enum$SortEnum? sort,
  });
}

class _CopyWithImpl$Variables$Query$AllProducts<TRes>
    implements CopyWith$Variables$Query$AllProducts<TRes> {
  _CopyWithImpl$Variables$Query$AllProducts(
    this._instance,
    this._then,
  );

  final Variables$Query$AllProducts _instance;

  final TRes Function(Variables$Query$AllProducts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? search = _undefined,
    Object? pageCount = _undefined,
    Object? pageNumber = _undefined,
    Object? filters = _undefined,
    Object? sort = _undefined,
  }) =>
      _then(Variables$Query$AllProducts._({
        ..._instance._$data,
        if (search != _undefined) 'search': (search as String?),
        if (pageCount != _undefined) 'pageCount': (pageCount as int?),
        if (pageNumber != _undefined) 'pageNumber': (pageNumber as int?),
        if (filters != _undefined)
          'filters': (filters as Input$ProductFiltersInput?),
        if (sort != _undefined) 'sort': (sort as Enum$SortEnum?),
      }));
}

class _CopyWithStubImpl$Variables$Query$AllProducts<TRes>
    implements CopyWith$Variables$Query$AllProducts<TRes> {
  _CopyWithStubImpl$Variables$Query$AllProducts(this._res);

  TRes _res;

  call({
    String? search,
    int? pageCount,
    int? pageNumber,
    Input$ProductFiltersInput? filters,
    Enum$SortEnum? sort,
  }) =>
      _res;
}

class Query$AllProducts {
  Query$AllProducts({
    this.allProducts,
    this.allProductsTotalNumber,
    this.$__typename = 'Query',
  });

  factory Query$AllProducts.fromJson(Map<String, dynamic> json) {
    final l$allProducts = json['allProducts'];
    final l$allProductsTotalNumber = json['allProductsTotalNumber'];
    final l$$__typename = json['__typename'];
    return Query$AllProducts(
      allProducts: (l$allProducts as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$AllProducts$allProducts.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      allProductsTotalNumber: (l$allProductsTotalNumber as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$AllProducts$allProducts?>? allProducts;

  final int? allProductsTotalNumber;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$allProducts = allProducts;
    _resultData['allProducts'] =
        l$allProducts?.map((e) => e?.toJson()).toList();
    final l$allProductsTotalNumber = allProductsTotalNumber;
    _resultData['allProductsTotalNumber'] = l$allProductsTotalNumber;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$allProducts = allProducts;
    final l$allProductsTotalNumber = allProductsTotalNumber;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$allProducts == null
          ? null
          : Object.hashAll(l$allProducts.map((v) => v)),
      l$allProductsTotalNumber,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$AllProducts || runtimeType != other.runtimeType) {
      return false;
    }
    final l$allProducts = allProducts;
    final lOther$allProducts = other.allProducts;
    if (l$allProducts != null && lOther$allProducts != null) {
      if (l$allProducts.length != lOther$allProducts.length) {
        return false;
      }
      for (int i = 0; i < l$allProducts.length; i++) {
        final l$allProducts$entry = l$allProducts[i];
        final lOther$allProducts$entry = lOther$allProducts[i];
        if (l$allProducts$entry != lOther$allProducts$entry) {
          return false;
        }
      }
    } else if (l$allProducts != lOther$allProducts) {
      return false;
    }
    final l$allProductsTotalNumber = allProductsTotalNumber;
    final lOther$allProductsTotalNumber = other.allProductsTotalNumber;
    if (l$allProductsTotalNumber != lOther$allProductsTotalNumber) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$AllProducts on Query$AllProducts {
  CopyWith$Query$AllProducts<Query$AllProducts> get copyWith =>
      CopyWith$Query$AllProducts(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$AllProducts<TRes> {
  factory CopyWith$Query$AllProducts(
    Query$AllProducts instance,
    TRes Function(Query$AllProducts) then,
  ) = _CopyWithImpl$Query$AllProducts;

  factory CopyWith$Query$AllProducts.stub(TRes res) =
      _CopyWithStubImpl$Query$AllProducts;

  TRes call({
    List<Query$AllProducts$allProducts?>? allProducts,
    int? allProductsTotalNumber,
    String? $__typename,
  });
  TRes allProducts(
      Iterable<Query$AllProducts$allProducts?>? Function(
              Iterable<
                  CopyWith$Query$AllProducts$allProducts<
                      Query$AllProducts$allProducts>?>?)
          _fn);
}

class _CopyWithImpl$Query$AllProducts<TRes>
    implements CopyWith$Query$AllProducts<TRes> {
  _CopyWithImpl$Query$AllProducts(
    this._instance,
    this._then,
  );

  final Query$AllProducts _instance;

  final TRes Function(Query$AllProducts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? allProducts = _undefined,
    Object? allProductsTotalNumber = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$AllProducts(
        allProducts: allProducts == _undefined
            ? _instance.allProducts
            : (allProducts as List<Query$AllProducts$allProducts?>?),
        allProductsTotalNumber: allProductsTotalNumber == _undefined
            ? _instance.allProductsTotalNumber
            : (allProductsTotalNumber as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes allProducts(
          Iterable<Query$AllProducts$allProducts?>? Function(
                  Iterable<
                      CopyWith$Query$AllProducts$allProducts<
                          Query$AllProducts$allProducts>?>?)
              _fn) =>
      call(
          allProducts: _fn(_instance.allProducts?.map((e) => e == null
              ? null
              : CopyWith$Query$AllProducts$allProducts(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$AllProducts<TRes>
    implements CopyWith$Query$AllProducts<TRes> {
  _CopyWithStubImpl$Query$AllProducts(this._res);

  TRes _res;

  call({
    List<Query$AllProducts$allProducts?>? allProducts,
    int? allProductsTotalNumber,
    String? $__typename,
  }) =>
      _res;

  allProducts(_fn) => _res;
}

const documentNodeQueryAllProducts = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'AllProducts'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'search')),
        type: NamedTypeNode(
          name: NameNode(value: 'String'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageCount')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageNumber')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'filters')),
        type: NamedTypeNode(
          name: NameNode(value: 'ProductFiltersInput'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'sort')),
        type: NamedTypeNode(
          name: NameNode(value: 'SortEnum'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'allProducts'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'search'),
            value: VariableNode(name: NameNode(value: 'search')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageCount'),
            value: VariableNode(name: NameNode(value: 'pageCount')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageNumber'),
            value: VariableNode(name: NameNode(value: 'pageNumber')),
          ),
          ArgumentNode(
            name: NameNode(value: 'sort'),
            value: VariableNode(name: NameNode(value: 'sort')),
          ),
          ArgumentNode(
            name: NameNode(value: 'filters'),
            value: VariableNode(name: NameNode(value: 'filters')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'category'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'size'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'seller'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'profilePictureUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'condition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'discountPrice'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'condition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'price'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'parcelSize'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'views'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'likes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'userLiked'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'imagesUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'likes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'color'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'style'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isFeatured'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'materials'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'customBrand'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'brand'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: 'allProductsTotalNumber'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$AllProducts _parserFn$Query$AllProducts(Map<String, dynamic> data) =>
    Query$AllProducts.fromJson(data);
typedef OnQueryComplete$Query$AllProducts = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$AllProducts?,
);

class Options$Query$AllProducts
    extends graphql.QueryOptions<Query$AllProducts> {
  Options$Query$AllProducts({
    String? operationName,
    Variables$Query$AllProducts? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$AllProducts? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$AllProducts? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$AllProducts(data),
                  ),
          onError: onError,
          document: documentNodeQueryAllProducts,
          parserFn: _parserFn$Query$AllProducts,
        );

  final OnQueryComplete$Query$AllProducts? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$AllProducts
    extends graphql.WatchQueryOptions<Query$AllProducts> {
  WatchOptions$Query$AllProducts({
    String? operationName,
    Variables$Query$AllProducts? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$AllProducts? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryAllProducts,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$AllProducts,
        );
}

class FetchMoreOptions$Query$AllProducts extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$AllProducts({
    required graphql.UpdateQuery updateQuery,
    Variables$Query$AllProducts? variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables?.toJson() ?? {},
          document: documentNodeQueryAllProducts,
        );
}

extension ClientExtension$Query$AllProducts on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$AllProducts>> query$AllProducts(
          [Options$Query$AllProducts? options]) async =>
      await this.query(options ?? Options$Query$AllProducts());
  graphql.ObservableQuery<Query$AllProducts> watchQuery$AllProducts(
          [WatchOptions$Query$AllProducts? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$AllProducts());
  void writeQuery$AllProducts({
    required Query$AllProducts data,
    Variables$Query$AllProducts? variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation: graphql.Operation(document: documentNodeQueryAllProducts),
          variables: variables?.toJson() ?? const {},
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$AllProducts? readQuery$AllProducts({
    Variables$Query$AllProducts? variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQueryAllProducts),
        variables: variables?.toJson() ?? const {},
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$AllProducts.fromJson(result);
  }
}

class Query$AllProducts$allProducts {
  Query$AllProducts$allProducts({
    required this.id,
    required this.name,
    required this.description,
    this.category,
    this.size,
    this.seller,
    this.condition,
    required this.discountPrice,
    this.price,
    this.parcelSize,
    required this.views,
    required this.likes,
    this.userLiked,
    required this.imagesUrl,
    required this.createdAt,
    required this.updatedAt,
    required this.color,
    this.style,
    required this.isFeatured,
    this.materials,
    this.customBrand,
    this.brand,
    this.$__typename = 'ProductType',
  });

  factory Query$AllProducts$allProducts.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$description = json['description'];
    final l$category = json['category'];
    final l$size = json['size'];
    final l$seller = json['seller'];
    final l$condition = json['condition'];
    final l$discountPrice = json['discountPrice'];
    final l$price = json['price'];
    final l$parcelSize = json['parcelSize'];
    final l$views = json['views'];
    final l$likes = json['likes'];
    final l$userLiked = json['userLiked'];
    final l$imagesUrl = json['imagesUrl'];
    final l$createdAt = json['createdAt'];
    final l$updatedAt = json['updatedAt'];
    final l$color = json['color'];
    final l$style = json['style'];
    final l$isFeatured = json['isFeatured'];
    final l$materials = json['materials'];
    final l$customBrand = json['customBrand'];
    final l$brand = json['brand'];
    final l$$__typename = json['__typename'];
    return Query$AllProducts$allProducts(
      id: (l$id as String),
      name: (l$name as String),
      description: (l$description as String),
      category: l$category == null
          ? null
          : Query$AllProducts$allProducts$category.fromJson(
              (l$category as Map<String, dynamic>)),
      size: l$size == null
          ? null
          : Query$AllProducts$allProducts$size.fromJson(
              (l$size as Map<String, dynamic>)),
      seller: l$seller == null
          ? null
          : Query$AllProducts$allProducts$seller.fromJson(
              (l$seller as Map<String, dynamic>)),
      condition: l$condition == null
          ? null
          : fromJson$Enum$ProductsProductConditionChoices(
              (l$condition as String)),
      discountPrice: (l$discountPrice as String),
      price: (l$price as num?)?.toDouble(),
      parcelSize: l$parcelSize == null
          ? null
          : fromJson$Enum$ProductsProductParcelSizeChoices(
              (l$parcelSize as String)),
      views: (l$views as int),
      likes: (l$likes as int),
      userLiked: (l$userLiked as bool?),
      imagesUrl:
          (l$imagesUrl as List<dynamic>).map((e) => (e as String)).toList(),
      createdAt: DateTime.parse((l$createdAt as String)),
      updatedAt: DateTime.parse((l$updatedAt as String)),
      color: (l$color as List<dynamic>).map((e) => (e as String)).toList(),
      style: l$style == null
          ? null
          : fromJson$Enum$ProductsProductStyleChoices((l$style as String)),
      isFeatured: (l$isFeatured as bool),
      materials: (l$materials as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$AllProducts$allProducts$materials.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      customBrand: (l$customBrand as String?),
      brand: l$brand == null
          ? null
          : Query$AllProducts$allProducts$brand.fromJson(
              (l$brand as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String name;

  final String description;

  final Query$AllProducts$allProducts$category? category;

  final Query$AllProducts$allProducts$size? size;

  final Query$AllProducts$allProducts$seller? seller;

  final Enum$ProductsProductConditionChoices? condition;

  final String discountPrice;

  final double? price;

  final Enum$ProductsProductParcelSizeChoices? parcelSize;

  final int views;

  final int likes;

  final bool? userLiked;

  final List<String> imagesUrl;

  final DateTime createdAt;

  final DateTime updatedAt;

  final List<String> color;

  final Enum$ProductsProductStyleChoices? style;

  final bool isFeatured;

  final List<Query$AllProducts$allProducts$materials?>? materials;

  final String? customBrand;

  final Query$AllProducts$allProducts$brand? brand;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$description = description;
    _resultData['description'] = l$description;
    final l$category = category;
    _resultData['category'] = l$category?.toJson();
    final l$size = size;
    _resultData['size'] = l$size?.toJson();
    final l$seller = seller;
    _resultData['seller'] = l$seller?.toJson();
    final l$condition = condition;
    _resultData['condition'] = l$condition == null
        ? null
        : toJson$Enum$ProductsProductConditionChoices(l$condition);
    final l$discountPrice = discountPrice;
    _resultData['discountPrice'] = l$discountPrice;
    final l$price = price;
    _resultData['price'] = l$price;
    final l$parcelSize = parcelSize;
    _resultData['parcelSize'] = l$parcelSize == null
        ? null
        : toJson$Enum$ProductsProductParcelSizeChoices(l$parcelSize);
    final l$views = views;
    _resultData['views'] = l$views;
    final l$likes = likes;
    _resultData['likes'] = l$likes;
    final l$userLiked = userLiked;
    _resultData['userLiked'] = l$userLiked;
    final l$imagesUrl = imagesUrl;
    _resultData['imagesUrl'] = l$imagesUrl.map((e) => e).toList();
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt.toIso8601String();
    final l$color = color;
    _resultData['color'] = l$color.map((e) => e).toList();
    final l$style = style;
    _resultData['style'] = l$style == null
        ? null
        : toJson$Enum$ProductsProductStyleChoices(l$style);
    final l$isFeatured = isFeatured;
    _resultData['isFeatured'] = l$isFeatured;
    final l$materials = materials;
    _resultData['materials'] = l$materials?.map((e) => e?.toJson()).toList();
    final l$customBrand = customBrand;
    _resultData['customBrand'] = l$customBrand;
    final l$brand = brand;
    _resultData['brand'] = l$brand?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$description = description;
    final l$category = category;
    final l$size = size;
    final l$seller = seller;
    final l$condition = condition;
    final l$discountPrice = discountPrice;
    final l$price = price;
    final l$parcelSize = parcelSize;
    final l$views = views;
    final l$likes = likes;
    final l$userLiked = userLiked;
    final l$imagesUrl = imagesUrl;
    final l$createdAt = createdAt;
    final l$updatedAt = updatedAt;
    final l$color = color;
    final l$style = style;
    final l$isFeatured = isFeatured;
    final l$materials = materials;
    final l$customBrand = customBrand;
    final l$brand = brand;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$description,
      l$category,
      l$size,
      l$seller,
      l$condition,
      l$discountPrice,
      l$price,
      l$parcelSize,
      l$views,
      l$likes,
      l$userLiked,
      Object.hashAll(l$imagesUrl.map((v) => v)),
      l$createdAt,
      l$updatedAt,
      Object.hashAll(l$color.map((v) => v)),
      l$style,
      l$isFeatured,
      l$materials == null ? null : Object.hashAll(l$materials.map((v) => v)),
      l$customBrand,
      l$brand,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$AllProducts$allProducts ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (l$description != lOther$description) {
      return false;
    }
    final l$category = category;
    final lOther$category = other.category;
    if (l$category != lOther$category) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (l$size != lOther$size) {
      return false;
    }
    final l$seller = seller;
    final lOther$seller = other.seller;
    if (l$seller != lOther$seller) {
      return false;
    }
    final l$condition = condition;
    final lOther$condition = other.condition;
    if (l$condition != lOther$condition) {
      return false;
    }
    final l$discountPrice = discountPrice;
    final lOther$discountPrice = other.discountPrice;
    if (l$discountPrice != lOther$discountPrice) {
      return false;
    }
    final l$price = price;
    final lOther$price = other.price;
    if (l$price != lOther$price) {
      return false;
    }
    final l$parcelSize = parcelSize;
    final lOther$parcelSize = other.parcelSize;
    if (l$parcelSize != lOther$parcelSize) {
      return false;
    }
    final l$views = views;
    final lOther$views = other.views;
    if (l$views != lOther$views) {
      return false;
    }
    final l$likes = likes;
    final lOther$likes = other.likes;
    if (l$likes != lOther$likes) {
      return false;
    }
    final l$userLiked = userLiked;
    final lOther$userLiked = other.userLiked;
    if (l$userLiked != lOther$userLiked) {
      return false;
    }
    final l$imagesUrl = imagesUrl;
    final lOther$imagesUrl = other.imagesUrl;
    if (l$imagesUrl.length != lOther$imagesUrl.length) {
      return false;
    }
    for (int i = 0; i < l$imagesUrl.length; i++) {
      final l$imagesUrl$entry = l$imagesUrl[i];
      final lOther$imagesUrl$entry = lOther$imagesUrl[i];
      if (l$imagesUrl$entry != lOther$imagesUrl$entry) {
        return false;
      }
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$color = color;
    final lOther$color = other.color;
    if (l$color.length != lOther$color.length) {
      return false;
    }
    for (int i = 0; i < l$color.length; i++) {
      final l$color$entry = l$color[i];
      final lOther$color$entry = lOther$color[i];
      if (l$color$entry != lOther$color$entry) {
        return false;
      }
    }
    final l$style = style;
    final lOther$style = other.style;
    if (l$style != lOther$style) {
      return false;
    }
    final l$isFeatured = isFeatured;
    final lOther$isFeatured = other.isFeatured;
    if (l$isFeatured != lOther$isFeatured) {
      return false;
    }
    final l$materials = materials;
    final lOther$materials = other.materials;
    if (l$materials != null && lOther$materials != null) {
      if (l$materials.length != lOther$materials.length) {
        return false;
      }
      for (int i = 0; i < l$materials.length; i++) {
        final l$materials$entry = l$materials[i];
        final lOther$materials$entry = lOther$materials[i];
        if (l$materials$entry != lOther$materials$entry) {
          return false;
        }
      }
    } else if (l$materials != lOther$materials) {
      return false;
    }
    final l$customBrand = customBrand;
    final lOther$customBrand = other.customBrand;
    if (l$customBrand != lOther$customBrand) {
      return false;
    }
    final l$brand = brand;
    final lOther$brand = other.brand;
    if (l$brand != lOther$brand) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$AllProducts$allProducts
    on Query$AllProducts$allProducts {
  CopyWith$Query$AllProducts$allProducts<Query$AllProducts$allProducts>
      get copyWith => CopyWith$Query$AllProducts$allProducts(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$AllProducts$allProducts<TRes> {
  factory CopyWith$Query$AllProducts$allProducts(
    Query$AllProducts$allProducts instance,
    TRes Function(Query$AllProducts$allProducts) then,
  ) = _CopyWithImpl$Query$AllProducts$allProducts;

  factory CopyWith$Query$AllProducts$allProducts.stub(TRes res) =
      _CopyWithStubImpl$Query$AllProducts$allProducts;

  TRes call({
    String? id,
    String? name,
    String? description,
    Query$AllProducts$allProducts$category? category,
    Query$AllProducts$allProducts$size? size,
    Query$AllProducts$allProducts$seller? seller,
    Enum$ProductsProductConditionChoices? condition,
    String? discountPrice,
    double? price,
    Enum$ProductsProductParcelSizeChoices? parcelSize,
    int? views,
    int? likes,
    bool? userLiked,
    List<String>? imagesUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<String>? color,
    Enum$ProductsProductStyleChoices? style,
    bool? isFeatured,
    List<Query$AllProducts$allProducts$materials?>? materials,
    String? customBrand,
    Query$AllProducts$allProducts$brand? brand,
    String? $__typename,
  });
  CopyWith$Query$AllProducts$allProducts$category<TRes> get category;
  CopyWith$Query$AllProducts$allProducts$size<TRes> get size;
  CopyWith$Query$AllProducts$allProducts$seller<TRes> get seller;
  TRes materials(
      Iterable<Query$AllProducts$allProducts$materials?>? Function(
              Iterable<
                  CopyWith$Query$AllProducts$allProducts$materials<
                      Query$AllProducts$allProducts$materials>?>?)
          _fn);
  CopyWith$Query$AllProducts$allProducts$brand<TRes> get brand;
}

class _CopyWithImpl$Query$AllProducts$allProducts<TRes>
    implements CopyWith$Query$AllProducts$allProducts<TRes> {
  _CopyWithImpl$Query$AllProducts$allProducts(
    this._instance,
    this._then,
  );

  final Query$AllProducts$allProducts _instance;

  final TRes Function(Query$AllProducts$allProducts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? description = _undefined,
    Object? category = _undefined,
    Object? size = _undefined,
    Object? seller = _undefined,
    Object? condition = _undefined,
    Object? discountPrice = _undefined,
    Object? price = _undefined,
    Object? parcelSize = _undefined,
    Object? views = _undefined,
    Object? likes = _undefined,
    Object? userLiked = _undefined,
    Object? imagesUrl = _undefined,
    Object? createdAt = _undefined,
    Object? updatedAt = _undefined,
    Object? color = _undefined,
    Object? style = _undefined,
    Object? isFeatured = _undefined,
    Object? materials = _undefined,
    Object? customBrand = _undefined,
    Object? brand = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$AllProducts$allProducts(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        description: description == _undefined || description == null
            ? _instance.description
            : (description as String),
        category: category == _undefined
            ? _instance.category
            : (category as Query$AllProducts$allProducts$category?),
        size: size == _undefined
            ? _instance.size
            : (size as Query$AllProducts$allProducts$size?),
        seller: seller == _undefined
            ? _instance.seller
            : (seller as Query$AllProducts$allProducts$seller?),
        condition: condition == _undefined
            ? _instance.condition
            : (condition as Enum$ProductsProductConditionChoices?),
        discountPrice: discountPrice == _undefined || discountPrice == null
            ? _instance.discountPrice
            : (discountPrice as String),
        price: price == _undefined ? _instance.price : (price as double?),
        parcelSize: parcelSize == _undefined
            ? _instance.parcelSize
            : (parcelSize as Enum$ProductsProductParcelSizeChoices?),
        views: views == _undefined || views == null
            ? _instance.views
            : (views as int),
        likes: likes == _undefined || likes == null
            ? _instance.likes
            : (likes as int),
        userLiked: userLiked == _undefined
            ? _instance.userLiked
            : (userLiked as bool?),
        imagesUrl: imagesUrl == _undefined || imagesUrl == null
            ? _instance.imagesUrl
            : (imagesUrl as List<String>),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        updatedAt: updatedAt == _undefined || updatedAt == null
            ? _instance.updatedAt
            : (updatedAt as DateTime),
        color: color == _undefined || color == null
            ? _instance.color
            : (color as List<String>),
        style: style == _undefined
            ? _instance.style
            : (style as Enum$ProductsProductStyleChoices?),
        isFeatured: isFeatured == _undefined || isFeatured == null
            ? _instance.isFeatured
            : (isFeatured as bool),
        materials: materials == _undefined
            ? _instance.materials
            : (materials as List<Query$AllProducts$allProducts$materials?>?),
        customBrand: customBrand == _undefined
            ? _instance.customBrand
            : (customBrand as String?),
        brand: brand == _undefined
            ? _instance.brand
            : (brand as Query$AllProducts$allProducts$brand?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$AllProducts$allProducts$category<TRes> get category {
    final local$category = _instance.category;
    return local$category == null
        ? CopyWith$Query$AllProducts$allProducts$category.stub(_then(_instance))
        : CopyWith$Query$AllProducts$allProducts$category(
            local$category, (e) => call(category: e));
  }

  CopyWith$Query$AllProducts$allProducts$size<TRes> get size {
    final local$size = _instance.size;
    return local$size == null
        ? CopyWith$Query$AllProducts$allProducts$size.stub(_then(_instance))
        : CopyWith$Query$AllProducts$allProducts$size(
            local$size, (e) => call(size: e));
  }

  CopyWith$Query$AllProducts$allProducts$seller<TRes> get seller {
    final local$seller = _instance.seller;
    return local$seller == null
        ? CopyWith$Query$AllProducts$allProducts$seller.stub(_then(_instance))
        : CopyWith$Query$AllProducts$allProducts$seller(
            local$seller, (e) => call(seller: e));
  }

  TRes materials(
          Iterable<Query$AllProducts$allProducts$materials?>? Function(
                  Iterable<
                      CopyWith$Query$AllProducts$allProducts$materials<
                          Query$AllProducts$allProducts$materials>?>?)
              _fn) =>
      call(
          materials: _fn(_instance.materials?.map((e) => e == null
              ? null
              : CopyWith$Query$AllProducts$allProducts$materials(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Query$AllProducts$allProducts$brand<TRes> get brand {
    final local$brand = _instance.brand;
    return local$brand == null
        ? CopyWith$Query$AllProducts$allProducts$brand.stub(_then(_instance))
        : CopyWith$Query$AllProducts$allProducts$brand(
            local$brand, (e) => call(brand: e));
  }
}

class _CopyWithStubImpl$Query$AllProducts$allProducts<TRes>
    implements CopyWith$Query$AllProducts$allProducts<TRes> {
  _CopyWithStubImpl$Query$AllProducts$allProducts(this._res);

  TRes _res;

  call({
    String? id,
    String? name,
    String? description,
    Query$AllProducts$allProducts$category? category,
    Query$AllProducts$allProducts$size? size,
    Query$AllProducts$allProducts$seller? seller,
    Enum$ProductsProductConditionChoices? condition,
    String? discountPrice,
    double? price,
    Enum$ProductsProductParcelSizeChoices? parcelSize,
    int? views,
    int? likes,
    bool? userLiked,
    List<String>? imagesUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<String>? color,
    Enum$ProductsProductStyleChoices? style,
    bool? isFeatured,
    List<Query$AllProducts$allProducts$materials?>? materials,
    String? customBrand,
    Query$AllProducts$allProducts$brand? brand,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$AllProducts$allProducts$category<TRes> get category =>
      CopyWith$Query$AllProducts$allProducts$category.stub(_res);

  CopyWith$Query$AllProducts$allProducts$size<TRes> get size =>
      CopyWith$Query$AllProducts$allProducts$size.stub(_res);

  CopyWith$Query$AllProducts$allProducts$seller<TRes> get seller =>
      CopyWith$Query$AllProducts$allProducts$seller.stub(_res);

  materials(_fn) => _res;

  CopyWith$Query$AllProducts$allProducts$brand<TRes> get brand =>
      CopyWith$Query$AllProducts$allProducts$brand.stub(_res);
}

class Query$AllProducts$allProducts$category {
  Query$AllProducts$allProducts$category({
    this.id,
    this.name,
    this.$__typename = 'CategoryType',
  });

  factory Query$AllProducts$allProducts$category.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$AllProducts$allProducts$category(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$AllProducts$allProducts$category ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$AllProducts$allProducts$category
    on Query$AllProducts$allProducts$category {
  CopyWith$Query$AllProducts$allProducts$category<
          Query$AllProducts$allProducts$category>
      get copyWith => CopyWith$Query$AllProducts$allProducts$category(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$AllProducts$allProducts$category<TRes> {
  factory CopyWith$Query$AllProducts$allProducts$category(
    Query$AllProducts$allProducts$category instance,
    TRes Function(Query$AllProducts$allProducts$category) then,
  ) = _CopyWithImpl$Query$AllProducts$allProducts$category;

  factory CopyWith$Query$AllProducts$allProducts$category.stub(TRes res) =
      _CopyWithStubImpl$Query$AllProducts$allProducts$category;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$AllProducts$allProducts$category<TRes>
    implements CopyWith$Query$AllProducts$allProducts$category<TRes> {
  _CopyWithImpl$Query$AllProducts$allProducts$category(
    this._instance,
    this._then,
  );

  final Query$AllProducts$allProducts$category _instance;

  final TRes Function(Query$AllProducts$allProducts$category) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$AllProducts$allProducts$category(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$AllProducts$allProducts$category<TRes>
    implements CopyWith$Query$AllProducts$allProducts$category<TRes> {
  _CopyWithStubImpl$Query$AllProducts$allProducts$category(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$AllProducts$allProducts$size {
  Query$AllProducts$allProducts$size({
    this.id,
    this.name,
    this.$__typename = 'SizeType',
  });

  factory Query$AllProducts$allProducts$size.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$AllProducts$allProducts$size(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$AllProducts$allProducts$size ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$AllProducts$allProducts$size
    on Query$AllProducts$allProducts$size {
  CopyWith$Query$AllProducts$allProducts$size<
          Query$AllProducts$allProducts$size>
      get copyWith => CopyWith$Query$AllProducts$allProducts$size(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$AllProducts$allProducts$size<TRes> {
  factory CopyWith$Query$AllProducts$allProducts$size(
    Query$AllProducts$allProducts$size instance,
    TRes Function(Query$AllProducts$allProducts$size) then,
  ) = _CopyWithImpl$Query$AllProducts$allProducts$size;

  factory CopyWith$Query$AllProducts$allProducts$size.stub(TRes res) =
      _CopyWithStubImpl$Query$AllProducts$allProducts$size;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$AllProducts$allProducts$size<TRes>
    implements CopyWith$Query$AllProducts$allProducts$size<TRes> {
  _CopyWithImpl$Query$AllProducts$allProducts$size(
    this._instance,
    this._then,
  );

  final Query$AllProducts$allProducts$size _instance;

  final TRes Function(Query$AllProducts$allProducts$size) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$AllProducts$allProducts$size(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$AllProducts$allProducts$size<TRes>
    implements CopyWith$Query$AllProducts$allProducts$size<TRes> {
  _CopyWithStubImpl$Query$AllProducts$allProducts$size(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$AllProducts$allProducts$seller {
  Query$AllProducts$allProducts$seller({
    this.id,
    this.username,
    this.profilePictureUrl,
    this.$__typename = 'UserType',
  });

  factory Query$AllProducts$allProducts$seller.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$$__typename = json['__typename'];
    return Query$AllProducts$allProducts$seller(
      id: (l$id as int?),
      username: (l$username as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String? profilePictureUrl;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$profilePictureUrl = profilePictureUrl;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$profilePictureUrl,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$AllProducts$allProducts$seller ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$AllProducts$allProducts$seller
    on Query$AllProducts$allProducts$seller {
  CopyWith$Query$AllProducts$allProducts$seller<
          Query$AllProducts$allProducts$seller>
      get copyWith => CopyWith$Query$AllProducts$allProducts$seller(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$AllProducts$allProducts$seller<TRes> {
  factory CopyWith$Query$AllProducts$allProducts$seller(
    Query$AllProducts$allProducts$seller instance,
    TRes Function(Query$AllProducts$allProducts$seller) then,
  ) = _CopyWithImpl$Query$AllProducts$allProducts$seller;

  factory CopyWith$Query$AllProducts$allProducts$seller.stub(TRes res) =
      _CopyWithStubImpl$Query$AllProducts$allProducts$seller;

  TRes call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$AllProducts$allProducts$seller<TRes>
    implements CopyWith$Query$AllProducts$allProducts$seller<TRes> {
  _CopyWithImpl$Query$AllProducts$allProducts$seller(
    this._instance,
    this._then,
  );

  final Query$AllProducts$allProducts$seller _instance;

  final TRes Function(Query$AllProducts$allProducts$seller) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$AllProducts$allProducts$seller(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$AllProducts$allProducts$seller<TRes>
    implements CopyWith$Query$AllProducts$allProducts$seller<TRes> {
  _CopyWithStubImpl$Query$AllProducts$allProducts$seller(this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? $__typename,
  }) =>
      _res;
}

class Query$AllProducts$allProducts$materials {
  Query$AllProducts$allProducts$materials({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$AllProducts$allProducts$materials.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$AllProducts$allProducts$materials(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$AllProducts$allProducts$materials ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$AllProducts$allProducts$materials
    on Query$AllProducts$allProducts$materials {
  CopyWith$Query$AllProducts$allProducts$materials<
          Query$AllProducts$allProducts$materials>
      get copyWith => CopyWith$Query$AllProducts$allProducts$materials(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$AllProducts$allProducts$materials<TRes> {
  factory CopyWith$Query$AllProducts$allProducts$materials(
    Query$AllProducts$allProducts$materials instance,
    TRes Function(Query$AllProducts$allProducts$materials) then,
  ) = _CopyWithImpl$Query$AllProducts$allProducts$materials;

  factory CopyWith$Query$AllProducts$allProducts$materials.stub(TRes res) =
      _CopyWithStubImpl$Query$AllProducts$allProducts$materials;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$AllProducts$allProducts$materials<TRes>
    implements CopyWith$Query$AllProducts$allProducts$materials<TRes> {
  _CopyWithImpl$Query$AllProducts$allProducts$materials(
    this._instance,
    this._then,
  );

  final Query$AllProducts$allProducts$materials _instance;

  final TRes Function(Query$AllProducts$allProducts$materials) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$AllProducts$allProducts$materials(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$AllProducts$allProducts$materials<TRes>
    implements CopyWith$Query$AllProducts$allProducts$materials<TRes> {
  _CopyWithStubImpl$Query$AllProducts$allProducts$materials(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$AllProducts$allProducts$brand {
  Query$AllProducts$allProducts$brand({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$AllProducts$allProducts$brand.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$AllProducts$allProducts$brand(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$AllProducts$allProducts$brand ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$AllProducts$allProducts$brand
    on Query$AllProducts$allProducts$brand {
  CopyWith$Query$AllProducts$allProducts$brand<
          Query$AllProducts$allProducts$brand>
      get copyWith => CopyWith$Query$AllProducts$allProducts$brand(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$AllProducts$allProducts$brand<TRes> {
  factory CopyWith$Query$AllProducts$allProducts$brand(
    Query$AllProducts$allProducts$brand instance,
    TRes Function(Query$AllProducts$allProducts$brand) then,
  ) = _CopyWithImpl$Query$AllProducts$allProducts$brand;

  factory CopyWith$Query$AllProducts$allProducts$brand.stub(TRes res) =
      _CopyWithStubImpl$Query$AllProducts$allProducts$brand;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$AllProducts$allProducts$brand<TRes>
    implements CopyWith$Query$AllProducts$allProducts$brand<TRes> {
  _CopyWithImpl$Query$AllProducts$allProducts$brand(
    this._instance,
    this._then,
  );

  final Query$AllProducts$allProducts$brand _instance;

  final TRes Function(Query$AllProducts$allProducts$brand) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$AllProducts$allProducts$brand(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$AllProducts$allProducts$brand<TRes>
    implements CopyWith$Query$AllProducts$allProducts$brand<TRes> {
  _CopyWithStubImpl$Query$AllProducts$allProducts$brand(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$Categories {
  factory Variables$Query$Categories({int? parentId}) =>
      Variables$Query$Categories._({
        if (parentId != null) r'parentId': parentId,
      });

  Variables$Query$Categories._(this._$data);

  factory Variables$Query$Categories.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('parentId')) {
      final l$parentId = data['parentId'];
      result$data['parentId'] = (l$parentId as int?);
    }
    return Variables$Query$Categories._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get parentId => (_$data['parentId'] as int?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('parentId')) {
      final l$parentId = parentId;
      result$data['parentId'] = l$parentId;
    }
    return result$data;
  }

  CopyWith$Variables$Query$Categories<Variables$Query$Categories>
      get copyWith => CopyWith$Variables$Query$Categories(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$Categories ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$parentId = parentId;
    final lOther$parentId = other.parentId;
    if (_$data.containsKey('parentId') !=
        other._$data.containsKey('parentId')) {
      return false;
    }
    if (l$parentId != lOther$parentId) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$parentId = parentId;
    return Object.hashAll(
        [_$data.containsKey('parentId') ? l$parentId : const {}]);
  }
}

abstract class CopyWith$Variables$Query$Categories<TRes> {
  factory CopyWith$Variables$Query$Categories(
    Variables$Query$Categories instance,
    TRes Function(Variables$Query$Categories) then,
  ) = _CopyWithImpl$Variables$Query$Categories;

  factory CopyWith$Variables$Query$Categories.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$Categories;

  TRes call({int? parentId});
}

class _CopyWithImpl$Variables$Query$Categories<TRes>
    implements CopyWith$Variables$Query$Categories<TRes> {
  _CopyWithImpl$Variables$Query$Categories(
    this._instance,
    this._then,
  );

  final Variables$Query$Categories _instance;

  final TRes Function(Variables$Query$Categories) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? parentId = _undefined}) =>
      _then(Variables$Query$Categories._({
        ..._instance._$data,
        if (parentId != _undefined) 'parentId': (parentId as int?),
      }));
}

class _CopyWithStubImpl$Variables$Query$Categories<TRes>
    implements CopyWith$Variables$Query$Categories<TRes> {
  _CopyWithStubImpl$Variables$Query$Categories(this._res);

  TRes _res;

  call({int? parentId}) => _res;
}

class Query$Categories {
  Query$Categories({
    this.categories,
    this.$__typename = 'Query',
  });

  factory Query$Categories.fromJson(Map<String, dynamic> json) {
    final l$categories = json['categories'];
    final l$$__typename = json['__typename'];
    return Query$Categories(
      categories: (l$categories as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$Categories$categories.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$Categories$categories?>? categories;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$categories = categories;
    _resultData['categories'] = l$categories?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$categories = categories;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$categories == null ? null : Object.hashAll(l$categories.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Categories || runtimeType != other.runtimeType) {
      return false;
    }
    final l$categories = categories;
    final lOther$categories = other.categories;
    if (l$categories != null && lOther$categories != null) {
      if (l$categories.length != lOther$categories.length) {
        return false;
      }
      for (int i = 0; i < l$categories.length; i++) {
        final l$categories$entry = l$categories[i];
        final lOther$categories$entry = lOther$categories[i];
        if (l$categories$entry != lOther$categories$entry) {
          return false;
        }
      }
    } else if (l$categories != lOther$categories) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Categories on Query$Categories {
  CopyWith$Query$Categories<Query$Categories> get copyWith =>
      CopyWith$Query$Categories(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$Categories<TRes> {
  factory CopyWith$Query$Categories(
    Query$Categories instance,
    TRes Function(Query$Categories) then,
  ) = _CopyWithImpl$Query$Categories;

  factory CopyWith$Query$Categories.stub(TRes res) =
      _CopyWithStubImpl$Query$Categories;

  TRes call({
    List<Query$Categories$categories?>? categories,
    String? $__typename,
  });
  TRes categories(
      Iterable<Query$Categories$categories?>? Function(
              Iterable<
                  CopyWith$Query$Categories$categories<
                      Query$Categories$categories>?>?)
          _fn);
}

class _CopyWithImpl$Query$Categories<TRes>
    implements CopyWith$Query$Categories<TRes> {
  _CopyWithImpl$Query$Categories(
    this._instance,
    this._then,
  );

  final Query$Categories _instance;

  final TRes Function(Query$Categories) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? categories = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Categories(
        categories: categories == _undefined
            ? _instance.categories
            : (categories as List<Query$Categories$categories?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes categories(
          Iterable<Query$Categories$categories?>? Function(
                  Iterable<
                      CopyWith$Query$Categories$categories<
                          Query$Categories$categories>?>?)
              _fn) =>
      call(
          categories: _fn(_instance.categories?.map((e) => e == null
              ? null
              : CopyWith$Query$Categories$categories(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$Categories<TRes>
    implements CopyWith$Query$Categories<TRes> {
  _CopyWithStubImpl$Query$Categories(this._res);

  TRes _res;

  call({
    List<Query$Categories$categories?>? categories,
    String? $__typename,
  }) =>
      _res;

  categories(_fn) => _res;
}

const documentNodeQueryCategories = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'Categories'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'parentId')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      )
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'categories'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'parentId'),
            value: VariableNode(name: NameNode(value: 'parentId')),
          )
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'hasChildren'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'fullPath'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'parent'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$Categories _parserFn$Query$Categories(Map<String, dynamic> data) =>
    Query$Categories.fromJson(data);
typedef OnQueryComplete$Query$Categories = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$Categories?,
);

class Options$Query$Categories extends graphql.QueryOptions<Query$Categories> {
  Options$Query$Categories({
    String? operationName,
    Variables$Query$Categories? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$Categories? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$Categories? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$Categories(data),
                  ),
          onError: onError,
          document: documentNodeQueryCategories,
          parserFn: _parserFn$Query$Categories,
        );

  final OnQueryComplete$Query$Categories? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$Categories
    extends graphql.WatchQueryOptions<Query$Categories> {
  WatchOptions$Query$Categories({
    String? operationName,
    Variables$Query$Categories? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$Categories? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryCategories,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$Categories,
        );
}

class FetchMoreOptions$Query$Categories extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$Categories({
    required graphql.UpdateQuery updateQuery,
    Variables$Query$Categories? variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables?.toJson() ?? {},
          document: documentNodeQueryCategories,
        );
}

extension ClientExtension$Query$Categories on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$Categories>> query$Categories(
          [Options$Query$Categories? options]) async =>
      await this.query(options ?? Options$Query$Categories());
  graphql.ObservableQuery<Query$Categories> watchQuery$Categories(
          [WatchOptions$Query$Categories? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$Categories());
  void writeQuery$Categories({
    required Query$Categories data,
    Variables$Query$Categories? variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation: graphql.Operation(document: documentNodeQueryCategories),
          variables: variables?.toJson() ?? const {},
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$Categories? readQuery$Categories({
    Variables$Query$Categories? variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQueryCategories),
        variables: variables?.toJson() ?? const {},
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$Categories.fromJson(result);
  }
}

class Query$Categories$categories {
  Query$Categories$categories({
    required this.id,
    required this.name,
    this.hasChildren,
    this.fullPath,
    this.parent,
    this.$__typename = 'CategoryTypes',
  });

  factory Query$Categories$categories.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$hasChildren = json['hasChildren'];
    final l$fullPath = json['fullPath'];
    final l$parent = json['parent'];
    final l$$__typename = json['__typename'];
    return Query$Categories$categories(
      id: (l$id as String),
      name: (l$name as String),
      hasChildren: (l$hasChildren as bool?),
      fullPath: (l$fullPath as String?),
      parent: l$parent == null
          ? null
          : Query$Categories$categories$parent.fromJson(
              (l$parent as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String name;

  final bool? hasChildren;

  final String? fullPath;

  final Query$Categories$categories$parent? parent;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$hasChildren = hasChildren;
    _resultData['hasChildren'] = l$hasChildren;
    final l$fullPath = fullPath;
    _resultData['fullPath'] = l$fullPath;
    final l$parent = parent;
    _resultData['parent'] = l$parent?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$hasChildren = hasChildren;
    final l$fullPath = fullPath;
    final l$parent = parent;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$hasChildren,
      l$fullPath,
      l$parent,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Categories$categories ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$hasChildren = hasChildren;
    final lOther$hasChildren = other.hasChildren;
    if (l$hasChildren != lOther$hasChildren) {
      return false;
    }
    final l$fullPath = fullPath;
    final lOther$fullPath = other.fullPath;
    if (l$fullPath != lOther$fullPath) {
      return false;
    }
    final l$parent = parent;
    final lOther$parent = other.parent;
    if (l$parent != lOther$parent) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Categories$categories
    on Query$Categories$categories {
  CopyWith$Query$Categories$categories<Query$Categories$categories>
      get copyWith => CopyWith$Query$Categories$categories(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Categories$categories<TRes> {
  factory CopyWith$Query$Categories$categories(
    Query$Categories$categories instance,
    TRes Function(Query$Categories$categories) then,
  ) = _CopyWithImpl$Query$Categories$categories;

  factory CopyWith$Query$Categories$categories.stub(TRes res) =
      _CopyWithStubImpl$Query$Categories$categories;

  TRes call({
    String? id,
    String? name,
    bool? hasChildren,
    String? fullPath,
    Query$Categories$categories$parent? parent,
    String? $__typename,
  });
  CopyWith$Query$Categories$categories$parent<TRes> get parent;
}

class _CopyWithImpl$Query$Categories$categories<TRes>
    implements CopyWith$Query$Categories$categories<TRes> {
  _CopyWithImpl$Query$Categories$categories(
    this._instance,
    this._then,
  );

  final Query$Categories$categories _instance;

  final TRes Function(Query$Categories$categories) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? hasChildren = _undefined,
    Object? fullPath = _undefined,
    Object? parent = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Categories$categories(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        hasChildren: hasChildren == _undefined
            ? _instance.hasChildren
            : (hasChildren as bool?),
        fullPath:
            fullPath == _undefined ? _instance.fullPath : (fullPath as String?),
        parent: parent == _undefined
            ? _instance.parent
            : (parent as Query$Categories$categories$parent?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$Categories$categories$parent<TRes> get parent {
    final local$parent = _instance.parent;
    return local$parent == null
        ? CopyWith$Query$Categories$categories$parent.stub(_then(_instance))
        : CopyWith$Query$Categories$categories$parent(
            local$parent, (e) => call(parent: e));
  }
}

class _CopyWithStubImpl$Query$Categories$categories<TRes>
    implements CopyWith$Query$Categories$categories<TRes> {
  _CopyWithStubImpl$Query$Categories$categories(this._res);

  TRes _res;

  call({
    String? id,
    String? name,
    bool? hasChildren,
    String? fullPath,
    Query$Categories$categories$parent? parent,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$Categories$categories$parent<TRes> get parent =>
      CopyWith$Query$Categories$categories$parent.stub(_res);
}

class Query$Categories$categories$parent {
  Query$Categories$categories$parent({
    required this.id,
    this.$__typename = 'CategoryTypes',
  });

  factory Query$Categories$categories$parent.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$$__typename = json['__typename'];
    return Query$Categories$categories$parent(
      id: (l$id as String),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Categories$categories$parent ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Categories$categories$parent
    on Query$Categories$categories$parent {
  CopyWith$Query$Categories$categories$parent<
          Query$Categories$categories$parent>
      get copyWith => CopyWith$Query$Categories$categories$parent(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Categories$categories$parent<TRes> {
  factory CopyWith$Query$Categories$categories$parent(
    Query$Categories$categories$parent instance,
    TRes Function(Query$Categories$categories$parent) then,
  ) = _CopyWithImpl$Query$Categories$categories$parent;

  factory CopyWith$Query$Categories$categories$parent.stub(TRes res) =
      _CopyWithStubImpl$Query$Categories$categories$parent;

  TRes call({
    String? id,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Categories$categories$parent<TRes>
    implements CopyWith$Query$Categories$categories$parent<TRes> {
  _CopyWithImpl$Query$Categories$categories$parent(
    this._instance,
    this._then,
  );

  final Query$Categories$categories$parent _instance;

  final TRes Function(Query$Categories$categories$parent) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Categories$categories$parent(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Categories$categories$parent<TRes>
    implements CopyWith$Query$Categories$categories$parent<TRes> {
  _CopyWithStubImpl$Query$Categories$categories$parent(this._res);

  TRes _res;

  call({
    String? id,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$Sizes {
  factory Variables$Query$Sizes({required String path}) =>
      Variables$Query$Sizes._({
        r'path': path,
      });

  Variables$Query$Sizes._(this._$data);

  factory Variables$Query$Sizes.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$path = data['path'];
    result$data['path'] = (l$path as String);
    return Variables$Query$Sizes._(result$data);
  }

  Map<String, dynamic> _$data;

  String get path => (_$data['path'] as String);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$path = path;
    result$data['path'] = l$path;
    return result$data;
  }

  CopyWith$Variables$Query$Sizes<Variables$Query$Sizes> get copyWith =>
      CopyWith$Variables$Query$Sizes(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$Sizes || runtimeType != other.runtimeType) {
      return false;
    }
    final l$path = path;
    final lOther$path = other.path;
    if (l$path != lOther$path) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$path = path;
    return Object.hashAll([l$path]);
  }
}

abstract class CopyWith$Variables$Query$Sizes<TRes> {
  factory CopyWith$Variables$Query$Sizes(
    Variables$Query$Sizes instance,
    TRes Function(Variables$Query$Sizes) then,
  ) = _CopyWithImpl$Variables$Query$Sizes;

  factory CopyWith$Variables$Query$Sizes.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$Sizes;

  TRes call({String? path});
}

class _CopyWithImpl$Variables$Query$Sizes<TRes>
    implements CopyWith$Variables$Query$Sizes<TRes> {
  _CopyWithImpl$Variables$Query$Sizes(
    this._instance,
    this._then,
  );

  final Variables$Query$Sizes _instance;

  final TRes Function(Variables$Query$Sizes) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? path = _undefined}) => _then(Variables$Query$Sizes._({
        ..._instance._$data,
        if (path != _undefined && path != null) 'path': (path as String),
      }));
}

class _CopyWithStubImpl$Variables$Query$Sizes<TRes>
    implements CopyWith$Variables$Query$Sizes<TRes> {
  _CopyWithStubImpl$Variables$Query$Sizes(this._res);

  TRes _res;

  call({String? path}) => _res;
}

class Query$Sizes {
  Query$Sizes({
    this.sizes,
    this.$__typename = 'Query',
  });

  factory Query$Sizes.fromJson(Map<String, dynamic> json) {
    final l$sizes = json['sizes'];
    final l$$__typename = json['__typename'];
    return Query$Sizes(
      sizes: (l$sizes as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$Sizes$sizes.fromJson((e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$Sizes$sizes?>? sizes;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$sizes = sizes;
    _resultData['sizes'] = l$sizes?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$sizes = sizes;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$sizes == null ? null : Object.hashAll(l$sizes.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Sizes || runtimeType != other.runtimeType) {
      return false;
    }
    final l$sizes = sizes;
    final lOther$sizes = other.sizes;
    if (l$sizes != null && lOther$sizes != null) {
      if (l$sizes.length != lOther$sizes.length) {
        return false;
      }
      for (int i = 0; i < l$sizes.length; i++) {
        final l$sizes$entry = l$sizes[i];
        final lOther$sizes$entry = lOther$sizes[i];
        if (l$sizes$entry != lOther$sizes$entry) {
          return false;
        }
      }
    } else if (l$sizes != lOther$sizes) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Sizes on Query$Sizes {
  CopyWith$Query$Sizes<Query$Sizes> get copyWith => CopyWith$Query$Sizes(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$Sizes<TRes> {
  factory CopyWith$Query$Sizes(
    Query$Sizes instance,
    TRes Function(Query$Sizes) then,
  ) = _CopyWithImpl$Query$Sizes;

  factory CopyWith$Query$Sizes.stub(TRes res) = _CopyWithStubImpl$Query$Sizes;

  TRes call({
    List<Query$Sizes$sizes?>? sizes,
    String? $__typename,
  });
  TRes sizes(
      Iterable<Query$Sizes$sizes?>? Function(
              Iterable<CopyWith$Query$Sizes$sizes<Query$Sizes$sizes>?>?)
          _fn);
}

class _CopyWithImpl$Query$Sizes<TRes> implements CopyWith$Query$Sizes<TRes> {
  _CopyWithImpl$Query$Sizes(
    this._instance,
    this._then,
  );

  final Query$Sizes _instance;

  final TRes Function(Query$Sizes) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? sizes = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Sizes(
        sizes: sizes == _undefined
            ? _instance.sizes
            : (sizes as List<Query$Sizes$sizes?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes sizes(
          Iterable<Query$Sizes$sizes?>? Function(
                  Iterable<CopyWith$Query$Sizes$sizes<Query$Sizes$sizes>?>?)
              _fn) =>
      call(
          sizes: _fn(_instance.sizes?.map((e) => e == null
              ? null
              : CopyWith$Query$Sizes$sizes(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$Sizes<TRes>
    implements CopyWith$Query$Sizes<TRes> {
  _CopyWithStubImpl$Query$Sizes(this._res);

  TRes _res;

  call({
    List<Query$Sizes$sizes?>? sizes,
    String? $__typename,
  }) =>
      _res;

  sizes(_fn) => _res;
}

const documentNodeQuerySizes = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'Sizes'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'path')),
        type: NamedTypeNode(
          name: NameNode(value: 'String'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      )
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'sizes'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'path'),
            value: VariableNode(name: NameNode(value: 'path')),
          )
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$Sizes _parserFn$Query$Sizes(Map<String, dynamic> data) =>
    Query$Sizes.fromJson(data);
typedef OnQueryComplete$Query$Sizes = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$Sizes?,
);

class Options$Query$Sizes extends graphql.QueryOptions<Query$Sizes> {
  Options$Query$Sizes({
    String? operationName,
    required Variables$Query$Sizes variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$Sizes? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$Sizes? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$Sizes(data),
                  ),
          onError: onError,
          document: documentNodeQuerySizes,
          parserFn: _parserFn$Query$Sizes,
        );

  final OnQueryComplete$Query$Sizes? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$Sizes extends graphql.WatchQueryOptions<Query$Sizes> {
  WatchOptions$Query$Sizes({
    String? operationName,
    required Variables$Query$Sizes variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$Sizes? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQuerySizes,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$Sizes,
        );
}

class FetchMoreOptions$Query$Sizes extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$Sizes({
    required graphql.UpdateQuery updateQuery,
    required Variables$Query$Sizes variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables.toJson(),
          document: documentNodeQuerySizes,
        );
}

extension ClientExtension$Query$Sizes on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$Sizes>> query$Sizes(
          Options$Query$Sizes options) async =>
      await this.query(options);
  graphql.ObservableQuery<Query$Sizes> watchQuery$Sizes(
          WatchOptions$Query$Sizes options) =>
      this.watchQuery(options);
  void writeQuery$Sizes({
    required Query$Sizes data,
    required Variables$Query$Sizes variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation: graphql.Operation(document: documentNodeQuerySizes),
          variables: variables.toJson(),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$Sizes? readQuery$Sizes({
    required Variables$Query$Sizes variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQuerySizes),
        variables: variables.toJson(),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$Sizes.fromJson(result);
  }
}

class Query$Sizes$sizes {
  Query$Sizes$sizes({
    this.id,
    this.name,
    this.$__typename = 'SizeType',
  });

  factory Query$Sizes$sizes.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$Sizes$sizes(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Sizes$sizes || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Sizes$sizes on Query$Sizes$sizes {
  CopyWith$Query$Sizes$sizes<Query$Sizes$sizes> get copyWith =>
      CopyWith$Query$Sizes$sizes(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$Sizes$sizes<TRes> {
  factory CopyWith$Query$Sizes$sizes(
    Query$Sizes$sizes instance,
    TRes Function(Query$Sizes$sizes) then,
  ) = _CopyWithImpl$Query$Sizes$sizes;

  factory CopyWith$Query$Sizes$sizes.stub(TRes res) =
      _CopyWithStubImpl$Query$Sizes$sizes;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Sizes$sizes<TRes>
    implements CopyWith$Query$Sizes$sizes<TRes> {
  _CopyWithImpl$Query$Sizes$sizes(
    this._instance,
    this._then,
  );

  final Query$Sizes$sizes _instance;

  final TRes Function(Query$Sizes$sizes) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Sizes$sizes(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Sizes$sizes<TRes>
    implements CopyWith$Query$Sizes$sizes<TRes> {
  _CopyWithStubImpl$Query$Sizes$sizes(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$likedProducts {
  factory Variables$Query$likedProducts({
    int? pageCount,
    int? pageNumber,
  }) =>
      Variables$Query$likedProducts._({
        if (pageCount != null) r'pageCount': pageCount,
        if (pageNumber != null) r'pageNumber': pageNumber,
      });

  Variables$Query$likedProducts._(this._$data);

  factory Variables$Query$likedProducts.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('pageCount')) {
      final l$pageCount = data['pageCount'];
      result$data['pageCount'] = (l$pageCount as int?);
    }
    if (data.containsKey('pageNumber')) {
      final l$pageNumber = data['pageNumber'];
      result$data['pageNumber'] = (l$pageNumber as int?);
    }
    return Variables$Query$likedProducts._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get pageCount => (_$data['pageCount'] as int?);

  int? get pageNumber => (_$data['pageNumber'] as int?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('pageCount')) {
      final l$pageCount = pageCount;
      result$data['pageCount'] = l$pageCount;
    }
    if (_$data.containsKey('pageNumber')) {
      final l$pageNumber = pageNumber;
      result$data['pageNumber'] = l$pageNumber;
    }
    return result$data;
  }

  CopyWith$Variables$Query$likedProducts<Variables$Query$likedProducts>
      get copyWith => CopyWith$Variables$Query$likedProducts(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$likedProducts ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$pageCount = pageCount;
    final lOther$pageCount = other.pageCount;
    if (_$data.containsKey('pageCount') !=
        other._$data.containsKey('pageCount')) {
      return false;
    }
    if (l$pageCount != lOther$pageCount) {
      return false;
    }
    final l$pageNumber = pageNumber;
    final lOther$pageNumber = other.pageNumber;
    if (_$data.containsKey('pageNumber') !=
        other._$data.containsKey('pageNumber')) {
      return false;
    }
    if (l$pageNumber != lOther$pageNumber) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$pageCount = pageCount;
    final l$pageNumber = pageNumber;
    return Object.hashAll([
      _$data.containsKey('pageCount') ? l$pageCount : const {},
      _$data.containsKey('pageNumber') ? l$pageNumber : const {},
    ]);
  }
}

abstract class CopyWith$Variables$Query$likedProducts<TRes> {
  factory CopyWith$Variables$Query$likedProducts(
    Variables$Query$likedProducts instance,
    TRes Function(Variables$Query$likedProducts) then,
  ) = _CopyWithImpl$Variables$Query$likedProducts;

  factory CopyWith$Variables$Query$likedProducts.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$likedProducts;

  TRes call({
    int? pageCount,
    int? pageNumber,
  });
}

class _CopyWithImpl$Variables$Query$likedProducts<TRes>
    implements CopyWith$Variables$Query$likedProducts<TRes> {
  _CopyWithImpl$Variables$Query$likedProducts(
    this._instance,
    this._then,
  );

  final Variables$Query$likedProducts _instance;

  final TRes Function(Variables$Query$likedProducts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? pageCount = _undefined,
    Object? pageNumber = _undefined,
  }) =>
      _then(Variables$Query$likedProducts._({
        ..._instance._$data,
        if (pageCount != _undefined) 'pageCount': (pageCount as int?),
        if (pageNumber != _undefined) 'pageNumber': (pageNumber as int?),
      }));
}

class _CopyWithStubImpl$Variables$Query$likedProducts<TRes>
    implements CopyWith$Variables$Query$likedProducts<TRes> {
  _CopyWithStubImpl$Variables$Query$likedProducts(this._res);

  TRes _res;

  call({
    int? pageCount,
    int? pageNumber,
  }) =>
      _res;
}

class Query$likedProducts {
  Query$likedProducts({
    this.likedProducts,
    this.likedProductsTotalNumber,
    this.$__typename = 'Query',
  });

  factory Query$likedProducts.fromJson(Map<String, dynamic> json) {
    final l$likedProducts = json['likedProducts'];
    final l$likedProductsTotalNumber = json['likedProductsTotalNumber'];
    final l$$__typename = json['__typename'];
    return Query$likedProducts(
      likedProducts: (l$likedProducts as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$likedProducts$likedProducts.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      likedProductsTotalNumber: (l$likedProductsTotalNumber as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$likedProducts$likedProducts?>? likedProducts;

  final int? likedProductsTotalNumber;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$likedProducts = likedProducts;
    _resultData['likedProducts'] =
        l$likedProducts?.map((e) => e?.toJson()).toList();
    final l$likedProductsTotalNumber = likedProductsTotalNumber;
    _resultData['likedProductsTotalNumber'] = l$likedProductsTotalNumber;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$likedProducts = likedProducts;
    final l$likedProductsTotalNumber = likedProductsTotalNumber;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$likedProducts == null
          ? null
          : Object.hashAll(l$likedProducts.map((v) => v)),
      l$likedProductsTotalNumber,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$likedProducts || runtimeType != other.runtimeType) {
      return false;
    }
    final l$likedProducts = likedProducts;
    final lOther$likedProducts = other.likedProducts;
    if (l$likedProducts != null && lOther$likedProducts != null) {
      if (l$likedProducts.length != lOther$likedProducts.length) {
        return false;
      }
      for (int i = 0; i < l$likedProducts.length; i++) {
        final l$likedProducts$entry = l$likedProducts[i];
        final lOther$likedProducts$entry = lOther$likedProducts[i];
        if (l$likedProducts$entry != lOther$likedProducts$entry) {
          return false;
        }
      }
    } else if (l$likedProducts != lOther$likedProducts) {
      return false;
    }
    final l$likedProductsTotalNumber = likedProductsTotalNumber;
    final lOther$likedProductsTotalNumber = other.likedProductsTotalNumber;
    if (l$likedProductsTotalNumber != lOther$likedProductsTotalNumber) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$likedProducts on Query$likedProducts {
  CopyWith$Query$likedProducts<Query$likedProducts> get copyWith =>
      CopyWith$Query$likedProducts(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$likedProducts<TRes> {
  factory CopyWith$Query$likedProducts(
    Query$likedProducts instance,
    TRes Function(Query$likedProducts) then,
  ) = _CopyWithImpl$Query$likedProducts;

  factory CopyWith$Query$likedProducts.stub(TRes res) =
      _CopyWithStubImpl$Query$likedProducts;

  TRes call({
    List<Query$likedProducts$likedProducts?>? likedProducts,
    int? likedProductsTotalNumber,
    String? $__typename,
  });
  TRes likedProducts(
      Iterable<Query$likedProducts$likedProducts?>? Function(
              Iterable<
                  CopyWith$Query$likedProducts$likedProducts<
                      Query$likedProducts$likedProducts>?>?)
          _fn);
}

class _CopyWithImpl$Query$likedProducts<TRes>
    implements CopyWith$Query$likedProducts<TRes> {
  _CopyWithImpl$Query$likedProducts(
    this._instance,
    this._then,
  );

  final Query$likedProducts _instance;

  final TRes Function(Query$likedProducts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? likedProducts = _undefined,
    Object? likedProductsTotalNumber = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$likedProducts(
        likedProducts: likedProducts == _undefined
            ? _instance.likedProducts
            : (likedProducts as List<Query$likedProducts$likedProducts?>?),
        likedProductsTotalNumber: likedProductsTotalNumber == _undefined
            ? _instance.likedProductsTotalNumber
            : (likedProductsTotalNumber as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes likedProducts(
          Iterable<Query$likedProducts$likedProducts?>? Function(
                  Iterable<
                      CopyWith$Query$likedProducts$likedProducts<
                          Query$likedProducts$likedProducts>?>?)
              _fn) =>
      call(
          likedProducts: _fn(_instance.likedProducts?.map((e) => e == null
              ? null
              : CopyWith$Query$likedProducts$likedProducts(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$likedProducts<TRes>
    implements CopyWith$Query$likedProducts<TRes> {
  _CopyWithStubImpl$Query$likedProducts(this._res);

  TRes _res;

  call({
    List<Query$likedProducts$likedProducts?>? likedProducts,
    int? likedProductsTotalNumber,
    String? $__typename,
  }) =>
      _res;

  likedProducts(_fn) => _res;
}

const documentNodeQuerylikedProducts = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'likedProducts'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageCount')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageNumber')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'likedProducts'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'pageCount'),
            value: VariableNode(name: NameNode(value: 'pageCount')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageNumber'),
            value: VariableNode(name: NameNode(value: 'pageNumber')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'product'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'description'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'category'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'size'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'seller'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'username'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'isFeatured'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'condition'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'discountPrice'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'condition'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'price'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'parcelSize'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'views'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'likes'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'imagesUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'createdAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'updatedAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'likes'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'userLiked'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'color'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'style'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'materials'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'brand'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: 'likedProductsTotalNumber'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$likedProducts _parserFn$Query$likedProducts(Map<String, dynamic> data) =>
    Query$likedProducts.fromJson(data);
typedef OnQueryComplete$Query$likedProducts = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$likedProducts?,
);

class Options$Query$likedProducts
    extends graphql.QueryOptions<Query$likedProducts> {
  Options$Query$likedProducts({
    String? operationName,
    Variables$Query$likedProducts? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$likedProducts? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$likedProducts? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$likedProducts(data),
                  ),
          onError: onError,
          document: documentNodeQuerylikedProducts,
          parserFn: _parserFn$Query$likedProducts,
        );

  final OnQueryComplete$Query$likedProducts? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$likedProducts
    extends graphql.WatchQueryOptions<Query$likedProducts> {
  WatchOptions$Query$likedProducts({
    String? operationName,
    Variables$Query$likedProducts? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$likedProducts? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQuerylikedProducts,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$likedProducts,
        );
}

class FetchMoreOptions$Query$likedProducts extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$likedProducts({
    required graphql.UpdateQuery updateQuery,
    Variables$Query$likedProducts? variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables?.toJson() ?? {},
          document: documentNodeQuerylikedProducts,
        );
}

extension ClientExtension$Query$likedProducts on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$likedProducts>> query$likedProducts(
          [Options$Query$likedProducts? options]) async =>
      await this.query(options ?? Options$Query$likedProducts());
  graphql.ObservableQuery<Query$likedProducts> watchQuery$likedProducts(
          [WatchOptions$Query$likedProducts? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$likedProducts());
  void writeQuery$likedProducts({
    required Query$likedProducts data,
    Variables$Query$likedProducts? variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation:
              graphql.Operation(document: documentNodeQuerylikedProducts),
          variables: variables?.toJson() ?? const {},
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$likedProducts? readQuery$likedProducts({
    Variables$Query$likedProducts? variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQuerylikedProducts),
        variables: variables?.toJson() ?? const {},
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$likedProducts.fromJson(result);
  }
}

class Query$likedProducts$likedProducts {
  Query$likedProducts$likedProducts({
    this.product,
    this.$__typename = 'LikedProductType',
  });

  factory Query$likedProducts$likedProducts.fromJson(
      Map<String, dynamic> json) {
    final l$product = json['product'];
    final l$$__typename = json['__typename'];
    return Query$likedProducts$likedProducts(
      product: l$product == null
          ? null
          : Query$likedProducts$likedProducts$product.fromJson(
              (l$product as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final Query$likedProducts$likedProducts$product? product;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$product = product;
    _resultData['product'] = l$product?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$product = product;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$product,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$likedProducts$likedProducts ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$product = product;
    final lOther$product = other.product;
    if (l$product != lOther$product) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$likedProducts$likedProducts
    on Query$likedProducts$likedProducts {
  CopyWith$Query$likedProducts$likedProducts<Query$likedProducts$likedProducts>
      get copyWith => CopyWith$Query$likedProducts$likedProducts(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$likedProducts$likedProducts<TRes> {
  factory CopyWith$Query$likedProducts$likedProducts(
    Query$likedProducts$likedProducts instance,
    TRes Function(Query$likedProducts$likedProducts) then,
  ) = _CopyWithImpl$Query$likedProducts$likedProducts;

  factory CopyWith$Query$likedProducts$likedProducts.stub(TRes res) =
      _CopyWithStubImpl$Query$likedProducts$likedProducts;

  TRes call({
    Query$likedProducts$likedProducts$product? product,
    String? $__typename,
  });
  CopyWith$Query$likedProducts$likedProducts$product<TRes> get product;
}

class _CopyWithImpl$Query$likedProducts$likedProducts<TRes>
    implements CopyWith$Query$likedProducts$likedProducts<TRes> {
  _CopyWithImpl$Query$likedProducts$likedProducts(
    this._instance,
    this._then,
  );

  final Query$likedProducts$likedProducts _instance;

  final TRes Function(Query$likedProducts$likedProducts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? product = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$likedProducts$likedProducts(
        product: product == _undefined
            ? _instance.product
            : (product as Query$likedProducts$likedProducts$product?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$likedProducts$likedProducts$product<TRes> get product {
    final local$product = _instance.product;
    return local$product == null
        ? CopyWith$Query$likedProducts$likedProducts$product.stub(
            _then(_instance))
        : CopyWith$Query$likedProducts$likedProducts$product(
            local$product, (e) => call(product: e));
  }
}

class _CopyWithStubImpl$Query$likedProducts$likedProducts<TRes>
    implements CopyWith$Query$likedProducts$likedProducts<TRes> {
  _CopyWithStubImpl$Query$likedProducts$likedProducts(this._res);

  TRes _res;

  call({
    Query$likedProducts$likedProducts$product? product,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$likedProducts$likedProducts$product<TRes> get product =>
      CopyWith$Query$likedProducts$likedProducts$product.stub(_res);
}

class Query$likedProducts$likedProducts$product {
  Query$likedProducts$likedProducts$product({
    required this.id,
    required this.name,
    required this.description,
    this.category,
    this.size,
    this.seller,
    required this.isFeatured,
    this.condition,
    required this.discountPrice,
    this.price,
    this.parcelSize,
    required this.views,
    required this.likes,
    required this.imagesUrl,
    required this.createdAt,
    required this.updatedAt,
    this.userLiked,
    required this.color,
    this.style,
    this.materials,
    this.brand,
    this.$__typename = 'ProductType',
  });

  factory Query$likedProducts$likedProducts$product.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$description = json['description'];
    final l$category = json['category'];
    final l$size = json['size'];
    final l$seller = json['seller'];
    final l$isFeatured = json['isFeatured'];
    final l$condition = json['condition'];
    final l$discountPrice = json['discountPrice'];
    final l$price = json['price'];
    final l$parcelSize = json['parcelSize'];
    final l$views = json['views'];
    final l$likes = json['likes'];
    final l$imagesUrl = json['imagesUrl'];
    final l$createdAt = json['createdAt'];
    final l$updatedAt = json['updatedAt'];
    final l$userLiked = json['userLiked'];
    final l$color = json['color'];
    final l$style = json['style'];
    final l$materials = json['materials'];
    final l$brand = json['brand'];
    final l$$__typename = json['__typename'];
    return Query$likedProducts$likedProducts$product(
      id: (l$id as String),
      name: (l$name as String),
      description: (l$description as String),
      category: l$category == null
          ? null
          : Query$likedProducts$likedProducts$product$category.fromJson(
              (l$category as Map<String, dynamic>)),
      size: l$size == null
          ? null
          : Query$likedProducts$likedProducts$product$size.fromJson(
              (l$size as Map<String, dynamic>)),
      seller: l$seller == null
          ? null
          : Query$likedProducts$likedProducts$product$seller.fromJson(
              (l$seller as Map<String, dynamic>)),
      isFeatured: (l$isFeatured as bool),
      condition: l$condition == null
          ? null
          : fromJson$Enum$ProductsProductConditionChoices(
              (l$condition as String)),
      discountPrice: (l$discountPrice as String),
      price: (l$price as num?)?.toDouble(),
      parcelSize: l$parcelSize == null
          ? null
          : fromJson$Enum$ProductsProductParcelSizeChoices(
              (l$parcelSize as String)),
      views: (l$views as int),
      likes: (l$likes as int),
      imagesUrl:
          (l$imagesUrl as List<dynamic>).map((e) => (e as String)).toList(),
      createdAt: DateTime.parse((l$createdAt as String)),
      updatedAt: DateTime.parse((l$updatedAt as String)),
      userLiked: (l$userLiked as bool?),
      color: (l$color as List<dynamic>).map((e) => (e as String)).toList(),
      style: l$style == null
          ? null
          : fromJson$Enum$ProductsProductStyleChoices((l$style as String)),
      materials: (l$materials as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$likedProducts$likedProducts$product$materials.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      brand: l$brand == null
          ? null
          : Query$likedProducts$likedProducts$product$brand.fromJson(
              (l$brand as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String name;

  final String description;

  final Query$likedProducts$likedProducts$product$category? category;

  final Query$likedProducts$likedProducts$product$size? size;

  final Query$likedProducts$likedProducts$product$seller? seller;

  final bool isFeatured;

  final Enum$ProductsProductConditionChoices? condition;

  final String discountPrice;

  final double? price;

  final Enum$ProductsProductParcelSizeChoices? parcelSize;

  final int views;

  final int likes;

  final List<String> imagesUrl;

  final DateTime createdAt;

  final DateTime updatedAt;

  final bool? userLiked;

  final List<String> color;

  final Enum$ProductsProductStyleChoices? style;

  final List<Query$likedProducts$likedProducts$product$materials?>? materials;

  final Query$likedProducts$likedProducts$product$brand? brand;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$description = description;
    _resultData['description'] = l$description;
    final l$category = category;
    _resultData['category'] = l$category?.toJson();
    final l$size = size;
    _resultData['size'] = l$size?.toJson();
    final l$seller = seller;
    _resultData['seller'] = l$seller?.toJson();
    final l$isFeatured = isFeatured;
    _resultData['isFeatured'] = l$isFeatured;
    final l$condition = condition;
    _resultData['condition'] = l$condition == null
        ? null
        : toJson$Enum$ProductsProductConditionChoices(l$condition);
    final l$discountPrice = discountPrice;
    _resultData['discountPrice'] = l$discountPrice;
    final l$price = price;
    _resultData['price'] = l$price;
    final l$parcelSize = parcelSize;
    _resultData['parcelSize'] = l$parcelSize == null
        ? null
        : toJson$Enum$ProductsProductParcelSizeChoices(l$parcelSize);
    final l$views = views;
    _resultData['views'] = l$views;
    final l$likes = likes;
    _resultData['likes'] = l$likes;
    final l$imagesUrl = imagesUrl;
    _resultData['imagesUrl'] = l$imagesUrl.map((e) => e).toList();
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt.toIso8601String();
    final l$userLiked = userLiked;
    _resultData['userLiked'] = l$userLiked;
    final l$color = color;
    _resultData['color'] = l$color.map((e) => e).toList();
    final l$style = style;
    _resultData['style'] = l$style == null
        ? null
        : toJson$Enum$ProductsProductStyleChoices(l$style);
    final l$materials = materials;
    _resultData['materials'] = l$materials?.map((e) => e?.toJson()).toList();
    final l$brand = brand;
    _resultData['brand'] = l$brand?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$description = description;
    final l$category = category;
    final l$size = size;
    final l$seller = seller;
    final l$isFeatured = isFeatured;
    final l$condition = condition;
    final l$discountPrice = discountPrice;
    final l$price = price;
    final l$parcelSize = parcelSize;
    final l$views = views;
    final l$likes = likes;
    final l$imagesUrl = imagesUrl;
    final l$createdAt = createdAt;
    final l$updatedAt = updatedAt;
    final l$userLiked = userLiked;
    final l$color = color;
    final l$style = style;
    final l$materials = materials;
    final l$brand = brand;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$description,
      l$category,
      l$size,
      l$seller,
      l$isFeatured,
      l$condition,
      l$discountPrice,
      l$price,
      l$parcelSize,
      l$views,
      l$likes,
      Object.hashAll(l$imagesUrl.map((v) => v)),
      l$createdAt,
      l$updatedAt,
      l$userLiked,
      Object.hashAll(l$color.map((v) => v)),
      l$style,
      l$materials == null ? null : Object.hashAll(l$materials.map((v) => v)),
      l$brand,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$likedProducts$likedProducts$product ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (l$description != lOther$description) {
      return false;
    }
    final l$category = category;
    final lOther$category = other.category;
    if (l$category != lOther$category) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (l$size != lOther$size) {
      return false;
    }
    final l$seller = seller;
    final lOther$seller = other.seller;
    if (l$seller != lOther$seller) {
      return false;
    }
    final l$isFeatured = isFeatured;
    final lOther$isFeatured = other.isFeatured;
    if (l$isFeatured != lOther$isFeatured) {
      return false;
    }
    final l$condition = condition;
    final lOther$condition = other.condition;
    if (l$condition != lOther$condition) {
      return false;
    }
    final l$discountPrice = discountPrice;
    final lOther$discountPrice = other.discountPrice;
    if (l$discountPrice != lOther$discountPrice) {
      return false;
    }
    final l$price = price;
    final lOther$price = other.price;
    if (l$price != lOther$price) {
      return false;
    }
    final l$parcelSize = parcelSize;
    final lOther$parcelSize = other.parcelSize;
    if (l$parcelSize != lOther$parcelSize) {
      return false;
    }
    final l$views = views;
    final lOther$views = other.views;
    if (l$views != lOther$views) {
      return false;
    }
    final l$likes = likes;
    final lOther$likes = other.likes;
    if (l$likes != lOther$likes) {
      return false;
    }
    final l$imagesUrl = imagesUrl;
    final lOther$imagesUrl = other.imagesUrl;
    if (l$imagesUrl.length != lOther$imagesUrl.length) {
      return false;
    }
    for (int i = 0; i < l$imagesUrl.length; i++) {
      final l$imagesUrl$entry = l$imagesUrl[i];
      final lOther$imagesUrl$entry = lOther$imagesUrl[i];
      if (l$imagesUrl$entry != lOther$imagesUrl$entry) {
        return false;
      }
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$userLiked = userLiked;
    final lOther$userLiked = other.userLiked;
    if (l$userLiked != lOther$userLiked) {
      return false;
    }
    final l$color = color;
    final lOther$color = other.color;
    if (l$color.length != lOther$color.length) {
      return false;
    }
    for (int i = 0; i < l$color.length; i++) {
      final l$color$entry = l$color[i];
      final lOther$color$entry = lOther$color[i];
      if (l$color$entry != lOther$color$entry) {
        return false;
      }
    }
    final l$style = style;
    final lOther$style = other.style;
    if (l$style != lOther$style) {
      return false;
    }
    final l$materials = materials;
    final lOther$materials = other.materials;
    if (l$materials != null && lOther$materials != null) {
      if (l$materials.length != lOther$materials.length) {
        return false;
      }
      for (int i = 0; i < l$materials.length; i++) {
        final l$materials$entry = l$materials[i];
        final lOther$materials$entry = lOther$materials[i];
        if (l$materials$entry != lOther$materials$entry) {
          return false;
        }
      }
    } else if (l$materials != lOther$materials) {
      return false;
    }
    final l$brand = brand;
    final lOther$brand = other.brand;
    if (l$brand != lOther$brand) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$likedProducts$likedProducts$product
    on Query$likedProducts$likedProducts$product {
  CopyWith$Query$likedProducts$likedProducts$product<
          Query$likedProducts$likedProducts$product>
      get copyWith => CopyWith$Query$likedProducts$likedProducts$product(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$likedProducts$likedProducts$product<TRes> {
  factory CopyWith$Query$likedProducts$likedProducts$product(
    Query$likedProducts$likedProducts$product instance,
    TRes Function(Query$likedProducts$likedProducts$product) then,
  ) = _CopyWithImpl$Query$likedProducts$likedProducts$product;

  factory CopyWith$Query$likedProducts$likedProducts$product.stub(TRes res) =
      _CopyWithStubImpl$Query$likedProducts$likedProducts$product;

  TRes call({
    String? id,
    String? name,
    String? description,
    Query$likedProducts$likedProducts$product$category? category,
    Query$likedProducts$likedProducts$product$size? size,
    Query$likedProducts$likedProducts$product$seller? seller,
    bool? isFeatured,
    Enum$ProductsProductConditionChoices? condition,
    String? discountPrice,
    double? price,
    Enum$ProductsProductParcelSizeChoices? parcelSize,
    int? views,
    int? likes,
    List<String>? imagesUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? userLiked,
    List<String>? color,
    Enum$ProductsProductStyleChoices? style,
    List<Query$likedProducts$likedProducts$product$materials?>? materials,
    Query$likedProducts$likedProducts$product$brand? brand,
    String? $__typename,
  });
  CopyWith$Query$likedProducts$likedProducts$product$category<TRes>
      get category;
  CopyWith$Query$likedProducts$likedProducts$product$size<TRes> get size;
  CopyWith$Query$likedProducts$likedProducts$product$seller<TRes> get seller;
  TRes materials(
      Iterable<Query$likedProducts$likedProducts$product$materials?>? Function(
              Iterable<
                  CopyWith$Query$likedProducts$likedProducts$product$materials<
                      Query$likedProducts$likedProducts$product$materials>?>?)
          _fn);
  CopyWith$Query$likedProducts$likedProducts$product$brand<TRes> get brand;
}

class _CopyWithImpl$Query$likedProducts$likedProducts$product<TRes>
    implements CopyWith$Query$likedProducts$likedProducts$product<TRes> {
  _CopyWithImpl$Query$likedProducts$likedProducts$product(
    this._instance,
    this._then,
  );

  final Query$likedProducts$likedProducts$product _instance;

  final TRes Function(Query$likedProducts$likedProducts$product) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? description = _undefined,
    Object? category = _undefined,
    Object? size = _undefined,
    Object? seller = _undefined,
    Object? isFeatured = _undefined,
    Object? condition = _undefined,
    Object? discountPrice = _undefined,
    Object? price = _undefined,
    Object? parcelSize = _undefined,
    Object? views = _undefined,
    Object? likes = _undefined,
    Object? imagesUrl = _undefined,
    Object? createdAt = _undefined,
    Object? updatedAt = _undefined,
    Object? userLiked = _undefined,
    Object? color = _undefined,
    Object? style = _undefined,
    Object? materials = _undefined,
    Object? brand = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$likedProducts$likedProducts$product(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        description: description == _undefined || description == null
            ? _instance.description
            : (description as String),
        category: category == _undefined
            ? _instance.category
            : (category as Query$likedProducts$likedProducts$product$category?),
        size: size == _undefined
            ? _instance.size
            : (size as Query$likedProducts$likedProducts$product$size?),
        seller: seller == _undefined
            ? _instance.seller
            : (seller as Query$likedProducts$likedProducts$product$seller?),
        isFeatured: isFeatured == _undefined || isFeatured == null
            ? _instance.isFeatured
            : (isFeatured as bool),
        condition: condition == _undefined
            ? _instance.condition
            : (condition as Enum$ProductsProductConditionChoices?),
        discountPrice: discountPrice == _undefined || discountPrice == null
            ? _instance.discountPrice
            : (discountPrice as String),
        price: price == _undefined ? _instance.price : (price as double?),
        parcelSize: parcelSize == _undefined
            ? _instance.parcelSize
            : (parcelSize as Enum$ProductsProductParcelSizeChoices?),
        views: views == _undefined || views == null
            ? _instance.views
            : (views as int),
        likes: likes == _undefined || likes == null
            ? _instance.likes
            : (likes as int),
        imagesUrl: imagesUrl == _undefined || imagesUrl == null
            ? _instance.imagesUrl
            : (imagesUrl as List<String>),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        updatedAt: updatedAt == _undefined || updatedAt == null
            ? _instance.updatedAt
            : (updatedAt as DateTime),
        userLiked: userLiked == _undefined
            ? _instance.userLiked
            : (userLiked as bool?),
        color: color == _undefined || color == null
            ? _instance.color
            : (color as List<String>),
        style: style == _undefined
            ? _instance.style
            : (style as Enum$ProductsProductStyleChoices?),
        materials: materials == _undefined
            ? _instance.materials
            : (materials
                as List<Query$likedProducts$likedProducts$product$materials?>?),
        brand: brand == _undefined
            ? _instance.brand
            : (brand as Query$likedProducts$likedProducts$product$brand?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$likedProducts$likedProducts$product$category<TRes>
      get category {
    final local$category = _instance.category;
    return local$category == null
        ? CopyWith$Query$likedProducts$likedProducts$product$category.stub(
            _then(_instance))
        : CopyWith$Query$likedProducts$likedProducts$product$category(
            local$category, (e) => call(category: e));
  }

  CopyWith$Query$likedProducts$likedProducts$product$size<TRes> get size {
    final local$size = _instance.size;
    return local$size == null
        ? CopyWith$Query$likedProducts$likedProducts$product$size.stub(
            _then(_instance))
        : CopyWith$Query$likedProducts$likedProducts$product$size(
            local$size, (e) => call(size: e));
  }

  CopyWith$Query$likedProducts$likedProducts$product$seller<TRes> get seller {
    final local$seller = _instance.seller;
    return local$seller == null
        ? CopyWith$Query$likedProducts$likedProducts$product$seller.stub(
            _then(_instance))
        : CopyWith$Query$likedProducts$likedProducts$product$seller(
            local$seller, (e) => call(seller: e));
  }

  TRes materials(
          Iterable<Query$likedProducts$likedProducts$product$materials?>? Function(
                  Iterable<
                      CopyWith$Query$likedProducts$likedProducts$product$materials<
                          Query$likedProducts$likedProducts$product$materials>?>?)
              _fn) =>
      call(
          materials: _fn(_instance.materials?.map((e) => e == null
              ? null
              : CopyWith$Query$likedProducts$likedProducts$product$materials(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Query$likedProducts$likedProducts$product$brand<TRes> get brand {
    final local$brand = _instance.brand;
    return local$brand == null
        ? CopyWith$Query$likedProducts$likedProducts$product$brand.stub(
            _then(_instance))
        : CopyWith$Query$likedProducts$likedProducts$product$brand(
            local$brand, (e) => call(brand: e));
  }
}

class _CopyWithStubImpl$Query$likedProducts$likedProducts$product<TRes>
    implements CopyWith$Query$likedProducts$likedProducts$product<TRes> {
  _CopyWithStubImpl$Query$likedProducts$likedProducts$product(this._res);

  TRes _res;

  call({
    String? id,
    String? name,
    String? description,
    Query$likedProducts$likedProducts$product$category? category,
    Query$likedProducts$likedProducts$product$size? size,
    Query$likedProducts$likedProducts$product$seller? seller,
    bool? isFeatured,
    Enum$ProductsProductConditionChoices? condition,
    String? discountPrice,
    double? price,
    Enum$ProductsProductParcelSizeChoices? parcelSize,
    int? views,
    int? likes,
    List<String>? imagesUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    bool? userLiked,
    List<String>? color,
    Enum$ProductsProductStyleChoices? style,
    List<Query$likedProducts$likedProducts$product$materials?>? materials,
    Query$likedProducts$likedProducts$product$brand? brand,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$likedProducts$likedProducts$product$category<TRes>
      get category =>
          CopyWith$Query$likedProducts$likedProducts$product$category.stub(
              _res);

  CopyWith$Query$likedProducts$likedProducts$product$size<TRes> get size =>
      CopyWith$Query$likedProducts$likedProducts$product$size.stub(_res);

  CopyWith$Query$likedProducts$likedProducts$product$seller<TRes> get seller =>
      CopyWith$Query$likedProducts$likedProducts$product$seller.stub(_res);

  materials(_fn) => _res;

  CopyWith$Query$likedProducts$likedProducts$product$brand<TRes> get brand =>
      CopyWith$Query$likedProducts$likedProducts$product$brand.stub(_res);
}

class Query$likedProducts$likedProducts$product$category {
  Query$likedProducts$likedProducts$product$category({
    this.id,
    this.name,
    this.$__typename = 'CategoryType',
  });

  factory Query$likedProducts$likedProducts$product$category.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$likedProducts$likedProducts$product$category(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$likedProducts$likedProducts$product$category ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$likedProducts$likedProducts$product$category
    on Query$likedProducts$likedProducts$product$category {
  CopyWith$Query$likedProducts$likedProducts$product$category<
          Query$likedProducts$likedProducts$product$category>
      get copyWith =>
          CopyWith$Query$likedProducts$likedProducts$product$category(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$likedProducts$likedProducts$product$category<
    TRes> {
  factory CopyWith$Query$likedProducts$likedProducts$product$category(
    Query$likedProducts$likedProducts$product$category instance,
    TRes Function(Query$likedProducts$likedProducts$product$category) then,
  ) = _CopyWithImpl$Query$likedProducts$likedProducts$product$category;

  factory CopyWith$Query$likedProducts$likedProducts$product$category.stub(
          TRes res) =
      _CopyWithStubImpl$Query$likedProducts$likedProducts$product$category;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$likedProducts$likedProducts$product$category<TRes>
    implements
        CopyWith$Query$likedProducts$likedProducts$product$category<TRes> {
  _CopyWithImpl$Query$likedProducts$likedProducts$product$category(
    this._instance,
    this._then,
  );

  final Query$likedProducts$likedProducts$product$category _instance;

  final TRes Function(Query$likedProducts$likedProducts$product$category) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$likedProducts$likedProducts$product$category(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$likedProducts$likedProducts$product$category<TRes>
    implements
        CopyWith$Query$likedProducts$likedProducts$product$category<TRes> {
  _CopyWithStubImpl$Query$likedProducts$likedProducts$product$category(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$likedProducts$likedProducts$product$size {
  Query$likedProducts$likedProducts$product$size({
    this.id,
    this.name,
    this.$__typename = 'SizeType',
  });

  factory Query$likedProducts$likedProducts$product$size.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$likedProducts$likedProducts$product$size(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$likedProducts$likedProducts$product$size ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$likedProducts$likedProducts$product$size
    on Query$likedProducts$likedProducts$product$size {
  CopyWith$Query$likedProducts$likedProducts$product$size<
          Query$likedProducts$likedProducts$product$size>
      get copyWith => CopyWith$Query$likedProducts$likedProducts$product$size(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$likedProducts$likedProducts$product$size<TRes> {
  factory CopyWith$Query$likedProducts$likedProducts$product$size(
    Query$likedProducts$likedProducts$product$size instance,
    TRes Function(Query$likedProducts$likedProducts$product$size) then,
  ) = _CopyWithImpl$Query$likedProducts$likedProducts$product$size;

  factory CopyWith$Query$likedProducts$likedProducts$product$size.stub(
          TRes res) =
      _CopyWithStubImpl$Query$likedProducts$likedProducts$product$size;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$likedProducts$likedProducts$product$size<TRes>
    implements CopyWith$Query$likedProducts$likedProducts$product$size<TRes> {
  _CopyWithImpl$Query$likedProducts$likedProducts$product$size(
    this._instance,
    this._then,
  );

  final Query$likedProducts$likedProducts$product$size _instance;

  final TRes Function(Query$likedProducts$likedProducts$product$size) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$likedProducts$likedProducts$product$size(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$likedProducts$likedProducts$product$size<TRes>
    implements CopyWith$Query$likedProducts$likedProducts$product$size<TRes> {
  _CopyWithStubImpl$Query$likedProducts$likedProducts$product$size(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$likedProducts$likedProducts$product$seller {
  Query$likedProducts$likedProducts$product$seller({
    this.id,
    this.username,
    this.$__typename = 'UserType',
  });

  factory Query$likedProducts$likedProducts$product$seller.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$$__typename = json['__typename'];
    return Query$likedProducts$likedProducts$product$seller(
      id: (l$id as int?),
      username: (l$username as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$likedProducts$likedProducts$product$seller ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$likedProducts$likedProducts$product$seller
    on Query$likedProducts$likedProducts$product$seller {
  CopyWith$Query$likedProducts$likedProducts$product$seller<
          Query$likedProducts$likedProducts$product$seller>
      get copyWith => CopyWith$Query$likedProducts$likedProducts$product$seller(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$likedProducts$likedProducts$product$seller<TRes> {
  factory CopyWith$Query$likedProducts$likedProducts$product$seller(
    Query$likedProducts$likedProducts$product$seller instance,
    TRes Function(Query$likedProducts$likedProducts$product$seller) then,
  ) = _CopyWithImpl$Query$likedProducts$likedProducts$product$seller;

  factory CopyWith$Query$likedProducts$likedProducts$product$seller.stub(
          TRes res) =
      _CopyWithStubImpl$Query$likedProducts$likedProducts$product$seller;

  TRes call({
    int? id,
    String? username,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$likedProducts$likedProducts$product$seller<TRes>
    implements CopyWith$Query$likedProducts$likedProducts$product$seller<TRes> {
  _CopyWithImpl$Query$likedProducts$likedProducts$product$seller(
    this._instance,
    this._then,
  );

  final Query$likedProducts$likedProducts$product$seller _instance;

  final TRes Function(Query$likedProducts$likedProducts$product$seller) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$likedProducts$likedProducts$product$seller(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$likedProducts$likedProducts$product$seller<TRes>
    implements CopyWith$Query$likedProducts$likedProducts$product$seller<TRes> {
  _CopyWithStubImpl$Query$likedProducts$likedProducts$product$seller(this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? $__typename,
  }) =>
      _res;
}

class Query$likedProducts$likedProducts$product$materials {
  Query$likedProducts$likedProducts$product$materials({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$likedProducts$likedProducts$product$materials.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$likedProducts$likedProducts$product$materials(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$likedProducts$likedProducts$product$materials ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$likedProducts$likedProducts$product$materials
    on Query$likedProducts$likedProducts$product$materials {
  CopyWith$Query$likedProducts$likedProducts$product$materials<
          Query$likedProducts$likedProducts$product$materials>
      get copyWith =>
          CopyWith$Query$likedProducts$likedProducts$product$materials(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$likedProducts$likedProducts$product$materials<
    TRes> {
  factory CopyWith$Query$likedProducts$likedProducts$product$materials(
    Query$likedProducts$likedProducts$product$materials instance,
    TRes Function(Query$likedProducts$likedProducts$product$materials) then,
  ) = _CopyWithImpl$Query$likedProducts$likedProducts$product$materials;

  factory CopyWith$Query$likedProducts$likedProducts$product$materials.stub(
          TRes res) =
      _CopyWithStubImpl$Query$likedProducts$likedProducts$product$materials;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$likedProducts$likedProducts$product$materials<TRes>
    implements
        CopyWith$Query$likedProducts$likedProducts$product$materials<TRes> {
  _CopyWithImpl$Query$likedProducts$likedProducts$product$materials(
    this._instance,
    this._then,
  );

  final Query$likedProducts$likedProducts$product$materials _instance;

  final TRes Function(Query$likedProducts$likedProducts$product$materials)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$likedProducts$likedProducts$product$materials(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$likedProducts$likedProducts$product$materials<
        TRes>
    implements
        CopyWith$Query$likedProducts$likedProducts$product$materials<TRes> {
  _CopyWithStubImpl$Query$likedProducts$likedProducts$product$materials(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$likedProducts$likedProducts$product$brand {
  Query$likedProducts$likedProducts$product$brand({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$likedProducts$likedProducts$product$brand.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$likedProducts$likedProducts$product$brand(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$likedProducts$likedProducts$product$brand ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$likedProducts$likedProducts$product$brand
    on Query$likedProducts$likedProducts$product$brand {
  CopyWith$Query$likedProducts$likedProducts$product$brand<
          Query$likedProducts$likedProducts$product$brand>
      get copyWith => CopyWith$Query$likedProducts$likedProducts$product$brand(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$likedProducts$likedProducts$product$brand<TRes> {
  factory CopyWith$Query$likedProducts$likedProducts$product$brand(
    Query$likedProducts$likedProducts$product$brand instance,
    TRes Function(Query$likedProducts$likedProducts$product$brand) then,
  ) = _CopyWithImpl$Query$likedProducts$likedProducts$product$brand;

  factory CopyWith$Query$likedProducts$likedProducts$product$brand.stub(
          TRes res) =
      _CopyWithStubImpl$Query$likedProducts$likedProducts$product$brand;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$likedProducts$likedProducts$product$brand<TRes>
    implements CopyWith$Query$likedProducts$likedProducts$product$brand<TRes> {
  _CopyWithImpl$Query$likedProducts$likedProducts$product$brand(
    this._instance,
    this._then,
  );

  final Query$likedProducts$likedProducts$product$brand _instance;

  final TRes Function(Query$likedProducts$likedProducts$product$brand) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$likedProducts$likedProducts$product$brand(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$likedProducts$likedProducts$product$brand<TRes>
    implements CopyWith$Query$likedProducts$likedProducts$product$brand<TRes> {
  _CopyWithStubImpl$Query$likedProducts$likedProducts$product$brand(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$Brands {
  factory Variables$Query$Brands({
    String? search,
    int? pageCount,
    int? pageNumber,
  }) =>
      Variables$Query$Brands._({
        if (search != null) r'search': search,
        if (pageCount != null) r'pageCount': pageCount,
        if (pageNumber != null) r'pageNumber': pageNumber,
      });

  Variables$Query$Brands._(this._$data);

  factory Variables$Query$Brands.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('search')) {
      final l$search = data['search'];
      result$data['search'] = (l$search as String?);
    }
    if (data.containsKey('pageCount')) {
      final l$pageCount = data['pageCount'];
      result$data['pageCount'] = (l$pageCount as int?);
    }
    if (data.containsKey('pageNumber')) {
      final l$pageNumber = data['pageNumber'];
      result$data['pageNumber'] = (l$pageNumber as int?);
    }
    return Variables$Query$Brands._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get search => (_$data['search'] as String?);

  int? get pageCount => (_$data['pageCount'] as int?);

  int? get pageNumber => (_$data['pageNumber'] as int?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('search')) {
      final l$search = search;
      result$data['search'] = l$search;
    }
    if (_$data.containsKey('pageCount')) {
      final l$pageCount = pageCount;
      result$data['pageCount'] = l$pageCount;
    }
    if (_$data.containsKey('pageNumber')) {
      final l$pageNumber = pageNumber;
      result$data['pageNumber'] = l$pageNumber;
    }
    return result$data;
  }

  CopyWith$Variables$Query$Brands<Variables$Query$Brands> get copyWith =>
      CopyWith$Variables$Query$Brands(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$Brands || runtimeType != other.runtimeType) {
      return false;
    }
    final l$search = search;
    final lOther$search = other.search;
    if (_$data.containsKey('search') != other._$data.containsKey('search')) {
      return false;
    }
    if (l$search != lOther$search) {
      return false;
    }
    final l$pageCount = pageCount;
    final lOther$pageCount = other.pageCount;
    if (_$data.containsKey('pageCount') !=
        other._$data.containsKey('pageCount')) {
      return false;
    }
    if (l$pageCount != lOther$pageCount) {
      return false;
    }
    final l$pageNumber = pageNumber;
    final lOther$pageNumber = other.pageNumber;
    if (_$data.containsKey('pageNumber') !=
        other._$data.containsKey('pageNumber')) {
      return false;
    }
    if (l$pageNumber != lOther$pageNumber) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$search = search;
    final l$pageCount = pageCount;
    final l$pageNumber = pageNumber;
    return Object.hashAll([
      _$data.containsKey('search') ? l$search : const {},
      _$data.containsKey('pageCount') ? l$pageCount : const {},
      _$data.containsKey('pageNumber') ? l$pageNumber : const {},
    ]);
  }
}

abstract class CopyWith$Variables$Query$Brands<TRes> {
  factory CopyWith$Variables$Query$Brands(
    Variables$Query$Brands instance,
    TRes Function(Variables$Query$Brands) then,
  ) = _CopyWithImpl$Variables$Query$Brands;

  factory CopyWith$Variables$Query$Brands.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$Brands;

  TRes call({
    String? search,
    int? pageCount,
    int? pageNumber,
  });
}

class _CopyWithImpl$Variables$Query$Brands<TRes>
    implements CopyWith$Variables$Query$Brands<TRes> {
  _CopyWithImpl$Variables$Query$Brands(
    this._instance,
    this._then,
  );

  final Variables$Query$Brands _instance;

  final TRes Function(Variables$Query$Brands) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? search = _undefined,
    Object? pageCount = _undefined,
    Object? pageNumber = _undefined,
  }) =>
      _then(Variables$Query$Brands._({
        ..._instance._$data,
        if (search != _undefined) 'search': (search as String?),
        if (pageCount != _undefined) 'pageCount': (pageCount as int?),
        if (pageNumber != _undefined) 'pageNumber': (pageNumber as int?),
      }));
}

class _CopyWithStubImpl$Variables$Query$Brands<TRes>
    implements CopyWith$Variables$Query$Brands<TRes> {
  _CopyWithStubImpl$Variables$Query$Brands(this._res);

  TRes _res;

  call({
    String? search,
    int? pageCount,
    int? pageNumber,
  }) =>
      _res;
}

class Query$Brands {
  Query$Brands({
    this.brands,
    this.brandsTotalNumber,
    this.$__typename = 'Query',
  });

  factory Query$Brands.fromJson(Map<String, dynamic> json) {
    final l$brands = json['brands'];
    final l$brandsTotalNumber = json['brandsTotalNumber'];
    final l$$__typename = json['__typename'];
    return Query$Brands(
      brands: (l$brands as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$Brands$brands.fromJson((e as Map<String, dynamic>)))
          .toList(),
      brandsTotalNumber: (l$brandsTotalNumber as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$Brands$brands?>? brands;

  final int? brandsTotalNumber;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$brands = brands;
    _resultData['brands'] = l$brands?.map((e) => e?.toJson()).toList();
    final l$brandsTotalNumber = brandsTotalNumber;
    _resultData['brandsTotalNumber'] = l$brandsTotalNumber;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$brands = brands;
    final l$brandsTotalNumber = brandsTotalNumber;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$brands == null ? null : Object.hashAll(l$brands.map((v) => v)),
      l$brandsTotalNumber,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Brands || runtimeType != other.runtimeType) {
      return false;
    }
    final l$brands = brands;
    final lOther$brands = other.brands;
    if (l$brands != null && lOther$brands != null) {
      if (l$brands.length != lOther$brands.length) {
        return false;
      }
      for (int i = 0; i < l$brands.length; i++) {
        final l$brands$entry = l$brands[i];
        final lOther$brands$entry = lOther$brands[i];
        if (l$brands$entry != lOther$brands$entry) {
          return false;
        }
      }
    } else if (l$brands != lOther$brands) {
      return false;
    }
    final l$brandsTotalNumber = brandsTotalNumber;
    final lOther$brandsTotalNumber = other.brandsTotalNumber;
    if (l$brandsTotalNumber != lOther$brandsTotalNumber) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Brands on Query$Brands {
  CopyWith$Query$Brands<Query$Brands> get copyWith => CopyWith$Query$Brands(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$Brands<TRes> {
  factory CopyWith$Query$Brands(
    Query$Brands instance,
    TRes Function(Query$Brands) then,
  ) = _CopyWithImpl$Query$Brands;

  factory CopyWith$Query$Brands.stub(TRes res) = _CopyWithStubImpl$Query$Brands;

  TRes call({
    List<Query$Brands$brands?>? brands,
    int? brandsTotalNumber,
    String? $__typename,
  });
  TRes brands(
      Iterable<Query$Brands$brands?>? Function(
              Iterable<CopyWith$Query$Brands$brands<Query$Brands$brands>?>?)
          _fn);
}

class _CopyWithImpl$Query$Brands<TRes> implements CopyWith$Query$Brands<TRes> {
  _CopyWithImpl$Query$Brands(
    this._instance,
    this._then,
  );

  final Query$Brands _instance;

  final TRes Function(Query$Brands) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? brands = _undefined,
    Object? brandsTotalNumber = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Brands(
        brands: brands == _undefined
            ? _instance.brands
            : (brands as List<Query$Brands$brands?>?),
        brandsTotalNumber: brandsTotalNumber == _undefined
            ? _instance.brandsTotalNumber
            : (brandsTotalNumber as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes brands(
          Iterable<Query$Brands$brands?>? Function(
                  Iterable<CopyWith$Query$Brands$brands<Query$Brands$brands>?>?)
              _fn) =>
      call(
          brands: _fn(_instance.brands?.map((e) => e == null
              ? null
              : CopyWith$Query$Brands$brands(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$Brands<TRes>
    implements CopyWith$Query$Brands<TRes> {
  _CopyWithStubImpl$Query$Brands(this._res);

  TRes _res;

  call({
    List<Query$Brands$brands?>? brands,
    int? brandsTotalNumber,
    String? $__typename,
  }) =>
      _res;

  brands(_fn) => _res;
}

const documentNodeQueryBrands = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'Brands'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'search')),
        type: NamedTypeNode(
          name: NameNode(value: 'String'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageCount')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageNumber')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'brands'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'search'),
            value: VariableNode(name: NameNode(value: 'search')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageCount'),
            value: VariableNode(name: NameNode(value: 'pageCount')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageNumber'),
            value: VariableNode(name: NameNode(value: 'pageNumber')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: 'brandsTotalNumber'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$Brands _parserFn$Query$Brands(Map<String, dynamic> data) =>
    Query$Brands.fromJson(data);
typedef OnQueryComplete$Query$Brands = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$Brands?,
);

class Options$Query$Brands extends graphql.QueryOptions<Query$Brands> {
  Options$Query$Brands({
    String? operationName,
    Variables$Query$Brands? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$Brands? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$Brands? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$Brands(data),
                  ),
          onError: onError,
          document: documentNodeQueryBrands,
          parserFn: _parserFn$Query$Brands,
        );

  final OnQueryComplete$Query$Brands? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$Brands
    extends graphql.WatchQueryOptions<Query$Brands> {
  WatchOptions$Query$Brands({
    String? operationName,
    Variables$Query$Brands? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$Brands? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryBrands,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$Brands,
        );
}

class FetchMoreOptions$Query$Brands extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$Brands({
    required graphql.UpdateQuery updateQuery,
    Variables$Query$Brands? variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables?.toJson() ?? {},
          document: documentNodeQueryBrands,
        );
}

extension ClientExtension$Query$Brands on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$Brands>> query$Brands(
          [Options$Query$Brands? options]) async =>
      await this.query(options ?? Options$Query$Brands());
  graphql.ObservableQuery<Query$Brands> watchQuery$Brands(
          [WatchOptions$Query$Brands? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$Brands());
  void writeQuery$Brands({
    required Query$Brands data,
    Variables$Query$Brands? variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation: graphql.Operation(document: documentNodeQueryBrands),
          variables: variables?.toJson() ?? const {},
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$Brands? readQuery$Brands({
    Variables$Query$Brands? variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQueryBrands),
        variables: variables?.toJson() ?? const {},
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$Brands.fromJson(result);
  }
}

class Query$Brands$brands {
  Query$Brands$brands({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$Brands$brands.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$Brands$brands(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Brands$brands || runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Brands$brands on Query$Brands$brands {
  CopyWith$Query$Brands$brands<Query$Brands$brands> get copyWith =>
      CopyWith$Query$Brands$brands(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$Brands$brands<TRes> {
  factory CopyWith$Query$Brands$brands(
    Query$Brands$brands instance,
    TRes Function(Query$Brands$brands) then,
  ) = _CopyWithImpl$Query$Brands$brands;

  factory CopyWith$Query$Brands$brands.stub(TRes res) =
      _CopyWithStubImpl$Query$Brands$brands;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Brands$brands<TRes>
    implements CopyWith$Query$Brands$brands<TRes> {
  _CopyWithImpl$Query$Brands$brands(
    this._instance,
    this._then,
  );

  final Query$Brands$brands _instance;

  final TRes Function(Query$Brands$brands) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Brands$brands(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Brands$brands<TRes>
    implements CopyWith$Query$Brands$brands<TRes> {
  _CopyWithStubImpl$Query$Brands$brands(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$Materials {
  factory Variables$Query$Materials({
    String? search,
    int? pageCount,
    int? pageNumber,
  }) =>
      Variables$Query$Materials._({
        if (search != null) r'search': search,
        if (pageCount != null) r'pageCount': pageCount,
        if (pageNumber != null) r'pageNumber': pageNumber,
      });

  Variables$Query$Materials._(this._$data);

  factory Variables$Query$Materials.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('search')) {
      final l$search = data['search'];
      result$data['search'] = (l$search as String?);
    }
    if (data.containsKey('pageCount')) {
      final l$pageCount = data['pageCount'];
      result$data['pageCount'] = (l$pageCount as int?);
    }
    if (data.containsKey('pageNumber')) {
      final l$pageNumber = data['pageNumber'];
      result$data['pageNumber'] = (l$pageNumber as int?);
    }
    return Variables$Query$Materials._(result$data);
  }

  Map<String, dynamic> _$data;

  String? get search => (_$data['search'] as String?);

  int? get pageCount => (_$data['pageCount'] as int?);

  int? get pageNumber => (_$data['pageNumber'] as int?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('search')) {
      final l$search = search;
      result$data['search'] = l$search;
    }
    if (_$data.containsKey('pageCount')) {
      final l$pageCount = pageCount;
      result$data['pageCount'] = l$pageCount;
    }
    if (_$data.containsKey('pageNumber')) {
      final l$pageNumber = pageNumber;
      result$data['pageNumber'] = l$pageNumber;
    }
    return result$data;
  }

  CopyWith$Variables$Query$Materials<Variables$Query$Materials> get copyWith =>
      CopyWith$Variables$Query$Materials(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$Materials ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$search = search;
    final lOther$search = other.search;
    if (_$data.containsKey('search') != other._$data.containsKey('search')) {
      return false;
    }
    if (l$search != lOther$search) {
      return false;
    }
    final l$pageCount = pageCount;
    final lOther$pageCount = other.pageCount;
    if (_$data.containsKey('pageCount') !=
        other._$data.containsKey('pageCount')) {
      return false;
    }
    if (l$pageCount != lOther$pageCount) {
      return false;
    }
    final l$pageNumber = pageNumber;
    final lOther$pageNumber = other.pageNumber;
    if (_$data.containsKey('pageNumber') !=
        other._$data.containsKey('pageNumber')) {
      return false;
    }
    if (l$pageNumber != lOther$pageNumber) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$search = search;
    final l$pageCount = pageCount;
    final l$pageNumber = pageNumber;
    return Object.hashAll([
      _$data.containsKey('search') ? l$search : const {},
      _$data.containsKey('pageCount') ? l$pageCount : const {},
      _$data.containsKey('pageNumber') ? l$pageNumber : const {},
    ]);
  }
}

abstract class CopyWith$Variables$Query$Materials<TRes> {
  factory CopyWith$Variables$Query$Materials(
    Variables$Query$Materials instance,
    TRes Function(Variables$Query$Materials) then,
  ) = _CopyWithImpl$Variables$Query$Materials;

  factory CopyWith$Variables$Query$Materials.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$Materials;

  TRes call({
    String? search,
    int? pageCount,
    int? pageNumber,
  });
}

class _CopyWithImpl$Variables$Query$Materials<TRes>
    implements CopyWith$Variables$Query$Materials<TRes> {
  _CopyWithImpl$Variables$Query$Materials(
    this._instance,
    this._then,
  );

  final Variables$Query$Materials _instance;

  final TRes Function(Variables$Query$Materials) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? search = _undefined,
    Object? pageCount = _undefined,
    Object? pageNumber = _undefined,
  }) =>
      _then(Variables$Query$Materials._({
        ..._instance._$data,
        if (search != _undefined) 'search': (search as String?),
        if (pageCount != _undefined) 'pageCount': (pageCount as int?),
        if (pageNumber != _undefined) 'pageNumber': (pageNumber as int?),
      }));
}

class _CopyWithStubImpl$Variables$Query$Materials<TRes>
    implements CopyWith$Variables$Query$Materials<TRes> {
  _CopyWithStubImpl$Variables$Query$Materials(this._res);

  TRes _res;

  call({
    String? search,
    int? pageCount,
    int? pageNumber,
  }) =>
      _res;
}

class Query$Materials {
  Query$Materials({
    this.materials,
    this.materialsTotalNumber,
    this.$__typename = 'Query',
  });

  factory Query$Materials.fromJson(Map<String, dynamic> json) {
    final l$materials = json['materials'];
    final l$materialsTotalNumber = json['materialsTotalNumber'];
    final l$$__typename = json['__typename'];
    return Query$Materials(
      materials: (l$materials as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$Materials$materials.fromJson((e as Map<String, dynamic>)))
          .toList(),
      materialsTotalNumber: (l$materialsTotalNumber as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$Materials$materials?>? materials;

  final int? materialsTotalNumber;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$materials = materials;
    _resultData['materials'] = l$materials?.map((e) => e?.toJson()).toList();
    final l$materialsTotalNumber = materialsTotalNumber;
    _resultData['materialsTotalNumber'] = l$materialsTotalNumber;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$materials = materials;
    final l$materialsTotalNumber = materialsTotalNumber;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$materials == null ? null : Object.hashAll(l$materials.map((v) => v)),
      l$materialsTotalNumber,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Materials || runtimeType != other.runtimeType) {
      return false;
    }
    final l$materials = materials;
    final lOther$materials = other.materials;
    if (l$materials != null && lOther$materials != null) {
      if (l$materials.length != lOther$materials.length) {
        return false;
      }
      for (int i = 0; i < l$materials.length; i++) {
        final l$materials$entry = l$materials[i];
        final lOther$materials$entry = lOther$materials[i];
        if (l$materials$entry != lOther$materials$entry) {
          return false;
        }
      }
    } else if (l$materials != lOther$materials) {
      return false;
    }
    final l$materialsTotalNumber = materialsTotalNumber;
    final lOther$materialsTotalNumber = other.materialsTotalNumber;
    if (l$materialsTotalNumber != lOther$materialsTotalNumber) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Materials on Query$Materials {
  CopyWith$Query$Materials<Query$Materials> get copyWith =>
      CopyWith$Query$Materials(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$Materials<TRes> {
  factory CopyWith$Query$Materials(
    Query$Materials instance,
    TRes Function(Query$Materials) then,
  ) = _CopyWithImpl$Query$Materials;

  factory CopyWith$Query$Materials.stub(TRes res) =
      _CopyWithStubImpl$Query$Materials;

  TRes call({
    List<Query$Materials$materials?>? materials,
    int? materialsTotalNumber,
    String? $__typename,
  });
  TRes materials(
      Iterable<Query$Materials$materials?>? Function(
              Iterable<
                  CopyWith$Query$Materials$materials<
                      Query$Materials$materials>?>?)
          _fn);
}

class _CopyWithImpl$Query$Materials<TRes>
    implements CopyWith$Query$Materials<TRes> {
  _CopyWithImpl$Query$Materials(
    this._instance,
    this._then,
  );

  final Query$Materials _instance;

  final TRes Function(Query$Materials) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? materials = _undefined,
    Object? materialsTotalNumber = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Materials(
        materials: materials == _undefined
            ? _instance.materials
            : (materials as List<Query$Materials$materials?>?),
        materialsTotalNumber: materialsTotalNumber == _undefined
            ? _instance.materialsTotalNumber
            : (materialsTotalNumber as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes materials(
          Iterable<Query$Materials$materials?>? Function(
                  Iterable<
                      CopyWith$Query$Materials$materials<
                          Query$Materials$materials>?>?)
              _fn) =>
      call(
          materials: _fn(_instance.materials?.map((e) => e == null
              ? null
              : CopyWith$Query$Materials$materials(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$Materials<TRes>
    implements CopyWith$Query$Materials<TRes> {
  _CopyWithStubImpl$Query$Materials(this._res);

  TRes _res;

  call({
    List<Query$Materials$materials?>? materials,
    int? materialsTotalNumber,
    String? $__typename,
  }) =>
      _res;

  materials(_fn) => _res;
}

const documentNodeQueryMaterials = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'Materials'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'search')),
        type: NamedTypeNode(
          name: NameNode(value: 'String'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageCount')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageNumber')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'materials'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'search'),
            value: VariableNode(name: NameNode(value: 'search')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageCount'),
            value: VariableNode(name: NameNode(value: 'pageCount')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageNumber'),
            value: VariableNode(name: NameNode(value: 'pageNumber')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: 'materialsTotalNumber'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$Materials _parserFn$Query$Materials(Map<String, dynamic> data) =>
    Query$Materials.fromJson(data);
typedef OnQueryComplete$Query$Materials = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$Materials?,
);

class Options$Query$Materials extends graphql.QueryOptions<Query$Materials> {
  Options$Query$Materials({
    String? operationName,
    Variables$Query$Materials? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$Materials? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$Materials? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$Materials(data),
                  ),
          onError: onError,
          document: documentNodeQueryMaterials,
          parserFn: _parserFn$Query$Materials,
        );

  final OnQueryComplete$Query$Materials? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$Materials
    extends graphql.WatchQueryOptions<Query$Materials> {
  WatchOptions$Query$Materials({
    String? operationName,
    Variables$Query$Materials? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$Materials? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryMaterials,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$Materials,
        );
}

class FetchMoreOptions$Query$Materials extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$Materials({
    required graphql.UpdateQuery updateQuery,
    Variables$Query$Materials? variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables?.toJson() ?? {},
          document: documentNodeQueryMaterials,
        );
}

extension ClientExtension$Query$Materials on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$Materials>> query$Materials(
          [Options$Query$Materials? options]) async =>
      await this.query(options ?? Options$Query$Materials());
  graphql.ObservableQuery<Query$Materials> watchQuery$Materials(
          [WatchOptions$Query$Materials? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$Materials());
  void writeQuery$Materials({
    required Query$Materials data,
    Variables$Query$Materials? variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation: graphql.Operation(document: documentNodeQueryMaterials),
          variables: variables?.toJson() ?? const {},
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$Materials? readQuery$Materials({
    Variables$Query$Materials? variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQueryMaterials),
        variables: variables?.toJson() ?? const {},
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$Materials.fromJson(result);
  }
}

class Query$Materials$materials {
  Query$Materials$materials({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$Materials$materials.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$Materials$materials(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Materials$materials ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Materials$materials
    on Query$Materials$materials {
  CopyWith$Query$Materials$materials<Query$Materials$materials> get copyWith =>
      CopyWith$Query$Materials$materials(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$Materials$materials<TRes> {
  factory CopyWith$Query$Materials$materials(
    Query$Materials$materials instance,
    TRes Function(Query$Materials$materials) then,
  ) = _CopyWithImpl$Query$Materials$materials;

  factory CopyWith$Query$Materials$materials.stub(TRes res) =
      _CopyWithStubImpl$Query$Materials$materials;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Materials$materials<TRes>
    implements CopyWith$Query$Materials$materials<TRes> {
  _CopyWithImpl$Query$Materials$materials(
    this._instance,
    this._then,
  );

  final Query$Materials$materials _instance;

  final TRes Function(Query$Materials$materials) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Materials$materials(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Materials$materials<TRes>
    implements CopyWith$Query$Materials$materials<TRes> {
  _CopyWithStubImpl$Query$Materials$materials(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$SimilarProducts {
  factory Variables$Query$SimilarProducts({
    int? productId,
    int? categoryId,
    int? pageCount,
    int? pageNumber,
  }) =>
      Variables$Query$SimilarProducts._({
        if (productId != null) r'productId': productId,
        if (categoryId != null) r'categoryId': categoryId,
        if (pageCount != null) r'pageCount': pageCount,
        if (pageNumber != null) r'pageNumber': pageNumber,
      });

  Variables$Query$SimilarProducts._(this._$data);

  factory Variables$Query$SimilarProducts.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('productId')) {
      final l$productId = data['productId'];
      result$data['productId'] = (l$productId as int?);
    }
    if (data.containsKey('categoryId')) {
      final l$categoryId = data['categoryId'];
      result$data['categoryId'] = (l$categoryId as int?);
    }
    if (data.containsKey('pageCount')) {
      final l$pageCount = data['pageCount'];
      result$data['pageCount'] = (l$pageCount as int?);
    }
    if (data.containsKey('pageNumber')) {
      final l$pageNumber = data['pageNumber'];
      result$data['pageNumber'] = (l$pageNumber as int?);
    }
    return Variables$Query$SimilarProducts._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get productId => (_$data['productId'] as int?);

  int? get categoryId => (_$data['categoryId'] as int?);

  int? get pageCount => (_$data['pageCount'] as int?);

  int? get pageNumber => (_$data['pageNumber'] as int?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('productId')) {
      final l$productId = productId;
      result$data['productId'] = l$productId;
    }
    if (_$data.containsKey('categoryId')) {
      final l$categoryId = categoryId;
      result$data['categoryId'] = l$categoryId;
    }
    if (_$data.containsKey('pageCount')) {
      final l$pageCount = pageCount;
      result$data['pageCount'] = l$pageCount;
    }
    if (_$data.containsKey('pageNumber')) {
      final l$pageNumber = pageNumber;
      result$data['pageNumber'] = l$pageNumber;
    }
    return result$data;
  }

  CopyWith$Variables$Query$SimilarProducts<Variables$Query$SimilarProducts>
      get copyWith => CopyWith$Variables$Query$SimilarProducts(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$SimilarProducts ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$productId = productId;
    final lOther$productId = other.productId;
    if (_$data.containsKey('productId') !=
        other._$data.containsKey('productId')) {
      return false;
    }
    if (l$productId != lOther$productId) {
      return false;
    }
    final l$categoryId = categoryId;
    final lOther$categoryId = other.categoryId;
    if (_$data.containsKey('categoryId') !=
        other._$data.containsKey('categoryId')) {
      return false;
    }
    if (l$categoryId != lOther$categoryId) {
      return false;
    }
    final l$pageCount = pageCount;
    final lOther$pageCount = other.pageCount;
    if (_$data.containsKey('pageCount') !=
        other._$data.containsKey('pageCount')) {
      return false;
    }
    if (l$pageCount != lOther$pageCount) {
      return false;
    }
    final l$pageNumber = pageNumber;
    final lOther$pageNumber = other.pageNumber;
    if (_$data.containsKey('pageNumber') !=
        other._$data.containsKey('pageNumber')) {
      return false;
    }
    if (l$pageNumber != lOther$pageNumber) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$productId = productId;
    final l$categoryId = categoryId;
    final l$pageCount = pageCount;
    final l$pageNumber = pageNumber;
    return Object.hashAll([
      _$data.containsKey('productId') ? l$productId : const {},
      _$data.containsKey('categoryId') ? l$categoryId : const {},
      _$data.containsKey('pageCount') ? l$pageCount : const {},
      _$data.containsKey('pageNumber') ? l$pageNumber : const {},
    ]);
  }
}

abstract class CopyWith$Variables$Query$SimilarProducts<TRes> {
  factory CopyWith$Variables$Query$SimilarProducts(
    Variables$Query$SimilarProducts instance,
    TRes Function(Variables$Query$SimilarProducts) then,
  ) = _CopyWithImpl$Variables$Query$SimilarProducts;

  factory CopyWith$Variables$Query$SimilarProducts.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$SimilarProducts;

  TRes call({
    int? productId,
    int? categoryId,
    int? pageCount,
    int? pageNumber,
  });
}

class _CopyWithImpl$Variables$Query$SimilarProducts<TRes>
    implements CopyWith$Variables$Query$SimilarProducts<TRes> {
  _CopyWithImpl$Variables$Query$SimilarProducts(
    this._instance,
    this._then,
  );

  final Variables$Query$SimilarProducts _instance;

  final TRes Function(Variables$Query$SimilarProducts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? productId = _undefined,
    Object? categoryId = _undefined,
    Object? pageCount = _undefined,
    Object? pageNumber = _undefined,
  }) =>
      _then(Variables$Query$SimilarProducts._({
        ..._instance._$data,
        if (productId != _undefined) 'productId': (productId as int?),
        if (categoryId != _undefined) 'categoryId': (categoryId as int?),
        if (pageCount != _undefined) 'pageCount': (pageCount as int?),
        if (pageNumber != _undefined) 'pageNumber': (pageNumber as int?),
      }));
}

class _CopyWithStubImpl$Variables$Query$SimilarProducts<TRes>
    implements CopyWith$Variables$Query$SimilarProducts<TRes> {
  _CopyWithStubImpl$Variables$Query$SimilarProducts(this._res);

  TRes _res;

  call({
    int? productId,
    int? categoryId,
    int? pageCount,
    int? pageNumber,
  }) =>
      _res;
}

class Query$SimilarProducts {
  Query$SimilarProducts({
    this.similarProducts,
    this.$__typename = 'Query',
  });

  factory Query$SimilarProducts.fromJson(Map<String, dynamic> json) {
    final l$similarProducts = json['similarProducts'];
    final l$$__typename = json['__typename'];
    return Query$SimilarProducts(
      similarProducts: (l$similarProducts as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$SimilarProducts$similarProducts.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$SimilarProducts$similarProducts?>? similarProducts;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$similarProducts = similarProducts;
    _resultData['similarProducts'] =
        l$similarProducts?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$similarProducts = similarProducts;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$similarProducts == null
          ? null
          : Object.hashAll(l$similarProducts.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$SimilarProducts || runtimeType != other.runtimeType) {
      return false;
    }
    final l$similarProducts = similarProducts;
    final lOther$similarProducts = other.similarProducts;
    if (l$similarProducts != null && lOther$similarProducts != null) {
      if (l$similarProducts.length != lOther$similarProducts.length) {
        return false;
      }
      for (int i = 0; i < l$similarProducts.length; i++) {
        final l$similarProducts$entry = l$similarProducts[i];
        final lOther$similarProducts$entry = lOther$similarProducts[i];
        if (l$similarProducts$entry != lOther$similarProducts$entry) {
          return false;
        }
      }
    } else if (l$similarProducts != lOther$similarProducts) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$SimilarProducts on Query$SimilarProducts {
  CopyWith$Query$SimilarProducts<Query$SimilarProducts> get copyWith =>
      CopyWith$Query$SimilarProducts(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$SimilarProducts<TRes> {
  factory CopyWith$Query$SimilarProducts(
    Query$SimilarProducts instance,
    TRes Function(Query$SimilarProducts) then,
  ) = _CopyWithImpl$Query$SimilarProducts;

  factory CopyWith$Query$SimilarProducts.stub(TRes res) =
      _CopyWithStubImpl$Query$SimilarProducts;

  TRes call({
    List<Query$SimilarProducts$similarProducts?>? similarProducts,
    String? $__typename,
  });
  TRes similarProducts(
      Iterable<Query$SimilarProducts$similarProducts?>? Function(
              Iterable<
                  CopyWith$Query$SimilarProducts$similarProducts<
                      Query$SimilarProducts$similarProducts>?>?)
          _fn);
}

class _CopyWithImpl$Query$SimilarProducts<TRes>
    implements CopyWith$Query$SimilarProducts<TRes> {
  _CopyWithImpl$Query$SimilarProducts(
    this._instance,
    this._then,
  );

  final Query$SimilarProducts _instance;

  final TRes Function(Query$SimilarProducts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? similarProducts = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$SimilarProducts(
        similarProducts: similarProducts == _undefined
            ? _instance.similarProducts
            : (similarProducts
                as List<Query$SimilarProducts$similarProducts?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes similarProducts(
          Iterable<Query$SimilarProducts$similarProducts?>? Function(
                  Iterable<
                      CopyWith$Query$SimilarProducts$similarProducts<
                          Query$SimilarProducts$similarProducts>?>?)
              _fn) =>
      call(
          similarProducts: _fn(_instance.similarProducts?.map((e) => e == null
              ? null
              : CopyWith$Query$SimilarProducts$similarProducts(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$SimilarProducts<TRes>
    implements CopyWith$Query$SimilarProducts<TRes> {
  _CopyWithStubImpl$Query$SimilarProducts(this._res);

  TRes _res;

  call({
    List<Query$SimilarProducts$similarProducts?>? similarProducts,
    String? $__typename,
  }) =>
      _res;

  similarProducts(_fn) => _res;
}

const documentNodeQuerySimilarProducts = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'SimilarProducts'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'productId')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'categoryId')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageCount')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageNumber')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'similarProducts'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'productId'),
            value: VariableNode(name: NameNode(value: 'productId')),
          ),
          ArgumentNode(
            name: NameNode(value: 'categoryId'),
            value: VariableNode(name: NameNode(value: 'categoryId')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageCount'),
            value: VariableNode(name: NameNode(value: 'pageCount')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageNumber'),
            value: VariableNode(name: NameNode(value: 'pageNumber')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'category'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'isFeatured'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'size'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'seller'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'condition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'discountPrice'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'condition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'price'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'parcelSize'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'views'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'likes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'userLiked'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'imagesUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'likes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'color'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'style'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'materials'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'brand'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$SimilarProducts _parserFn$Query$SimilarProducts(
        Map<String, dynamic> data) =>
    Query$SimilarProducts.fromJson(data);
typedef OnQueryComplete$Query$SimilarProducts = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$SimilarProducts?,
);

class Options$Query$SimilarProducts
    extends graphql.QueryOptions<Query$SimilarProducts> {
  Options$Query$SimilarProducts({
    String? operationName,
    Variables$Query$SimilarProducts? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$SimilarProducts? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$SimilarProducts? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$SimilarProducts(data),
                  ),
          onError: onError,
          document: documentNodeQuerySimilarProducts,
          parserFn: _parserFn$Query$SimilarProducts,
        );

  final OnQueryComplete$Query$SimilarProducts? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$SimilarProducts
    extends graphql.WatchQueryOptions<Query$SimilarProducts> {
  WatchOptions$Query$SimilarProducts({
    String? operationName,
    Variables$Query$SimilarProducts? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$SimilarProducts? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQuerySimilarProducts,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$SimilarProducts,
        );
}

class FetchMoreOptions$Query$SimilarProducts extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$SimilarProducts({
    required graphql.UpdateQuery updateQuery,
    Variables$Query$SimilarProducts? variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables?.toJson() ?? {},
          document: documentNodeQuerySimilarProducts,
        );
}

extension ClientExtension$Query$SimilarProducts on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$SimilarProducts>> query$SimilarProducts(
          [Options$Query$SimilarProducts? options]) async =>
      await this.query(options ?? Options$Query$SimilarProducts());
  graphql.ObservableQuery<Query$SimilarProducts> watchQuery$SimilarProducts(
          [WatchOptions$Query$SimilarProducts? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$SimilarProducts());
  void writeQuery$SimilarProducts({
    required Query$SimilarProducts data,
    Variables$Query$SimilarProducts? variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation:
              graphql.Operation(document: documentNodeQuerySimilarProducts),
          variables: variables?.toJson() ?? const {},
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$SimilarProducts? readQuery$SimilarProducts({
    Variables$Query$SimilarProducts? variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation:
            graphql.Operation(document: documentNodeQuerySimilarProducts),
        variables: variables?.toJson() ?? const {},
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$SimilarProducts.fromJson(result);
  }
}

class Query$SimilarProducts$similarProducts {
  Query$SimilarProducts$similarProducts({
    required this.id,
    required this.name,
    required this.description,
    this.category,
    required this.isFeatured,
    this.size,
    this.seller,
    this.condition,
    required this.discountPrice,
    this.price,
    this.parcelSize,
    required this.views,
    required this.likes,
    this.userLiked,
    required this.imagesUrl,
    required this.createdAt,
    required this.updatedAt,
    required this.color,
    this.style,
    this.materials,
    this.brand,
    this.$__typename = 'ProductType',
  });

  factory Query$SimilarProducts$similarProducts.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$description = json['description'];
    final l$category = json['category'];
    final l$isFeatured = json['isFeatured'];
    final l$size = json['size'];
    final l$seller = json['seller'];
    final l$condition = json['condition'];
    final l$discountPrice = json['discountPrice'];
    final l$price = json['price'];
    final l$parcelSize = json['parcelSize'];
    final l$views = json['views'];
    final l$likes = json['likes'];
    final l$userLiked = json['userLiked'];
    final l$imagesUrl = json['imagesUrl'];
    final l$createdAt = json['createdAt'];
    final l$updatedAt = json['updatedAt'];
    final l$color = json['color'];
    final l$style = json['style'];
    final l$materials = json['materials'];
    final l$brand = json['brand'];
    final l$$__typename = json['__typename'];
    return Query$SimilarProducts$similarProducts(
      id: (l$id as String),
      name: (l$name as String),
      description: (l$description as String),
      category: l$category == null
          ? null
          : Query$SimilarProducts$similarProducts$category.fromJson(
              (l$category as Map<String, dynamic>)),
      isFeatured: (l$isFeatured as bool),
      size: l$size == null
          ? null
          : Query$SimilarProducts$similarProducts$size.fromJson(
              (l$size as Map<String, dynamic>)),
      seller: l$seller == null
          ? null
          : Query$SimilarProducts$similarProducts$seller.fromJson(
              (l$seller as Map<String, dynamic>)),
      condition: l$condition == null
          ? null
          : fromJson$Enum$ProductsProductConditionChoices(
              (l$condition as String)),
      discountPrice: (l$discountPrice as String),
      price: (l$price as num?)?.toDouble(),
      parcelSize: l$parcelSize == null
          ? null
          : fromJson$Enum$ProductsProductParcelSizeChoices(
              (l$parcelSize as String)),
      views: (l$views as int),
      likes: (l$likes as int),
      userLiked: (l$userLiked as bool?),
      imagesUrl:
          (l$imagesUrl as List<dynamic>).map((e) => (e as String)).toList(),
      createdAt: DateTime.parse((l$createdAt as String)),
      updatedAt: DateTime.parse((l$updatedAt as String)),
      color: (l$color as List<dynamic>).map((e) => (e as String)).toList(),
      style: l$style == null
          ? null
          : fromJson$Enum$ProductsProductStyleChoices((l$style as String)),
      materials: (l$materials as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$SimilarProducts$similarProducts$materials.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      brand: l$brand == null
          ? null
          : Query$SimilarProducts$similarProducts$brand.fromJson(
              (l$brand as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String name;

  final String description;

  final Query$SimilarProducts$similarProducts$category? category;

  final bool isFeatured;

  final Query$SimilarProducts$similarProducts$size? size;

  final Query$SimilarProducts$similarProducts$seller? seller;

  final Enum$ProductsProductConditionChoices? condition;

  final String discountPrice;

  final double? price;

  final Enum$ProductsProductParcelSizeChoices? parcelSize;

  final int views;

  final int likes;

  final bool? userLiked;

  final List<String> imagesUrl;

  final DateTime createdAt;

  final DateTime updatedAt;

  final List<String> color;

  final Enum$ProductsProductStyleChoices? style;

  final List<Query$SimilarProducts$similarProducts$materials?>? materials;

  final Query$SimilarProducts$similarProducts$brand? brand;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$description = description;
    _resultData['description'] = l$description;
    final l$category = category;
    _resultData['category'] = l$category?.toJson();
    final l$isFeatured = isFeatured;
    _resultData['isFeatured'] = l$isFeatured;
    final l$size = size;
    _resultData['size'] = l$size?.toJson();
    final l$seller = seller;
    _resultData['seller'] = l$seller?.toJson();
    final l$condition = condition;
    _resultData['condition'] = l$condition == null
        ? null
        : toJson$Enum$ProductsProductConditionChoices(l$condition);
    final l$discountPrice = discountPrice;
    _resultData['discountPrice'] = l$discountPrice;
    final l$price = price;
    _resultData['price'] = l$price;
    final l$parcelSize = parcelSize;
    _resultData['parcelSize'] = l$parcelSize == null
        ? null
        : toJson$Enum$ProductsProductParcelSizeChoices(l$parcelSize);
    final l$views = views;
    _resultData['views'] = l$views;
    final l$likes = likes;
    _resultData['likes'] = l$likes;
    final l$userLiked = userLiked;
    _resultData['userLiked'] = l$userLiked;
    final l$imagesUrl = imagesUrl;
    _resultData['imagesUrl'] = l$imagesUrl.map((e) => e).toList();
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt.toIso8601String();
    final l$color = color;
    _resultData['color'] = l$color.map((e) => e).toList();
    final l$style = style;
    _resultData['style'] = l$style == null
        ? null
        : toJson$Enum$ProductsProductStyleChoices(l$style);
    final l$materials = materials;
    _resultData['materials'] = l$materials?.map((e) => e?.toJson()).toList();
    final l$brand = brand;
    _resultData['brand'] = l$brand?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$description = description;
    final l$category = category;
    final l$isFeatured = isFeatured;
    final l$size = size;
    final l$seller = seller;
    final l$condition = condition;
    final l$discountPrice = discountPrice;
    final l$price = price;
    final l$parcelSize = parcelSize;
    final l$views = views;
    final l$likes = likes;
    final l$userLiked = userLiked;
    final l$imagesUrl = imagesUrl;
    final l$createdAt = createdAt;
    final l$updatedAt = updatedAt;
    final l$color = color;
    final l$style = style;
    final l$materials = materials;
    final l$brand = brand;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$description,
      l$category,
      l$isFeatured,
      l$size,
      l$seller,
      l$condition,
      l$discountPrice,
      l$price,
      l$parcelSize,
      l$views,
      l$likes,
      l$userLiked,
      Object.hashAll(l$imagesUrl.map((v) => v)),
      l$createdAt,
      l$updatedAt,
      Object.hashAll(l$color.map((v) => v)),
      l$style,
      l$materials == null ? null : Object.hashAll(l$materials.map((v) => v)),
      l$brand,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$SimilarProducts$similarProducts ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (l$description != lOther$description) {
      return false;
    }
    final l$category = category;
    final lOther$category = other.category;
    if (l$category != lOther$category) {
      return false;
    }
    final l$isFeatured = isFeatured;
    final lOther$isFeatured = other.isFeatured;
    if (l$isFeatured != lOther$isFeatured) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (l$size != lOther$size) {
      return false;
    }
    final l$seller = seller;
    final lOther$seller = other.seller;
    if (l$seller != lOther$seller) {
      return false;
    }
    final l$condition = condition;
    final lOther$condition = other.condition;
    if (l$condition != lOther$condition) {
      return false;
    }
    final l$discountPrice = discountPrice;
    final lOther$discountPrice = other.discountPrice;
    if (l$discountPrice != lOther$discountPrice) {
      return false;
    }
    final l$price = price;
    final lOther$price = other.price;
    if (l$price != lOther$price) {
      return false;
    }
    final l$parcelSize = parcelSize;
    final lOther$parcelSize = other.parcelSize;
    if (l$parcelSize != lOther$parcelSize) {
      return false;
    }
    final l$views = views;
    final lOther$views = other.views;
    if (l$views != lOther$views) {
      return false;
    }
    final l$likes = likes;
    final lOther$likes = other.likes;
    if (l$likes != lOther$likes) {
      return false;
    }
    final l$userLiked = userLiked;
    final lOther$userLiked = other.userLiked;
    if (l$userLiked != lOther$userLiked) {
      return false;
    }
    final l$imagesUrl = imagesUrl;
    final lOther$imagesUrl = other.imagesUrl;
    if (l$imagesUrl.length != lOther$imagesUrl.length) {
      return false;
    }
    for (int i = 0; i < l$imagesUrl.length; i++) {
      final l$imagesUrl$entry = l$imagesUrl[i];
      final lOther$imagesUrl$entry = lOther$imagesUrl[i];
      if (l$imagesUrl$entry != lOther$imagesUrl$entry) {
        return false;
      }
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$color = color;
    final lOther$color = other.color;
    if (l$color.length != lOther$color.length) {
      return false;
    }
    for (int i = 0; i < l$color.length; i++) {
      final l$color$entry = l$color[i];
      final lOther$color$entry = lOther$color[i];
      if (l$color$entry != lOther$color$entry) {
        return false;
      }
    }
    final l$style = style;
    final lOther$style = other.style;
    if (l$style != lOther$style) {
      return false;
    }
    final l$materials = materials;
    final lOther$materials = other.materials;
    if (l$materials != null && lOther$materials != null) {
      if (l$materials.length != lOther$materials.length) {
        return false;
      }
      for (int i = 0; i < l$materials.length; i++) {
        final l$materials$entry = l$materials[i];
        final lOther$materials$entry = lOther$materials[i];
        if (l$materials$entry != lOther$materials$entry) {
          return false;
        }
      }
    } else if (l$materials != lOther$materials) {
      return false;
    }
    final l$brand = brand;
    final lOther$brand = other.brand;
    if (l$brand != lOther$brand) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$SimilarProducts$similarProducts
    on Query$SimilarProducts$similarProducts {
  CopyWith$Query$SimilarProducts$similarProducts<
          Query$SimilarProducts$similarProducts>
      get copyWith => CopyWith$Query$SimilarProducts$similarProducts(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$SimilarProducts$similarProducts<TRes> {
  factory CopyWith$Query$SimilarProducts$similarProducts(
    Query$SimilarProducts$similarProducts instance,
    TRes Function(Query$SimilarProducts$similarProducts) then,
  ) = _CopyWithImpl$Query$SimilarProducts$similarProducts;

  factory CopyWith$Query$SimilarProducts$similarProducts.stub(TRes res) =
      _CopyWithStubImpl$Query$SimilarProducts$similarProducts;

  TRes call({
    String? id,
    String? name,
    String? description,
    Query$SimilarProducts$similarProducts$category? category,
    bool? isFeatured,
    Query$SimilarProducts$similarProducts$size? size,
    Query$SimilarProducts$similarProducts$seller? seller,
    Enum$ProductsProductConditionChoices? condition,
    String? discountPrice,
    double? price,
    Enum$ProductsProductParcelSizeChoices? parcelSize,
    int? views,
    int? likes,
    bool? userLiked,
    List<String>? imagesUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<String>? color,
    Enum$ProductsProductStyleChoices? style,
    List<Query$SimilarProducts$similarProducts$materials?>? materials,
    Query$SimilarProducts$similarProducts$brand? brand,
    String? $__typename,
  });
  CopyWith$Query$SimilarProducts$similarProducts$category<TRes> get category;
  CopyWith$Query$SimilarProducts$similarProducts$size<TRes> get size;
  CopyWith$Query$SimilarProducts$similarProducts$seller<TRes> get seller;
  TRes materials(
      Iterable<Query$SimilarProducts$similarProducts$materials?>? Function(
              Iterable<
                  CopyWith$Query$SimilarProducts$similarProducts$materials<
                      Query$SimilarProducts$similarProducts$materials>?>?)
          _fn);
  CopyWith$Query$SimilarProducts$similarProducts$brand<TRes> get brand;
}

class _CopyWithImpl$Query$SimilarProducts$similarProducts<TRes>
    implements CopyWith$Query$SimilarProducts$similarProducts<TRes> {
  _CopyWithImpl$Query$SimilarProducts$similarProducts(
    this._instance,
    this._then,
  );

  final Query$SimilarProducts$similarProducts _instance;

  final TRes Function(Query$SimilarProducts$similarProducts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? description = _undefined,
    Object? category = _undefined,
    Object? isFeatured = _undefined,
    Object? size = _undefined,
    Object? seller = _undefined,
    Object? condition = _undefined,
    Object? discountPrice = _undefined,
    Object? price = _undefined,
    Object? parcelSize = _undefined,
    Object? views = _undefined,
    Object? likes = _undefined,
    Object? userLiked = _undefined,
    Object? imagesUrl = _undefined,
    Object? createdAt = _undefined,
    Object? updatedAt = _undefined,
    Object? color = _undefined,
    Object? style = _undefined,
    Object? materials = _undefined,
    Object? brand = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$SimilarProducts$similarProducts(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        description: description == _undefined || description == null
            ? _instance.description
            : (description as String),
        category: category == _undefined
            ? _instance.category
            : (category as Query$SimilarProducts$similarProducts$category?),
        isFeatured: isFeatured == _undefined || isFeatured == null
            ? _instance.isFeatured
            : (isFeatured as bool),
        size: size == _undefined
            ? _instance.size
            : (size as Query$SimilarProducts$similarProducts$size?),
        seller: seller == _undefined
            ? _instance.seller
            : (seller as Query$SimilarProducts$similarProducts$seller?),
        condition: condition == _undefined
            ? _instance.condition
            : (condition as Enum$ProductsProductConditionChoices?),
        discountPrice: discountPrice == _undefined || discountPrice == null
            ? _instance.discountPrice
            : (discountPrice as String),
        price: price == _undefined ? _instance.price : (price as double?),
        parcelSize: parcelSize == _undefined
            ? _instance.parcelSize
            : (parcelSize as Enum$ProductsProductParcelSizeChoices?),
        views: views == _undefined || views == null
            ? _instance.views
            : (views as int),
        likes: likes == _undefined || likes == null
            ? _instance.likes
            : (likes as int),
        userLiked: userLiked == _undefined
            ? _instance.userLiked
            : (userLiked as bool?),
        imagesUrl: imagesUrl == _undefined || imagesUrl == null
            ? _instance.imagesUrl
            : (imagesUrl as List<String>),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        updatedAt: updatedAt == _undefined || updatedAt == null
            ? _instance.updatedAt
            : (updatedAt as DateTime),
        color: color == _undefined || color == null
            ? _instance.color
            : (color as List<String>),
        style: style == _undefined
            ? _instance.style
            : (style as Enum$ProductsProductStyleChoices?),
        materials: materials == _undefined
            ? _instance.materials
            : (materials
                as List<Query$SimilarProducts$similarProducts$materials?>?),
        brand: brand == _undefined
            ? _instance.brand
            : (brand as Query$SimilarProducts$similarProducts$brand?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$SimilarProducts$similarProducts$category<TRes> get category {
    final local$category = _instance.category;
    return local$category == null
        ? CopyWith$Query$SimilarProducts$similarProducts$category.stub(
            _then(_instance))
        : CopyWith$Query$SimilarProducts$similarProducts$category(
            local$category, (e) => call(category: e));
  }

  CopyWith$Query$SimilarProducts$similarProducts$size<TRes> get size {
    final local$size = _instance.size;
    return local$size == null
        ? CopyWith$Query$SimilarProducts$similarProducts$size.stub(
            _then(_instance))
        : CopyWith$Query$SimilarProducts$similarProducts$size(
            local$size, (e) => call(size: e));
  }

  CopyWith$Query$SimilarProducts$similarProducts$seller<TRes> get seller {
    final local$seller = _instance.seller;
    return local$seller == null
        ? CopyWith$Query$SimilarProducts$similarProducts$seller.stub(
            _then(_instance))
        : CopyWith$Query$SimilarProducts$similarProducts$seller(
            local$seller, (e) => call(seller: e));
  }

  TRes materials(
          Iterable<Query$SimilarProducts$similarProducts$materials?>? Function(
                  Iterable<
                      CopyWith$Query$SimilarProducts$similarProducts$materials<
                          Query$SimilarProducts$similarProducts$materials>?>?)
              _fn) =>
      call(
          materials: _fn(_instance.materials?.map((e) => e == null
              ? null
              : CopyWith$Query$SimilarProducts$similarProducts$materials(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Query$SimilarProducts$similarProducts$brand<TRes> get brand {
    final local$brand = _instance.brand;
    return local$brand == null
        ? CopyWith$Query$SimilarProducts$similarProducts$brand.stub(
            _then(_instance))
        : CopyWith$Query$SimilarProducts$similarProducts$brand(
            local$brand, (e) => call(brand: e));
  }
}

class _CopyWithStubImpl$Query$SimilarProducts$similarProducts<TRes>
    implements CopyWith$Query$SimilarProducts$similarProducts<TRes> {
  _CopyWithStubImpl$Query$SimilarProducts$similarProducts(this._res);

  TRes _res;

  call({
    String? id,
    String? name,
    String? description,
    Query$SimilarProducts$similarProducts$category? category,
    bool? isFeatured,
    Query$SimilarProducts$similarProducts$size? size,
    Query$SimilarProducts$similarProducts$seller? seller,
    Enum$ProductsProductConditionChoices? condition,
    String? discountPrice,
    double? price,
    Enum$ProductsProductParcelSizeChoices? parcelSize,
    int? views,
    int? likes,
    bool? userLiked,
    List<String>? imagesUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<String>? color,
    Enum$ProductsProductStyleChoices? style,
    List<Query$SimilarProducts$similarProducts$materials?>? materials,
    Query$SimilarProducts$similarProducts$brand? brand,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$SimilarProducts$similarProducts$category<TRes> get category =>
      CopyWith$Query$SimilarProducts$similarProducts$category.stub(_res);

  CopyWith$Query$SimilarProducts$similarProducts$size<TRes> get size =>
      CopyWith$Query$SimilarProducts$similarProducts$size.stub(_res);

  CopyWith$Query$SimilarProducts$similarProducts$seller<TRes> get seller =>
      CopyWith$Query$SimilarProducts$similarProducts$seller.stub(_res);

  materials(_fn) => _res;

  CopyWith$Query$SimilarProducts$similarProducts$brand<TRes> get brand =>
      CopyWith$Query$SimilarProducts$similarProducts$brand.stub(_res);
}

class Query$SimilarProducts$similarProducts$category {
  Query$SimilarProducts$similarProducts$category({
    this.id,
    this.name,
    this.$__typename = 'CategoryType',
  });

  factory Query$SimilarProducts$similarProducts$category.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$SimilarProducts$similarProducts$category(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$SimilarProducts$similarProducts$category ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$SimilarProducts$similarProducts$category
    on Query$SimilarProducts$similarProducts$category {
  CopyWith$Query$SimilarProducts$similarProducts$category<
          Query$SimilarProducts$similarProducts$category>
      get copyWith => CopyWith$Query$SimilarProducts$similarProducts$category(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$SimilarProducts$similarProducts$category<TRes> {
  factory CopyWith$Query$SimilarProducts$similarProducts$category(
    Query$SimilarProducts$similarProducts$category instance,
    TRes Function(Query$SimilarProducts$similarProducts$category) then,
  ) = _CopyWithImpl$Query$SimilarProducts$similarProducts$category;

  factory CopyWith$Query$SimilarProducts$similarProducts$category.stub(
          TRes res) =
      _CopyWithStubImpl$Query$SimilarProducts$similarProducts$category;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$SimilarProducts$similarProducts$category<TRes>
    implements CopyWith$Query$SimilarProducts$similarProducts$category<TRes> {
  _CopyWithImpl$Query$SimilarProducts$similarProducts$category(
    this._instance,
    this._then,
  );

  final Query$SimilarProducts$similarProducts$category _instance;

  final TRes Function(Query$SimilarProducts$similarProducts$category) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$SimilarProducts$similarProducts$category(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$SimilarProducts$similarProducts$category<TRes>
    implements CopyWith$Query$SimilarProducts$similarProducts$category<TRes> {
  _CopyWithStubImpl$Query$SimilarProducts$similarProducts$category(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$SimilarProducts$similarProducts$size {
  Query$SimilarProducts$similarProducts$size({
    this.id,
    this.name,
    this.$__typename = 'SizeType',
  });

  factory Query$SimilarProducts$similarProducts$size.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$SimilarProducts$similarProducts$size(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$SimilarProducts$similarProducts$size ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$SimilarProducts$similarProducts$size
    on Query$SimilarProducts$similarProducts$size {
  CopyWith$Query$SimilarProducts$similarProducts$size<
          Query$SimilarProducts$similarProducts$size>
      get copyWith => CopyWith$Query$SimilarProducts$similarProducts$size(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$SimilarProducts$similarProducts$size<TRes> {
  factory CopyWith$Query$SimilarProducts$similarProducts$size(
    Query$SimilarProducts$similarProducts$size instance,
    TRes Function(Query$SimilarProducts$similarProducts$size) then,
  ) = _CopyWithImpl$Query$SimilarProducts$similarProducts$size;

  factory CopyWith$Query$SimilarProducts$similarProducts$size.stub(TRes res) =
      _CopyWithStubImpl$Query$SimilarProducts$similarProducts$size;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$SimilarProducts$similarProducts$size<TRes>
    implements CopyWith$Query$SimilarProducts$similarProducts$size<TRes> {
  _CopyWithImpl$Query$SimilarProducts$similarProducts$size(
    this._instance,
    this._then,
  );

  final Query$SimilarProducts$similarProducts$size _instance;

  final TRes Function(Query$SimilarProducts$similarProducts$size) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$SimilarProducts$similarProducts$size(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$SimilarProducts$similarProducts$size<TRes>
    implements CopyWith$Query$SimilarProducts$similarProducts$size<TRes> {
  _CopyWithStubImpl$Query$SimilarProducts$similarProducts$size(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$SimilarProducts$similarProducts$seller {
  Query$SimilarProducts$similarProducts$seller({
    this.id,
    this.username,
    this.$__typename = 'UserType',
  });

  factory Query$SimilarProducts$similarProducts$seller.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$$__typename = json['__typename'];
    return Query$SimilarProducts$similarProducts$seller(
      id: (l$id as int?),
      username: (l$username as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$SimilarProducts$similarProducts$seller ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$SimilarProducts$similarProducts$seller
    on Query$SimilarProducts$similarProducts$seller {
  CopyWith$Query$SimilarProducts$similarProducts$seller<
          Query$SimilarProducts$similarProducts$seller>
      get copyWith => CopyWith$Query$SimilarProducts$similarProducts$seller(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$SimilarProducts$similarProducts$seller<TRes> {
  factory CopyWith$Query$SimilarProducts$similarProducts$seller(
    Query$SimilarProducts$similarProducts$seller instance,
    TRes Function(Query$SimilarProducts$similarProducts$seller) then,
  ) = _CopyWithImpl$Query$SimilarProducts$similarProducts$seller;

  factory CopyWith$Query$SimilarProducts$similarProducts$seller.stub(TRes res) =
      _CopyWithStubImpl$Query$SimilarProducts$similarProducts$seller;

  TRes call({
    int? id,
    String? username,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$SimilarProducts$similarProducts$seller<TRes>
    implements CopyWith$Query$SimilarProducts$similarProducts$seller<TRes> {
  _CopyWithImpl$Query$SimilarProducts$similarProducts$seller(
    this._instance,
    this._then,
  );

  final Query$SimilarProducts$similarProducts$seller _instance;

  final TRes Function(Query$SimilarProducts$similarProducts$seller) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$SimilarProducts$similarProducts$seller(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$SimilarProducts$similarProducts$seller<TRes>
    implements CopyWith$Query$SimilarProducts$similarProducts$seller<TRes> {
  _CopyWithStubImpl$Query$SimilarProducts$similarProducts$seller(this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? $__typename,
  }) =>
      _res;
}

class Query$SimilarProducts$similarProducts$materials {
  Query$SimilarProducts$similarProducts$materials({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$SimilarProducts$similarProducts$materials.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$SimilarProducts$similarProducts$materials(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$SimilarProducts$similarProducts$materials ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$SimilarProducts$similarProducts$materials
    on Query$SimilarProducts$similarProducts$materials {
  CopyWith$Query$SimilarProducts$similarProducts$materials<
          Query$SimilarProducts$similarProducts$materials>
      get copyWith => CopyWith$Query$SimilarProducts$similarProducts$materials(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$SimilarProducts$similarProducts$materials<TRes> {
  factory CopyWith$Query$SimilarProducts$similarProducts$materials(
    Query$SimilarProducts$similarProducts$materials instance,
    TRes Function(Query$SimilarProducts$similarProducts$materials) then,
  ) = _CopyWithImpl$Query$SimilarProducts$similarProducts$materials;

  factory CopyWith$Query$SimilarProducts$similarProducts$materials.stub(
          TRes res) =
      _CopyWithStubImpl$Query$SimilarProducts$similarProducts$materials;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$SimilarProducts$similarProducts$materials<TRes>
    implements CopyWith$Query$SimilarProducts$similarProducts$materials<TRes> {
  _CopyWithImpl$Query$SimilarProducts$similarProducts$materials(
    this._instance,
    this._then,
  );

  final Query$SimilarProducts$similarProducts$materials _instance;

  final TRes Function(Query$SimilarProducts$similarProducts$materials) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$SimilarProducts$similarProducts$materials(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$SimilarProducts$similarProducts$materials<TRes>
    implements CopyWith$Query$SimilarProducts$similarProducts$materials<TRes> {
  _CopyWithStubImpl$Query$SimilarProducts$similarProducts$materials(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$SimilarProducts$similarProducts$brand {
  Query$SimilarProducts$similarProducts$brand({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$SimilarProducts$similarProducts$brand.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$SimilarProducts$similarProducts$brand(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$SimilarProducts$similarProducts$brand ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$SimilarProducts$similarProducts$brand
    on Query$SimilarProducts$similarProducts$brand {
  CopyWith$Query$SimilarProducts$similarProducts$brand<
          Query$SimilarProducts$similarProducts$brand>
      get copyWith => CopyWith$Query$SimilarProducts$similarProducts$brand(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$SimilarProducts$similarProducts$brand<TRes> {
  factory CopyWith$Query$SimilarProducts$similarProducts$brand(
    Query$SimilarProducts$similarProducts$brand instance,
    TRes Function(Query$SimilarProducts$similarProducts$brand) then,
  ) = _CopyWithImpl$Query$SimilarProducts$similarProducts$brand;

  factory CopyWith$Query$SimilarProducts$similarProducts$brand.stub(TRes res) =
      _CopyWithStubImpl$Query$SimilarProducts$similarProducts$brand;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$SimilarProducts$similarProducts$brand<TRes>
    implements CopyWith$Query$SimilarProducts$similarProducts$brand<TRes> {
  _CopyWithImpl$Query$SimilarProducts$similarProducts$brand(
    this._instance,
    this._then,
  );

  final Query$SimilarProducts$similarProducts$brand _instance;

  final TRes Function(Query$SimilarProducts$similarProducts$brand) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$SimilarProducts$similarProducts$brand(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$SimilarProducts$similarProducts$brand<TRes>
    implements CopyWith$Query$SimilarProducts$similarProducts$brand<TRes> {
  _CopyWithStubImpl$Query$SimilarProducts$similarProducts$brand(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$following {
  factory Variables$Query$following({
    bool? latestFirst,
    String? search,
    int? pageCount,
    int? pageNumber,
    String? username,
  }) =>
      Variables$Query$following._({
        if (latestFirst != null) r'latestFirst': latestFirst,
        if (search != null) r'search': search,
        if (pageCount != null) r'pageCount': pageCount,
        if (pageNumber != null) r'pageNumber': pageNumber,
        if (username != null) r'username': username,
      });

  Variables$Query$following._(this._$data);

  factory Variables$Query$following.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('latestFirst')) {
      final l$latestFirst = data['latestFirst'];
      result$data['latestFirst'] = (l$latestFirst as bool?);
    }
    if (data.containsKey('search')) {
      final l$search = data['search'];
      result$data['search'] = (l$search as String?);
    }
    if (data.containsKey('pageCount')) {
      final l$pageCount = data['pageCount'];
      result$data['pageCount'] = (l$pageCount as int?);
    }
    if (data.containsKey('pageNumber')) {
      final l$pageNumber = data['pageNumber'];
      result$data['pageNumber'] = (l$pageNumber as int?);
    }
    if (data.containsKey('username')) {
      final l$username = data['username'];
      result$data['username'] = (l$username as String?);
    }
    return Variables$Query$following._(result$data);
  }

  Map<String, dynamic> _$data;

  bool? get latestFirst => (_$data['latestFirst'] as bool?);

  String? get search => (_$data['search'] as String?);

  int? get pageCount => (_$data['pageCount'] as int?);

  int? get pageNumber => (_$data['pageNumber'] as int?);

  String? get username => (_$data['username'] as String?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('latestFirst')) {
      final l$latestFirst = latestFirst;
      result$data['latestFirst'] = l$latestFirst;
    }
    if (_$data.containsKey('search')) {
      final l$search = search;
      result$data['search'] = l$search;
    }
    if (_$data.containsKey('pageCount')) {
      final l$pageCount = pageCount;
      result$data['pageCount'] = l$pageCount;
    }
    if (_$data.containsKey('pageNumber')) {
      final l$pageNumber = pageNumber;
      result$data['pageNumber'] = l$pageNumber;
    }
    if (_$data.containsKey('username')) {
      final l$username = username;
      result$data['username'] = l$username;
    }
    return result$data;
  }

  CopyWith$Variables$Query$following<Variables$Query$following> get copyWith =>
      CopyWith$Variables$Query$following(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$following ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$latestFirst = latestFirst;
    final lOther$latestFirst = other.latestFirst;
    if (_$data.containsKey('latestFirst') !=
        other._$data.containsKey('latestFirst')) {
      return false;
    }
    if (l$latestFirst != lOther$latestFirst) {
      return false;
    }
    final l$search = search;
    final lOther$search = other.search;
    if (_$data.containsKey('search') != other._$data.containsKey('search')) {
      return false;
    }
    if (l$search != lOther$search) {
      return false;
    }
    final l$pageCount = pageCount;
    final lOther$pageCount = other.pageCount;
    if (_$data.containsKey('pageCount') !=
        other._$data.containsKey('pageCount')) {
      return false;
    }
    if (l$pageCount != lOther$pageCount) {
      return false;
    }
    final l$pageNumber = pageNumber;
    final lOther$pageNumber = other.pageNumber;
    if (_$data.containsKey('pageNumber') !=
        other._$data.containsKey('pageNumber')) {
      return false;
    }
    if (l$pageNumber != lOther$pageNumber) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (_$data.containsKey('username') !=
        other._$data.containsKey('username')) {
      return false;
    }
    if (l$username != lOther$username) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$latestFirst = latestFirst;
    final l$search = search;
    final l$pageCount = pageCount;
    final l$pageNumber = pageNumber;
    final l$username = username;
    return Object.hashAll([
      _$data.containsKey('latestFirst') ? l$latestFirst : const {},
      _$data.containsKey('search') ? l$search : const {},
      _$data.containsKey('pageCount') ? l$pageCount : const {},
      _$data.containsKey('pageNumber') ? l$pageNumber : const {},
      _$data.containsKey('username') ? l$username : const {},
    ]);
  }
}

abstract class CopyWith$Variables$Query$following<TRes> {
  factory CopyWith$Variables$Query$following(
    Variables$Query$following instance,
    TRes Function(Variables$Query$following) then,
  ) = _CopyWithImpl$Variables$Query$following;

  factory CopyWith$Variables$Query$following.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$following;

  TRes call({
    bool? latestFirst,
    String? search,
    int? pageCount,
    int? pageNumber,
    String? username,
  });
}

class _CopyWithImpl$Variables$Query$following<TRes>
    implements CopyWith$Variables$Query$following<TRes> {
  _CopyWithImpl$Variables$Query$following(
    this._instance,
    this._then,
  );

  final Variables$Query$following _instance;

  final TRes Function(Variables$Query$following) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? latestFirst = _undefined,
    Object? search = _undefined,
    Object? pageCount = _undefined,
    Object? pageNumber = _undefined,
    Object? username = _undefined,
  }) =>
      _then(Variables$Query$following._({
        ..._instance._$data,
        if (latestFirst != _undefined) 'latestFirst': (latestFirst as bool?),
        if (search != _undefined) 'search': (search as String?),
        if (pageCount != _undefined) 'pageCount': (pageCount as int?),
        if (pageNumber != _undefined) 'pageNumber': (pageNumber as int?),
        if (username != _undefined) 'username': (username as String?),
      }));
}

class _CopyWithStubImpl$Variables$Query$following<TRes>
    implements CopyWith$Variables$Query$following<TRes> {
  _CopyWithStubImpl$Variables$Query$following(this._res);

  TRes _res;

  call({
    bool? latestFirst,
    String? search,
    int? pageCount,
    int? pageNumber,
    String? username,
  }) =>
      _res;
}

class Query$following {
  Query$following({
    this.following,
    this.followingTotalNumber,
    this.$__typename = 'Query',
  });

  factory Query$following.fromJson(Map<String, dynamic> json) {
    final l$following = json['following'];
    final l$followingTotalNumber = json['followingTotalNumber'];
    final l$$__typename = json['__typename'];
    return Query$following(
      following: (l$following as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$following$following.fromJson((e as Map<String, dynamic>)))
          .toList(),
      followingTotalNumber: (l$followingTotalNumber as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$following$following?>? following;

  final int? followingTotalNumber;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$following = following;
    _resultData['following'] = l$following?.map((e) => e?.toJson()).toList();
    final l$followingTotalNumber = followingTotalNumber;
    _resultData['followingTotalNumber'] = l$followingTotalNumber;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$following = following;
    final l$followingTotalNumber = followingTotalNumber;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$following == null ? null : Object.hashAll(l$following.map((v) => v)),
      l$followingTotalNumber,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$following || runtimeType != other.runtimeType) {
      return false;
    }
    final l$following = following;
    final lOther$following = other.following;
    if (l$following != null && lOther$following != null) {
      if (l$following.length != lOther$following.length) {
        return false;
      }
      for (int i = 0; i < l$following.length; i++) {
        final l$following$entry = l$following[i];
        final lOther$following$entry = lOther$following[i];
        if (l$following$entry != lOther$following$entry) {
          return false;
        }
      }
    } else if (l$following != lOther$following) {
      return false;
    }
    final l$followingTotalNumber = followingTotalNumber;
    final lOther$followingTotalNumber = other.followingTotalNumber;
    if (l$followingTotalNumber != lOther$followingTotalNumber) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$following on Query$following {
  CopyWith$Query$following<Query$following> get copyWith =>
      CopyWith$Query$following(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$following<TRes> {
  factory CopyWith$Query$following(
    Query$following instance,
    TRes Function(Query$following) then,
  ) = _CopyWithImpl$Query$following;

  factory CopyWith$Query$following.stub(TRes res) =
      _CopyWithStubImpl$Query$following;

  TRes call({
    List<Query$following$following?>? following,
    int? followingTotalNumber,
    String? $__typename,
  });
  TRes following(
      Iterable<Query$following$following?>? Function(
              Iterable<
                  CopyWith$Query$following$following<
                      Query$following$following>?>?)
          _fn);
}

class _CopyWithImpl$Query$following<TRes>
    implements CopyWith$Query$following<TRes> {
  _CopyWithImpl$Query$following(
    this._instance,
    this._then,
  );

  final Query$following _instance;

  final TRes Function(Query$following) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? following = _undefined,
    Object? followingTotalNumber = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$following(
        following: following == _undefined
            ? _instance.following
            : (following as List<Query$following$following?>?),
        followingTotalNumber: followingTotalNumber == _undefined
            ? _instance.followingTotalNumber
            : (followingTotalNumber as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes following(
          Iterable<Query$following$following?>? Function(
                  Iterable<
                      CopyWith$Query$following$following<
                          Query$following$following>?>?)
              _fn) =>
      call(
          following: _fn(_instance.following?.map((e) => e == null
              ? null
              : CopyWith$Query$following$following(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$following<TRes>
    implements CopyWith$Query$following<TRes> {
  _CopyWithStubImpl$Query$following(this._res);

  TRes _res;

  call({
    List<Query$following$following?>? following,
    int? followingTotalNumber,
    String? $__typename,
  }) =>
      _res;

  following(_fn) => _res;
}

const documentNodeQueryfollowing = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'following'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'latestFirst')),
        type: NamedTypeNode(
          name: NameNode(value: 'Boolean'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'search')),
        type: NamedTypeNode(
          name: NameNode(value: 'String'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageCount')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageNumber')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'username')),
        type: NamedTypeNode(
          name: NameNode(value: 'String'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'following'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'latestFirst'),
            value: VariableNode(name: NameNode(value: 'latestFirst')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageCount'),
            value: VariableNode(name: NameNode(value: 'pageCount')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageNumber'),
            value: VariableNode(name: NameNode(value: 'pageNumber')),
          ),
          ArgumentNode(
            name: NameNode(value: 'search'),
            value: VariableNode(name: NameNode(value: 'search')),
          ),
          ArgumentNode(
            name: NameNode(value: 'username'),
            value: VariableNode(name: NameNode(value: 'username')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'username'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'fullName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'listing'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'profilePictureUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'latitude'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'longitude'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'locationName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'isFollowing'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: 'followingTotalNumber'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$following _parserFn$Query$following(Map<String, dynamic> data) =>
    Query$following.fromJson(data);
typedef OnQueryComplete$Query$following = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$following?,
);

class Options$Query$following extends graphql.QueryOptions<Query$following> {
  Options$Query$following({
    String? operationName,
    Variables$Query$following? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$following? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$following? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$following(data),
                  ),
          onError: onError,
          document: documentNodeQueryfollowing,
          parserFn: _parserFn$Query$following,
        );

  final OnQueryComplete$Query$following? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$following
    extends graphql.WatchQueryOptions<Query$following> {
  WatchOptions$Query$following({
    String? operationName,
    Variables$Query$following? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$following? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryfollowing,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$following,
        );
}

class FetchMoreOptions$Query$following extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$following({
    required graphql.UpdateQuery updateQuery,
    Variables$Query$following? variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables?.toJson() ?? {},
          document: documentNodeQueryfollowing,
        );
}

extension ClientExtension$Query$following on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$following>> query$following(
          [Options$Query$following? options]) async =>
      await this.query(options ?? Options$Query$following());
  graphql.ObservableQuery<Query$following> watchQuery$following(
          [WatchOptions$Query$following? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$following());
  void writeQuery$following({
    required Query$following data,
    Variables$Query$following? variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation: graphql.Operation(document: documentNodeQueryfollowing),
          variables: variables?.toJson() ?? const {},
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$following? readQuery$following({
    Variables$Query$following? variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQueryfollowing),
        variables: variables?.toJson() ?? const {},
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$following.fromJson(result);
  }
}

class Query$following$following {
  Query$following$following({
    this.id,
    this.username,
    this.fullName,
    this.listing,
    this.profilePictureUrl,
    this.location,
    this.isFollowing,
    this.$__typename = 'UserType',
  });

  factory Query$following$following.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$fullName = json['fullName'];
    final l$listing = json['listing'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$location = json['location'];
    final l$isFollowing = json['isFollowing'];
    final l$$__typename = json['__typename'];
    return Query$following$following(
      id: (l$id as int?),
      username: (l$username as String?),
      fullName: (l$fullName as String?),
      listing: (l$listing as int?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      location: l$location == null
          ? null
          : Query$following$following$location.fromJson(
              (l$location as Map<String, dynamic>)),
      isFollowing: (l$isFollowing as bool?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String? fullName;

  final int? listing;

  final String? profilePictureUrl;

  final Query$following$following$location? location;

  final bool? isFollowing;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$fullName = fullName;
    _resultData['fullName'] = l$fullName;
    final l$listing = listing;
    _resultData['listing'] = l$listing;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$location = location;
    _resultData['location'] = l$location?.toJson();
    final l$isFollowing = isFollowing;
    _resultData['isFollowing'] = l$isFollowing;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$fullName = fullName;
    final l$listing = listing;
    final l$profilePictureUrl = profilePictureUrl;
    final l$location = location;
    final l$isFollowing = isFollowing;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$fullName,
      l$listing,
      l$profilePictureUrl,
      l$location,
      l$isFollowing,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$following$following ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$fullName = fullName;
    final lOther$fullName = other.fullName;
    if (l$fullName != lOther$fullName) {
      return false;
    }
    final l$listing = listing;
    final lOther$listing = other.listing;
    if (l$listing != lOther$listing) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$location = location;
    final lOther$location = other.location;
    if (l$location != lOther$location) {
      return false;
    }
    final l$isFollowing = isFollowing;
    final lOther$isFollowing = other.isFollowing;
    if (l$isFollowing != lOther$isFollowing) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$following$following
    on Query$following$following {
  CopyWith$Query$following$following<Query$following$following> get copyWith =>
      CopyWith$Query$following$following(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$following$following<TRes> {
  factory CopyWith$Query$following$following(
    Query$following$following instance,
    TRes Function(Query$following$following) then,
  ) = _CopyWithImpl$Query$following$following;

  factory CopyWith$Query$following$following.stub(TRes res) =
      _CopyWithStubImpl$Query$following$following;

  TRes call({
    int? id,
    String? username,
    String? fullName,
    int? listing,
    String? profilePictureUrl,
    Query$following$following$location? location,
    bool? isFollowing,
    String? $__typename,
  });
  CopyWith$Query$following$following$location<TRes> get location;
}

class _CopyWithImpl$Query$following$following<TRes>
    implements CopyWith$Query$following$following<TRes> {
  _CopyWithImpl$Query$following$following(
    this._instance,
    this._then,
  );

  final Query$following$following _instance;

  final TRes Function(Query$following$following) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? fullName = _undefined,
    Object? listing = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? location = _undefined,
    Object? isFollowing = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$following$following(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        fullName:
            fullName == _undefined ? _instance.fullName : (fullName as String?),
        listing: listing == _undefined ? _instance.listing : (listing as int?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        location: location == _undefined
            ? _instance.location
            : (location as Query$following$following$location?),
        isFollowing: isFollowing == _undefined
            ? _instance.isFollowing
            : (isFollowing as bool?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$following$following$location<TRes> get location {
    final local$location = _instance.location;
    return local$location == null
        ? CopyWith$Query$following$following$location.stub(_then(_instance))
        : CopyWith$Query$following$following$location(
            local$location, (e) => call(location: e));
  }
}

class _CopyWithStubImpl$Query$following$following<TRes>
    implements CopyWith$Query$following$following<TRes> {
  _CopyWithStubImpl$Query$following$following(this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? fullName,
    int? listing,
    String? profilePictureUrl,
    Query$following$following$location? location,
    bool? isFollowing,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$following$following$location<TRes> get location =>
      CopyWith$Query$following$following$location.stub(_res);
}

class Query$following$following$location {
  Query$following$following$location({
    this.latitude,
    this.longitude,
    this.locationName,
    this.$__typename = 'LocationType',
  });

  factory Query$following$following$location.fromJson(
      Map<String, dynamic> json) {
    final l$latitude = json['latitude'];
    final l$longitude = json['longitude'];
    final l$locationName = json['locationName'];
    final l$$__typename = json['__typename'];
    return Query$following$following$location(
      latitude: (l$latitude as String?),
      longitude: (l$longitude as String?),
      locationName: (l$locationName as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? latitude;

  final String? longitude;

  final String? locationName;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$latitude = latitude;
    _resultData['latitude'] = l$latitude;
    final l$longitude = longitude;
    _resultData['longitude'] = l$longitude;
    final l$locationName = locationName;
    _resultData['locationName'] = l$locationName;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$latitude = latitude;
    final l$longitude = longitude;
    final l$locationName = locationName;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$latitude,
      l$longitude,
      l$locationName,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$following$following$location ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$latitude = latitude;
    final lOther$latitude = other.latitude;
    if (l$latitude != lOther$latitude) {
      return false;
    }
    final l$longitude = longitude;
    final lOther$longitude = other.longitude;
    if (l$longitude != lOther$longitude) {
      return false;
    }
    final l$locationName = locationName;
    final lOther$locationName = other.locationName;
    if (l$locationName != lOther$locationName) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$following$following$location
    on Query$following$following$location {
  CopyWith$Query$following$following$location<
          Query$following$following$location>
      get copyWith => CopyWith$Query$following$following$location(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$following$following$location<TRes> {
  factory CopyWith$Query$following$following$location(
    Query$following$following$location instance,
    TRes Function(Query$following$following$location) then,
  ) = _CopyWithImpl$Query$following$following$location;

  factory CopyWith$Query$following$following$location.stub(TRes res) =
      _CopyWithStubImpl$Query$following$following$location;

  TRes call({
    String? latitude,
    String? longitude,
    String? locationName,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$following$following$location<TRes>
    implements CopyWith$Query$following$following$location<TRes> {
  _CopyWithImpl$Query$following$following$location(
    this._instance,
    this._then,
  );

  final Query$following$following$location _instance;

  final TRes Function(Query$following$following$location) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? latitude = _undefined,
    Object? longitude = _undefined,
    Object? locationName = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$following$following$location(
        latitude:
            latitude == _undefined ? _instance.latitude : (latitude as String?),
        longitude: longitude == _undefined
            ? _instance.longitude
            : (longitude as String?),
        locationName: locationName == _undefined
            ? _instance.locationName
            : (locationName as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$following$following$location<TRes>
    implements CopyWith$Query$following$following$location<TRes> {
  _CopyWithStubImpl$Query$following$following$location(this._res);

  TRes _res;

  call({
    String? latitude,
    String? longitude,
    String? locationName,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$followers {
  factory Variables$Query$followers({
    bool? latestFirst,
    String? search,
    int? pageCount,
    int? pageNumber,
    String? username,
  }) =>
      Variables$Query$followers._({
        if (latestFirst != null) r'latestFirst': latestFirst,
        if (search != null) r'search': search,
        if (pageCount != null) r'pageCount': pageCount,
        if (pageNumber != null) r'pageNumber': pageNumber,
        if (username != null) r'username': username,
      });

  Variables$Query$followers._(this._$data);

  factory Variables$Query$followers.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('latestFirst')) {
      final l$latestFirst = data['latestFirst'];
      result$data['latestFirst'] = (l$latestFirst as bool?);
    }
    if (data.containsKey('search')) {
      final l$search = data['search'];
      result$data['search'] = (l$search as String?);
    }
    if (data.containsKey('pageCount')) {
      final l$pageCount = data['pageCount'];
      result$data['pageCount'] = (l$pageCount as int?);
    }
    if (data.containsKey('pageNumber')) {
      final l$pageNumber = data['pageNumber'];
      result$data['pageNumber'] = (l$pageNumber as int?);
    }
    if (data.containsKey('username')) {
      final l$username = data['username'];
      result$data['username'] = (l$username as String?);
    }
    return Variables$Query$followers._(result$data);
  }

  Map<String, dynamic> _$data;

  bool? get latestFirst => (_$data['latestFirst'] as bool?);

  String? get search => (_$data['search'] as String?);

  int? get pageCount => (_$data['pageCount'] as int?);

  int? get pageNumber => (_$data['pageNumber'] as int?);

  String? get username => (_$data['username'] as String?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('latestFirst')) {
      final l$latestFirst = latestFirst;
      result$data['latestFirst'] = l$latestFirst;
    }
    if (_$data.containsKey('search')) {
      final l$search = search;
      result$data['search'] = l$search;
    }
    if (_$data.containsKey('pageCount')) {
      final l$pageCount = pageCount;
      result$data['pageCount'] = l$pageCount;
    }
    if (_$data.containsKey('pageNumber')) {
      final l$pageNumber = pageNumber;
      result$data['pageNumber'] = l$pageNumber;
    }
    if (_$data.containsKey('username')) {
      final l$username = username;
      result$data['username'] = l$username;
    }
    return result$data;
  }

  CopyWith$Variables$Query$followers<Variables$Query$followers> get copyWith =>
      CopyWith$Variables$Query$followers(
        this,
        (i) => i,
      );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$followers ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$latestFirst = latestFirst;
    final lOther$latestFirst = other.latestFirst;
    if (_$data.containsKey('latestFirst') !=
        other._$data.containsKey('latestFirst')) {
      return false;
    }
    if (l$latestFirst != lOther$latestFirst) {
      return false;
    }
    final l$search = search;
    final lOther$search = other.search;
    if (_$data.containsKey('search') != other._$data.containsKey('search')) {
      return false;
    }
    if (l$search != lOther$search) {
      return false;
    }
    final l$pageCount = pageCount;
    final lOther$pageCount = other.pageCount;
    if (_$data.containsKey('pageCount') !=
        other._$data.containsKey('pageCount')) {
      return false;
    }
    if (l$pageCount != lOther$pageCount) {
      return false;
    }
    final l$pageNumber = pageNumber;
    final lOther$pageNumber = other.pageNumber;
    if (_$data.containsKey('pageNumber') !=
        other._$data.containsKey('pageNumber')) {
      return false;
    }
    if (l$pageNumber != lOther$pageNumber) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (_$data.containsKey('username') !=
        other._$data.containsKey('username')) {
      return false;
    }
    if (l$username != lOther$username) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$latestFirst = latestFirst;
    final l$search = search;
    final l$pageCount = pageCount;
    final l$pageNumber = pageNumber;
    final l$username = username;
    return Object.hashAll([
      _$data.containsKey('latestFirst') ? l$latestFirst : const {},
      _$data.containsKey('search') ? l$search : const {},
      _$data.containsKey('pageCount') ? l$pageCount : const {},
      _$data.containsKey('pageNumber') ? l$pageNumber : const {},
      _$data.containsKey('username') ? l$username : const {},
    ]);
  }
}

abstract class CopyWith$Variables$Query$followers<TRes> {
  factory CopyWith$Variables$Query$followers(
    Variables$Query$followers instance,
    TRes Function(Variables$Query$followers) then,
  ) = _CopyWithImpl$Variables$Query$followers;

  factory CopyWith$Variables$Query$followers.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$followers;

  TRes call({
    bool? latestFirst,
    String? search,
    int? pageCount,
    int? pageNumber,
    String? username,
  });
}

class _CopyWithImpl$Variables$Query$followers<TRes>
    implements CopyWith$Variables$Query$followers<TRes> {
  _CopyWithImpl$Variables$Query$followers(
    this._instance,
    this._then,
  );

  final Variables$Query$followers _instance;

  final TRes Function(Variables$Query$followers) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? latestFirst = _undefined,
    Object? search = _undefined,
    Object? pageCount = _undefined,
    Object? pageNumber = _undefined,
    Object? username = _undefined,
  }) =>
      _then(Variables$Query$followers._({
        ..._instance._$data,
        if (latestFirst != _undefined) 'latestFirst': (latestFirst as bool?),
        if (search != _undefined) 'search': (search as String?),
        if (pageCount != _undefined) 'pageCount': (pageCount as int?),
        if (pageNumber != _undefined) 'pageNumber': (pageNumber as int?),
        if (username != _undefined) 'username': (username as String?),
      }));
}

class _CopyWithStubImpl$Variables$Query$followers<TRes>
    implements CopyWith$Variables$Query$followers<TRes> {
  _CopyWithStubImpl$Variables$Query$followers(this._res);

  TRes _res;

  call({
    bool? latestFirst,
    String? search,
    int? pageCount,
    int? pageNumber,
    String? username,
  }) =>
      _res;
}

class Query$followers {
  Query$followers({
    this.followers,
    this.followersTotalNumber,
    this.$__typename = 'Query',
  });

  factory Query$followers.fromJson(Map<String, dynamic> json) {
    final l$followers = json['followers'];
    final l$followersTotalNumber = json['followersTotalNumber'];
    final l$$__typename = json['__typename'];
    return Query$followers(
      followers: (l$followers as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$followers$followers.fromJson((e as Map<String, dynamic>)))
          .toList(),
      followersTotalNumber: (l$followersTotalNumber as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$followers$followers?>? followers;

  final int? followersTotalNumber;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$followers = followers;
    _resultData['followers'] = l$followers?.map((e) => e?.toJson()).toList();
    final l$followersTotalNumber = followersTotalNumber;
    _resultData['followersTotalNumber'] = l$followersTotalNumber;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$followers = followers;
    final l$followersTotalNumber = followersTotalNumber;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$followers == null ? null : Object.hashAll(l$followers.map((v) => v)),
      l$followersTotalNumber,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$followers || runtimeType != other.runtimeType) {
      return false;
    }
    final l$followers = followers;
    final lOther$followers = other.followers;
    if (l$followers != null && lOther$followers != null) {
      if (l$followers.length != lOther$followers.length) {
        return false;
      }
      for (int i = 0; i < l$followers.length; i++) {
        final l$followers$entry = l$followers[i];
        final lOther$followers$entry = lOther$followers[i];
        if (l$followers$entry != lOther$followers$entry) {
          return false;
        }
      }
    } else if (l$followers != lOther$followers) {
      return false;
    }
    final l$followersTotalNumber = followersTotalNumber;
    final lOther$followersTotalNumber = other.followersTotalNumber;
    if (l$followersTotalNumber != lOther$followersTotalNumber) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$followers on Query$followers {
  CopyWith$Query$followers<Query$followers> get copyWith =>
      CopyWith$Query$followers(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$followers<TRes> {
  factory CopyWith$Query$followers(
    Query$followers instance,
    TRes Function(Query$followers) then,
  ) = _CopyWithImpl$Query$followers;

  factory CopyWith$Query$followers.stub(TRes res) =
      _CopyWithStubImpl$Query$followers;

  TRes call({
    List<Query$followers$followers?>? followers,
    int? followersTotalNumber,
    String? $__typename,
  });
  TRes followers(
      Iterable<Query$followers$followers?>? Function(
              Iterable<
                  CopyWith$Query$followers$followers<
                      Query$followers$followers>?>?)
          _fn);
}

class _CopyWithImpl$Query$followers<TRes>
    implements CopyWith$Query$followers<TRes> {
  _CopyWithImpl$Query$followers(
    this._instance,
    this._then,
  );

  final Query$followers _instance;

  final TRes Function(Query$followers) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? followers = _undefined,
    Object? followersTotalNumber = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$followers(
        followers: followers == _undefined
            ? _instance.followers
            : (followers as List<Query$followers$followers?>?),
        followersTotalNumber: followersTotalNumber == _undefined
            ? _instance.followersTotalNumber
            : (followersTotalNumber as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes followers(
          Iterable<Query$followers$followers?>? Function(
                  Iterable<
                      CopyWith$Query$followers$followers<
                          Query$followers$followers>?>?)
              _fn) =>
      call(
          followers: _fn(_instance.followers?.map((e) => e == null
              ? null
              : CopyWith$Query$followers$followers(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$followers<TRes>
    implements CopyWith$Query$followers<TRes> {
  _CopyWithStubImpl$Query$followers(this._res);

  TRes _res;

  call({
    List<Query$followers$followers?>? followers,
    int? followersTotalNumber,
    String? $__typename,
  }) =>
      _res;

  followers(_fn) => _res;
}

const documentNodeQueryfollowers = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'followers'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'latestFirst')),
        type: NamedTypeNode(
          name: NameNode(value: 'Boolean'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'search')),
        type: NamedTypeNode(
          name: NameNode(value: 'String'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageCount')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageNumber')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'username')),
        type: NamedTypeNode(
          name: NameNode(value: 'String'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'followers'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'latestFirst'),
            value: VariableNode(name: NameNode(value: 'latestFirst')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageCount'),
            value: VariableNode(name: NameNode(value: 'pageCount')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageNumber'),
            value: VariableNode(name: NameNode(value: 'pageNumber')),
          ),
          ArgumentNode(
            name: NameNode(value: 'search'),
            value: VariableNode(name: NameNode(value: 'search')),
          ),
          ArgumentNode(
            name: NameNode(value: 'username'),
            value: VariableNode(name: NameNode(value: 'username')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'username'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'fullName'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'listing'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'profilePictureUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'location'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'latitude'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'longitude'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'locationName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'isFollowing'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: 'followersTotalNumber'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$followers _parserFn$Query$followers(Map<String, dynamic> data) =>
    Query$followers.fromJson(data);
typedef OnQueryComplete$Query$followers = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$followers?,
);

class Options$Query$followers extends graphql.QueryOptions<Query$followers> {
  Options$Query$followers({
    String? operationName,
    Variables$Query$followers? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$followers? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$followers? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$followers(data),
                  ),
          onError: onError,
          document: documentNodeQueryfollowers,
          parserFn: _parserFn$Query$followers,
        );

  final OnQueryComplete$Query$followers? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$followers
    extends graphql.WatchQueryOptions<Query$followers> {
  WatchOptions$Query$followers({
    String? operationName,
    Variables$Query$followers? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$followers? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryfollowers,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$followers,
        );
}

class FetchMoreOptions$Query$followers extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$followers({
    required graphql.UpdateQuery updateQuery,
    Variables$Query$followers? variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables?.toJson() ?? {},
          document: documentNodeQueryfollowers,
        );
}

extension ClientExtension$Query$followers on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$followers>> query$followers(
          [Options$Query$followers? options]) async =>
      await this.query(options ?? Options$Query$followers());
  graphql.ObservableQuery<Query$followers> watchQuery$followers(
          [WatchOptions$Query$followers? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$followers());
  void writeQuery$followers({
    required Query$followers data,
    Variables$Query$followers? variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation: graphql.Operation(document: documentNodeQueryfollowers),
          variables: variables?.toJson() ?? const {},
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$followers? readQuery$followers({
    Variables$Query$followers? variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQueryfollowers),
        variables: variables?.toJson() ?? const {},
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$followers.fromJson(result);
  }
}

class Query$followers$followers {
  Query$followers$followers({
    this.id,
    this.username,
    this.fullName,
    this.listing,
    this.profilePictureUrl,
    this.location,
    this.isFollowing,
    this.$__typename = 'UserType',
  });

  factory Query$followers$followers.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$fullName = json['fullName'];
    final l$listing = json['listing'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$location = json['location'];
    final l$isFollowing = json['isFollowing'];
    final l$$__typename = json['__typename'];
    return Query$followers$followers(
      id: (l$id as int?),
      username: (l$username as String?),
      fullName: (l$fullName as String?),
      listing: (l$listing as int?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      location: l$location == null
          ? null
          : Query$followers$followers$location.fromJson(
              (l$location as Map<String, dynamic>)),
      isFollowing: (l$isFollowing as bool?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String? fullName;

  final int? listing;

  final String? profilePictureUrl;

  final Query$followers$followers$location? location;

  final bool? isFollowing;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$fullName = fullName;
    _resultData['fullName'] = l$fullName;
    final l$listing = listing;
    _resultData['listing'] = l$listing;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$location = location;
    _resultData['location'] = l$location?.toJson();
    final l$isFollowing = isFollowing;
    _resultData['isFollowing'] = l$isFollowing;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$fullName = fullName;
    final l$listing = listing;
    final l$profilePictureUrl = profilePictureUrl;
    final l$location = location;
    final l$isFollowing = isFollowing;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$fullName,
      l$listing,
      l$profilePictureUrl,
      l$location,
      l$isFollowing,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$followers$followers ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$fullName = fullName;
    final lOther$fullName = other.fullName;
    if (l$fullName != lOther$fullName) {
      return false;
    }
    final l$listing = listing;
    final lOther$listing = other.listing;
    if (l$listing != lOther$listing) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$location = location;
    final lOther$location = other.location;
    if (l$location != lOther$location) {
      return false;
    }
    final l$isFollowing = isFollowing;
    final lOther$isFollowing = other.isFollowing;
    if (l$isFollowing != lOther$isFollowing) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$followers$followers
    on Query$followers$followers {
  CopyWith$Query$followers$followers<Query$followers$followers> get copyWith =>
      CopyWith$Query$followers$followers(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$followers$followers<TRes> {
  factory CopyWith$Query$followers$followers(
    Query$followers$followers instance,
    TRes Function(Query$followers$followers) then,
  ) = _CopyWithImpl$Query$followers$followers;

  factory CopyWith$Query$followers$followers.stub(TRes res) =
      _CopyWithStubImpl$Query$followers$followers;

  TRes call({
    int? id,
    String? username,
    String? fullName,
    int? listing,
    String? profilePictureUrl,
    Query$followers$followers$location? location,
    bool? isFollowing,
    String? $__typename,
  });
  CopyWith$Query$followers$followers$location<TRes> get location;
}

class _CopyWithImpl$Query$followers$followers<TRes>
    implements CopyWith$Query$followers$followers<TRes> {
  _CopyWithImpl$Query$followers$followers(
    this._instance,
    this._then,
  );

  final Query$followers$followers _instance;

  final TRes Function(Query$followers$followers) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? fullName = _undefined,
    Object? listing = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? location = _undefined,
    Object? isFollowing = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$followers$followers(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        fullName:
            fullName == _undefined ? _instance.fullName : (fullName as String?),
        listing: listing == _undefined ? _instance.listing : (listing as int?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        location: location == _undefined
            ? _instance.location
            : (location as Query$followers$followers$location?),
        isFollowing: isFollowing == _undefined
            ? _instance.isFollowing
            : (isFollowing as bool?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$followers$followers$location<TRes> get location {
    final local$location = _instance.location;
    return local$location == null
        ? CopyWith$Query$followers$followers$location.stub(_then(_instance))
        : CopyWith$Query$followers$followers$location(
            local$location, (e) => call(location: e));
  }
}

class _CopyWithStubImpl$Query$followers$followers<TRes>
    implements CopyWith$Query$followers$followers<TRes> {
  _CopyWithStubImpl$Query$followers$followers(this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? fullName,
    int? listing,
    String? profilePictureUrl,
    Query$followers$followers$location? location,
    bool? isFollowing,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$followers$followers$location<TRes> get location =>
      CopyWith$Query$followers$followers$location.stub(_res);
}

class Query$followers$followers$location {
  Query$followers$followers$location({
    this.latitude,
    this.longitude,
    this.locationName,
    this.$__typename = 'LocationType',
  });

  factory Query$followers$followers$location.fromJson(
      Map<String, dynamic> json) {
    final l$latitude = json['latitude'];
    final l$longitude = json['longitude'];
    final l$locationName = json['locationName'];
    final l$$__typename = json['__typename'];
    return Query$followers$followers$location(
      latitude: (l$latitude as String?),
      longitude: (l$longitude as String?),
      locationName: (l$locationName as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? latitude;

  final String? longitude;

  final String? locationName;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$latitude = latitude;
    _resultData['latitude'] = l$latitude;
    final l$longitude = longitude;
    _resultData['longitude'] = l$longitude;
    final l$locationName = locationName;
    _resultData['locationName'] = l$locationName;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$latitude = latitude;
    final l$longitude = longitude;
    final l$locationName = locationName;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$latitude,
      l$longitude,
      l$locationName,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$followers$followers$location ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$latitude = latitude;
    final lOther$latitude = other.latitude;
    if (l$latitude != lOther$latitude) {
      return false;
    }
    final l$longitude = longitude;
    final lOther$longitude = other.longitude;
    if (l$longitude != lOther$longitude) {
      return false;
    }
    final l$locationName = locationName;
    final lOther$locationName = other.locationName;
    if (l$locationName != lOther$locationName) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$followers$followers$location
    on Query$followers$followers$location {
  CopyWith$Query$followers$followers$location<
          Query$followers$followers$location>
      get copyWith => CopyWith$Query$followers$followers$location(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$followers$followers$location<TRes> {
  factory CopyWith$Query$followers$followers$location(
    Query$followers$followers$location instance,
    TRes Function(Query$followers$followers$location) then,
  ) = _CopyWithImpl$Query$followers$followers$location;

  factory CopyWith$Query$followers$followers$location.stub(TRes res) =
      _CopyWithStubImpl$Query$followers$followers$location;

  TRes call({
    String? latitude,
    String? longitude,
    String? locationName,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$followers$followers$location<TRes>
    implements CopyWith$Query$followers$followers$location<TRes> {
  _CopyWithImpl$Query$followers$followers$location(
    this._instance,
    this._then,
  );

  final Query$followers$followers$location _instance;

  final TRes Function(Query$followers$followers$location) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? latitude = _undefined,
    Object? longitude = _undefined,
    Object? locationName = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$followers$followers$location(
        latitude:
            latitude == _undefined ? _instance.latitude : (latitude as String?),
        longitude: longitude == _undefined
            ? _instance.longitude
            : (longitude as String?),
        locationName: locationName == _undefined
            ? _instance.locationName
            : (locationName as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$followers$followers$location<TRes>
    implements CopyWith$Query$followers$followers$location<TRes> {
  _CopyWithStubImpl$Query$followers$followers$location(this._res);

  TRes _res;

  call({
    String? latitude,
    String? longitude,
    String? locationName,
    String? $__typename,
  }) =>
      _res;
}

class Query$followersTotalNumber {
  Query$followersTotalNumber({
    this.followers,
    this.followersTotalNumber,
    this.$__typename = 'Query',
  });

  factory Query$followersTotalNumber.fromJson(Map<String, dynamic> json) {
    final l$followers = json['followers'];
    final l$followersTotalNumber = json['followersTotalNumber'];
    final l$$__typename = json['__typename'];
    return Query$followersTotalNumber(
      followers: (l$followers as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$followersTotalNumber$followers.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      followersTotalNumber: (l$followersTotalNumber as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$followersTotalNumber$followers?>? followers;

  final int? followersTotalNumber;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$followers = followers;
    _resultData['followers'] = l$followers?.map((e) => e?.toJson()).toList();
    final l$followersTotalNumber = followersTotalNumber;
    _resultData['followersTotalNumber'] = l$followersTotalNumber;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$followers = followers;
    final l$followersTotalNumber = followersTotalNumber;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$followers == null ? null : Object.hashAll(l$followers.map((v) => v)),
      l$followersTotalNumber,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$followersTotalNumber ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$followers = followers;
    final lOther$followers = other.followers;
    if (l$followers != null && lOther$followers != null) {
      if (l$followers.length != lOther$followers.length) {
        return false;
      }
      for (int i = 0; i < l$followers.length; i++) {
        final l$followers$entry = l$followers[i];
        final lOther$followers$entry = lOther$followers[i];
        if (l$followers$entry != lOther$followers$entry) {
          return false;
        }
      }
    } else if (l$followers != lOther$followers) {
      return false;
    }
    final l$followersTotalNumber = followersTotalNumber;
    final lOther$followersTotalNumber = other.followersTotalNumber;
    if (l$followersTotalNumber != lOther$followersTotalNumber) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$followersTotalNumber
    on Query$followersTotalNumber {
  CopyWith$Query$followersTotalNumber<Query$followersTotalNumber>
      get copyWith => CopyWith$Query$followersTotalNumber(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$followersTotalNumber<TRes> {
  factory CopyWith$Query$followersTotalNumber(
    Query$followersTotalNumber instance,
    TRes Function(Query$followersTotalNumber) then,
  ) = _CopyWithImpl$Query$followersTotalNumber;

  factory CopyWith$Query$followersTotalNumber.stub(TRes res) =
      _CopyWithStubImpl$Query$followersTotalNumber;

  TRes call({
    List<Query$followersTotalNumber$followers?>? followers,
    int? followersTotalNumber,
    String? $__typename,
  });
  TRes followers(
      Iterable<Query$followersTotalNumber$followers?>? Function(
              Iterable<
                  CopyWith$Query$followersTotalNumber$followers<
                      Query$followersTotalNumber$followers>?>?)
          _fn);
}

class _CopyWithImpl$Query$followersTotalNumber<TRes>
    implements CopyWith$Query$followersTotalNumber<TRes> {
  _CopyWithImpl$Query$followersTotalNumber(
    this._instance,
    this._then,
  );

  final Query$followersTotalNumber _instance;

  final TRes Function(Query$followersTotalNumber) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? followers = _undefined,
    Object? followersTotalNumber = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$followersTotalNumber(
        followers: followers == _undefined
            ? _instance.followers
            : (followers as List<Query$followersTotalNumber$followers?>?),
        followersTotalNumber: followersTotalNumber == _undefined
            ? _instance.followersTotalNumber
            : (followersTotalNumber as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes followers(
          Iterable<Query$followersTotalNumber$followers?>? Function(
                  Iterable<
                      CopyWith$Query$followersTotalNumber$followers<
                          Query$followersTotalNumber$followers>?>?)
              _fn) =>
      call(
          followers: _fn(_instance.followers?.map((e) => e == null
              ? null
              : CopyWith$Query$followersTotalNumber$followers(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$followersTotalNumber<TRes>
    implements CopyWith$Query$followersTotalNumber<TRes> {
  _CopyWithStubImpl$Query$followersTotalNumber(this._res);

  TRes _res;

  call({
    List<Query$followersTotalNumber$followers?>? followers,
    int? followersTotalNumber,
    String? $__typename,
  }) =>
      _res;

  followers(_fn) => _res;
}

const documentNodeQueryfollowersTotalNumber = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'followersTotalNumber'),
    variableDefinitions: [],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'followers'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'username'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: 'followersTotalNumber'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$followersTotalNumber _parserFn$Query$followersTotalNumber(
        Map<String, dynamic> data) =>
    Query$followersTotalNumber.fromJson(data);
typedef OnQueryComplete$Query$followersTotalNumber = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$followersTotalNumber?,
);

class Options$Query$followersTotalNumber
    extends graphql.QueryOptions<Query$followersTotalNumber> {
  Options$Query$followersTotalNumber({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$followersTotalNumber? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$followersTotalNumber? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null
                        ? null
                        : _parserFn$Query$followersTotalNumber(data),
                  ),
          onError: onError,
          document: documentNodeQueryfollowersTotalNumber,
          parserFn: _parserFn$Query$followersTotalNumber,
        );

  final OnQueryComplete$Query$followersTotalNumber? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$followersTotalNumber
    extends graphql.WatchQueryOptions<Query$followersTotalNumber> {
  WatchOptions$Query$followersTotalNumber({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$followersTotalNumber? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryfollowersTotalNumber,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$followersTotalNumber,
        );
}

class FetchMoreOptions$Query$followersTotalNumber
    extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$followersTotalNumber(
      {required graphql.UpdateQuery updateQuery})
      : super(
          updateQuery: updateQuery,
          document: documentNodeQueryfollowersTotalNumber,
        );
}

extension ClientExtension$Query$followersTotalNumber on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$followersTotalNumber>>
      query$followersTotalNumber(
              [Options$Query$followersTotalNumber? options]) async =>
          await this.query(options ?? Options$Query$followersTotalNumber());
  graphql.ObservableQuery<Query$followersTotalNumber>
      watchQuery$followersTotalNumber(
              [WatchOptions$Query$followersTotalNumber? options]) =>
          this.watchQuery(options ?? WatchOptions$Query$followersTotalNumber());
  void writeQuery$followersTotalNumber({
    required Query$followersTotalNumber data,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
            operation: graphql.Operation(
                document: documentNodeQueryfollowersTotalNumber)),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$followersTotalNumber? readQuery$followersTotalNumber(
      {bool optimistic = true}) {
    final result = this.readQuery(
      graphql.Request(
          operation: graphql.Operation(
              document: documentNodeQueryfollowersTotalNumber)),
      optimistic: optimistic,
    );
    return result == null ? null : Query$followersTotalNumber.fromJson(result);
  }
}

class Query$followersTotalNumber$followers {
  Query$followersTotalNumber$followers({
    this.username,
    this.$__typename = 'UserType',
  });

  factory Query$followersTotalNumber$followers.fromJson(
      Map<String, dynamic> json) {
    final l$username = json['username'];
    final l$$__typename = json['__typename'];
    return Query$followersTotalNumber$followers(
      username: (l$username as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? username;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$username = username;
    _resultData['username'] = l$username;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$username = username;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$username,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$followersTotalNumber$followers ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$followersTotalNumber$followers
    on Query$followersTotalNumber$followers {
  CopyWith$Query$followersTotalNumber$followers<
          Query$followersTotalNumber$followers>
      get copyWith => CopyWith$Query$followersTotalNumber$followers(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$followersTotalNumber$followers<TRes> {
  factory CopyWith$Query$followersTotalNumber$followers(
    Query$followersTotalNumber$followers instance,
    TRes Function(Query$followersTotalNumber$followers) then,
  ) = _CopyWithImpl$Query$followersTotalNumber$followers;

  factory CopyWith$Query$followersTotalNumber$followers.stub(TRes res) =
      _CopyWithStubImpl$Query$followersTotalNumber$followers;

  TRes call({
    String? username,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$followersTotalNumber$followers<TRes>
    implements CopyWith$Query$followersTotalNumber$followers<TRes> {
  _CopyWithImpl$Query$followersTotalNumber$followers(
    this._instance,
    this._then,
  );

  final Query$followersTotalNumber$followers _instance;

  final TRes Function(Query$followersTotalNumber$followers) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? username = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$followersTotalNumber$followers(
        username:
            username == _undefined ? _instance.username : (username as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$followersTotalNumber$followers<TRes>
    implements CopyWith$Query$followersTotalNumber$followers<TRes> {
  _CopyWithStubImpl$Query$followersTotalNumber$followers(this._res);

  TRes _res;

  call({
    String? username,
    String? $__typename,
  }) =>
      _res;
}

class Query$followingTotalNumber {
  Query$followingTotalNumber({
    this.following,
    this.followingTotalNumber,
    this.$__typename = 'Query',
  });

  factory Query$followingTotalNumber.fromJson(Map<String, dynamic> json) {
    final l$following = json['following'];
    final l$followingTotalNumber = json['followingTotalNumber'];
    final l$$__typename = json['__typename'];
    return Query$followingTotalNumber(
      following: (l$following as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$followingTotalNumber$following.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      followingTotalNumber: (l$followingTotalNumber as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$followingTotalNumber$following?>? following;

  final int? followingTotalNumber;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$following = following;
    _resultData['following'] = l$following?.map((e) => e?.toJson()).toList();
    final l$followingTotalNumber = followingTotalNumber;
    _resultData['followingTotalNumber'] = l$followingTotalNumber;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$following = following;
    final l$followingTotalNumber = followingTotalNumber;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$following == null ? null : Object.hashAll(l$following.map((v) => v)),
      l$followingTotalNumber,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$followingTotalNumber ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$following = following;
    final lOther$following = other.following;
    if (l$following != null && lOther$following != null) {
      if (l$following.length != lOther$following.length) {
        return false;
      }
      for (int i = 0; i < l$following.length; i++) {
        final l$following$entry = l$following[i];
        final lOther$following$entry = lOther$following[i];
        if (l$following$entry != lOther$following$entry) {
          return false;
        }
      }
    } else if (l$following != lOther$following) {
      return false;
    }
    final l$followingTotalNumber = followingTotalNumber;
    final lOther$followingTotalNumber = other.followingTotalNumber;
    if (l$followingTotalNumber != lOther$followingTotalNumber) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$followingTotalNumber
    on Query$followingTotalNumber {
  CopyWith$Query$followingTotalNumber<Query$followingTotalNumber>
      get copyWith => CopyWith$Query$followingTotalNumber(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$followingTotalNumber<TRes> {
  factory CopyWith$Query$followingTotalNumber(
    Query$followingTotalNumber instance,
    TRes Function(Query$followingTotalNumber) then,
  ) = _CopyWithImpl$Query$followingTotalNumber;

  factory CopyWith$Query$followingTotalNumber.stub(TRes res) =
      _CopyWithStubImpl$Query$followingTotalNumber;

  TRes call({
    List<Query$followingTotalNumber$following?>? following,
    int? followingTotalNumber,
    String? $__typename,
  });
  TRes following(
      Iterable<Query$followingTotalNumber$following?>? Function(
              Iterable<
                  CopyWith$Query$followingTotalNumber$following<
                      Query$followingTotalNumber$following>?>?)
          _fn);
}

class _CopyWithImpl$Query$followingTotalNumber<TRes>
    implements CopyWith$Query$followingTotalNumber<TRes> {
  _CopyWithImpl$Query$followingTotalNumber(
    this._instance,
    this._then,
  );

  final Query$followingTotalNumber _instance;

  final TRes Function(Query$followingTotalNumber) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? following = _undefined,
    Object? followingTotalNumber = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$followingTotalNumber(
        following: following == _undefined
            ? _instance.following
            : (following as List<Query$followingTotalNumber$following?>?),
        followingTotalNumber: followingTotalNumber == _undefined
            ? _instance.followingTotalNumber
            : (followingTotalNumber as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes following(
          Iterable<Query$followingTotalNumber$following?>? Function(
                  Iterable<
                      CopyWith$Query$followingTotalNumber$following<
                          Query$followingTotalNumber$following>?>?)
              _fn) =>
      call(
          following: _fn(_instance.following?.map((e) => e == null
              ? null
              : CopyWith$Query$followingTotalNumber$following(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$followingTotalNumber<TRes>
    implements CopyWith$Query$followingTotalNumber<TRes> {
  _CopyWithStubImpl$Query$followingTotalNumber(this._res);

  TRes _res;

  call({
    List<Query$followingTotalNumber$following?>? following,
    int? followingTotalNumber,
    String? $__typename,
  }) =>
      _res;

  following(_fn) => _res;
}

const documentNodeQueryfollowingTotalNumber = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'followingTotalNumber'),
    variableDefinitions: [],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'following'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'username'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: 'followingTotalNumber'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$followingTotalNumber _parserFn$Query$followingTotalNumber(
        Map<String, dynamic> data) =>
    Query$followingTotalNumber.fromJson(data);
typedef OnQueryComplete$Query$followingTotalNumber = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$followingTotalNumber?,
);

class Options$Query$followingTotalNumber
    extends graphql.QueryOptions<Query$followingTotalNumber> {
  Options$Query$followingTotalNumber({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$followingTotalNumber? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$followingTotalNumber? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null
                        ? null
                        : _parserFn$Query$followingTotalNumber(data),
                  ),
          onError: onError,
          document: documentNodeQueryfollowingTotalNumber,
          parserFn: _parserFn$Query$followingTotalNumber,
        );

  final OnQueryComplete$Query$followingTotalNumber? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$followingTotalNumber
    extends graphql.WatchQueryOptions<Query$followingTotalNumber> {
  WatchOptions$Query$followingTotalNumber({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$followingTotalNumber? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryfollowingTotalNumber,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$followingTotalNumber,
        );
}

class FetchMoreOptions$Query$followingTotalNumber
    extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$followingTotalNumber(
      {required graphql.UpdateQuery updateQuery})
      : super(
          updateQuery: updateQuery,
          document: documentNodeQueryfollowingTotalNumber,
        );
}

extension ClientExtension$Query$followingTotalNumber on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$followingTotalNumber>>
      query$followingTotalNumber(
              [Options$Query$followingTotalNumber? options]) async =>
          await this.query(options ?? Options$Query$followingTotalNumber());
  graphql.ObservableQuery<Query$followingTotalNumber>
      watchQuery$followingTotalNumber(
              [WatchOptions$Query$followingTotalNumber? options]) =>
          this.watchQuery(options ?? WatchOptions$Query$followingTotalNumber());
  void writeQuery$followingTotalNumber({
    required Query$followingTotalNumber data,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
            operation: graphql.Operation(
                document: documentNodeQueryfollowingTotalNumber)),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$followingTotalNumber? readQuery$followingTotalNumber(
      {bool optimistic = true}) {
    final result = this.readQuery(
      graphql.Request(
          operation: graphql.Operation(
              document: documentNodeQueryfollowingTotalNumber)),
      optimistic: optimistic,
    );
    return result == null ? null : Query$followingTotalNumber.fromJson(result);
  }
}

class Query$followingTotalNumber$following {
  Query$followingTotalNumber$following({
    this.username,
    this.$__typename = 'UserType',
  });

  factory Query$followingTotalNumber$following.fromJson(
      Map<String, dynamic> json) {
    final l$username = json['username'];
    final l$$__typename = json['__typename'];
    return Query$followingTotalNumber$following(
      username: (l$username as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? username;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$username = username;
    _resultData['username'] = l$username;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$username = username;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$username,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$followingTotalNumber$following ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$followingTotalNumber$following
    on Query$followingTotalNumber$following {
  CopyWith$Query$followingTotalNumber$following<
          Query$followingTotalNumber$following>
      get copyWith => CopyWith$Query$followingTotalNumber$following(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$followingTotalNumber$following<TRes> {
  factory CopyWith$Query$followingTotalNumber$following(
    Query$followingTotalNumber$following instance,
    TRes Function(Query$followingTotalNumber$following) then,
  ) = _CopyWithImpl$Query$followingTotalNumber$following;

  factory CopyWith$Query$followingTotalNumber$following.stub(TRes res) =
      _CopyWithStubImpl$Query$followingTotalNumber$following;

  TRes call({
    String? username,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$followingTotalNumber$following<TRes>
    implements CopyWith$Query$followingTotalNumber$following<TRes> {
  _CopyWithImpl$Query$followingTotalNumber$following(
    this._instance,
    this._then,
  );

  final Query$followingTotalNumber$following _instance;

  final TRes Function(Query$followingTotalNumber$following) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? username = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$followingTotalNumber$following(
        username:
            username == _undefined ? _instance.username : (username as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$followingTotalNumber$following<TRes>
    implements CopyWith$Query$followingTotalNumber$following<TRes> {
  _CopyWithStubImpl$Query$followingTotalNumber$following(this._res);

  TRes _res;

  call({
    String? username,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$FilterProductsByPrice {
  factory Variables$Query$FilterProductsByPrice({
    required double priceLimit,
    int? pageCount,
    int? pageNumber,
  }) =>
      Variables$Query$FilterProductsByPrice._({
        r'priceLimit': priceLimit,
        if (pageCount != null) r'pageCount': pageCount,
        if (pageNumber != null) r'pageNumber': pageNumber,
      });

  Variables$Query$FilterProductsByPrice._(this._$data);

  factory Variables$Query$FilterProductsByPrice.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$priceLimit = data['priceLimit'];
    result$data['priceLimit'] = (l$priceLimit as num).toDouble();
    if (data.containsKey('pageCount')) {
      final l$pageCount = data['pageCount'];
      result$data['pageCount'] = (l$pageCount as int?);
    }
    if (data.containsKey('pageNumber')) {
      final l$pageNumber = data['pageNumber'];
      result$data['pageNumber'] = (l$pageNumber as int?);
    }
    return Variables$Query$FilterProductsByPrice._(result$data);
  }

  Map<String, dynamic> _$data;

  double get priceLimit => (_$data['priceLimit'] as double);

  int? get pageCount => (_$data['pageCount'] as int?);

  int? get pageNumber => (_$data['pageNumber'] as int?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$priceLimit = priceLimit;
    result$data['priceLimit'] = l$priceLimit;
    if (_$data.containsKey('pageCount')) {
      final l$pageCount = pageCount;
      result$data['pageCount'] = l$pageCount;
    }
    if (_$data.containsKey('pageNumber')) {
      final l$pageNumber = pageNumber;
      result$data['pageNumber'] = l$pageNumber;
    }
    return result$data;
  }

  CopyWith$Variables$Query$FilterProductsByPrice<
          Variables$Query$FilterProductsByPrice>
      get copyWith => CopyWith$Variables$Query$FilterProductsByPrice(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$FilterProductsByPrice ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$priceLimit = priceLimit;
    final lOther$priceLimit = other.priceLimit;
    if (l$priceLimit != lOther$priceLimit) {
      return false;
    }
    final l$pageCount = pageCount;
    final lOther$pageCount = other.pageCount;
    if (_$data.containsKey('pageCount') !=
        other._$data.containsKey('pageCount')) {
      return false;
    }
    if (l$pageCount != lOther$pageCount) {
      return false;
    }
    final l$pageNumber = pageNumber;
    final lOther$pageNumber = other.pageNumber;
    if (_$data.containsKey('pageNumber') !=
        other._$data.containsKey('pageNumber')) {
      return false;
    }
    if (l$pageNumber != lOther$pageNumber) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$priceLimit = priceLimit;
    final l$pageCount = pageCount;
    final l$pageNumber = pageNumber;
    return Object.hashAll([
      l$priceLimit,
      _$data.containsKey('pageCount') ? l$pageCount : const {},
      _$data.containsKey('pageNumber') ? l$pageNumber : const {},
    ]);
  }
}

abstract class CopyWith$Variables$Query$FilterProductsByPrice<TRes> {
  factory CopyWith$Variables$Query$FilterProductsByPrice(
    Variables$Query$FilterProductsByPrice instance,
    TRes Function(Variables$Query$FilterProductsByPrice) then,
  ) = _CopyWithImpl$Variables$Query$FilterProductsByPrice;

  factory CopyWith$Variables$Query$FilterProductsByPrice.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$FilterProductsByPrice;

  TRes call({
    double? priceLimit,
    int? pageCount,
    int? pageNumber,
  });
}

class _CopyWithImpl$Variables$Query$FilterProductsByPrice<TRes>
    implements CopyWith$Variables$Query$FilterProductsByPrice<TRes> {
  _CopyWithImpl$Variables$Query$FilterProductsByPrice(
    this._instance,
    this._then,
  );

  final Variables$Query$FilterProductsByPrice _instance;

  final TRes Function(Variables$Query$FilterProductsByPrice) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? priceLimit = _undefined,
    Object? pageCount = _undefined,
    Object? pageNumber = _undefined,
  }) =>
      _then(Variables$Query$FilterProductsByPrice._({
        ..._instance._$data,
        if (priceLimit != _undefined && priceLimit != null)
          'priceLimit': (priceLimit as double),
        if (pageCount != _undefined) 'pageCount': (pageCount as int?),
        if (pageNumber != _undefined) 'pageNumber': (pageNumber as int?),
      }));
}

class _CopyWithStubImpl$Variables$Query$FilterProductsByPrice<TRes>
    implements CopyWith$Variables$Query$FilterProductsByPrice<TRes> {
  _CopyWithStubImpl$Variables$Query$FilterProductsByPrice(this._res);

  TRes _res;

  call({
    double? priceLimit,
    int? pageCount,
    int? pageNumber,
  }) =>
      _res;
}

class Query$FilterProductsByPrice {
  Query$FilterProductsByPrice({
    this.filterProductsByPrice,
    this.filterProductsByPriceTotalNumber,
    this.$__typename = 'Query',
  });

  factory Query$FilterProductsByPrice.fromJson(Map<String, dynamic> json) {
    final l$filterProductsByPrice = json['filterProductsByPrice'];
    final l$filterProductsByPriceTotalNumber =
        json['filterProductsByPriceTotalNumber'];
    final l$$__typename = json['__typename'];
    return Query$FilterProductsByPrice(
      filterProductsByPrice: (l$filterProductsByPrice as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$FilterProductsByPrice$filterProductsByPrice.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      filterProductsByPriceTotalNumber:
          (l$filterProductsByPriceTotalNumber as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$FilterProductsByPrice$filterProductsByPrice?>?
      filterProductsByPrice;

  final int? filterProductsByPriceTotalNumber;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$filterProductsByPrice = filterProductsByPrice;
    _resultData['filterProductsByPrice'] =
        l$filterProductsByPrice?.map((e) => e?.toJson()).toList();
    final l$filterProductsByPriceTotalNumber = filterProductsByPriceTotalNumber;
    _resultData['filterProductsByPriceTotalNumber'] =
        l$filterProductsByPriceTotalNumber;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$filterProductsByPrice = filterProductsByPrice;
    final l$filterProductsByPriceTotalNumber = filterProductsByPriceTotalNumber;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$filterProductsByPrice == null
          ? null
          : Object.hashAll(l$filterProductsByPrice.map((v) => v)),
      l$filterProductsByPriceTotalNumber,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$FilterProductsByPrice ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$filterProductsByPrice = filterProductsByPrice;
    final lOther$filterProductsByPrice = other.filterProductsByPrice;
    if (l$filterProductsByPrice != null &&
        lOther$filterProductsByPrice != null) {
      if (l$filterProductsByPrice.length !=
          lOther$filterProductsByPrice.length) {
        return false;
      }
      for (int i = 0; i < l$filterProductsByPrice.length; i++) {
        final l$filterProductsByPrice$entry = l$filterProductsByPrice[i];
        final lOther$filterProductsByPrice$entry =
            lOther$filterProductsByPrice[i];
        if (l$filterProductsByPrice$entry !=
            lOther$filterProductsByPrice$entry) {
          return false;
        }
      }
    } else if (l$filterProductsByPrice != lOther$filterProductsByPrice) {
      return false;
    }
    final l$filterProductsByPriceTotalNumber = filterProductsByPriceTotalNumber;
    final lOther$filterProductsByPriceTotalNumber =
        other.filterProductsByPriceTotalNumber;
    if (l$filterProductsByPriceTotalNumber !=
        lOther$filterProductsByPriceTotalNumber) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$FilterProductsByPrice
    on Query$FilterProductsByPrice {
  CopyWith$Query$FilterProductsByPrice<Query$FilterProductsByPrice>
      get copyWith => CopyWith$Query$FilterProductsByPrice(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$FilterProductsByPrice<TRes> {
  factory CopyWith$Query$FilterProductsByPrice(
    Query$FilterProductsByPrice instance,
    TRes Function(Query$FilterProductsByPrice) then,
  ) = _CopyWithImpl$Query$FilterProductsByPrice;

  factory CopyWith$Query$FilterProductsByPrice.stub(TRes res) =
      _CopyWithStubImpl$Query$FilterProductsByPrice;

  TRes call({
    List<Query$FilterProductsByPrice$filterProductsByPrice?>?
        filterProductsByPrice,
    int? filterProductsByPriceTotalNumber,
    String? $__typename,
  });
  TRes filterProductsByPrice(
      Iterable<Query$FilterProductsByPrice$filterProductsByPrice?>? Function(
              Iterable<
                  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice<
                      Query$FilterProductsByPrice$filterProductsByPrice>?>?)
          _fn);
}

class _CopyWithImpl$Query$FilterProductsByPrice<TRes>
    implements CopyWith$Query$FilterProductsByPrice<TRes> {
  _CopyWithImpl$Query$FilterProductsByPrice(
    this._instance,
    this._then,
  );

  final Query$FilterProductsByPrice _instance;

  final TRes Function(Query$FilterProductsByPrice) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? filterProductsByPrice = _undefined,
    Object? filterProductsByPriceTotalNumber = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$FilterProductsByPrice(
        filterProductsByPrice: filterProductsByPrice == _undefined
            ? _instance.filterProductsByPrice
            : (filterProductsByPrice
                as List<Query$FilterProductsByPrice$filterProductsByPrice?>?),
        filterProductsByPriceTotalNumber:
            filterProductsByPriceTotalNumber == _undefined
                ? _instance.filterProductsByPriceTotalNumber
                : (filterProductsByPriceTotalNumber as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes filterProductsByPrice(
          Iterable<Query$FilterProductsByPrice$filterProductsByPrice?>? Function(
                  Iterable<
                      CopyWith$Query$FilterProductsByPrice$filterProductsByPrice<
                          Query$FilterProductsByPrice$filterProductsByPrice>?>?)
              _fn) =>
      call(
          filterProductsByPrice:
              _fn(_instance.filterProductsByPrice?.map((e) => e == null
                  ? null
                  : CopyWith$Query$FilterProductsByPrice$filterProductsByPrice(
                      e,
                      (i) => i,
                    )))?.toList());
}

class _CopyWithStubImpl$Query$FilterProductsByPrice<TRes>
    implements CopyWith$Query$FilterProductsByPrice<TRes> {
  _CopyWithStubImpl$Query$FilterProductsByPrice(this._res);

  TRes _res;

  call({
    List<Query$FilterProductsByPrice$filterProductsByPrice?>?
        filterProductsByPrice,
    int? filterProductsByPriceTotalNumber,
    String? $__typename,
  }) =>
      _res;

  filterProductsByPrice(_fn) => _res;
}

const documentNodeQueryFilterProductsByPrice = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'FilterProductsByPrice'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'priceLimit')),
        type: NamedTypeNode(
          name: NameNode(value: 'Float'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageCount')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageNumber')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'filterProductsByPrice'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'priceLimit'),
            value: VariableNode(name: NameNode(value: 'priceLimit')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageCount'),
            value: VariableNode(name: NameNode(value: 'pageCount')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageNumber'),
            value: VariableNode(name: NameNode(value: 'pageNumber')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isFeatured'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'category'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'size'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'seller'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'profilePictureUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'condition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'discountPrice'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'condition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'price'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'parcelSize'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'views'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'likes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'userLiked'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'imagesUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'likes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'color'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'materials'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'brand'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: 'filterProductsByPriceTotalNumber'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$FilterProductsByPrice _parserFn$Query$FilterProductsByPrice(
        Map<String, dynamic> data) =>
    Query$FilterProductsByPrice.fromJson(data);
typedef OnQueryComplete$Query$FilterProductsByPrice = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$FilterProductsByPrice?,
);

class Options$Query$FilterProductsByPrice
    extends graphql.QueryOptions<Query$FilterProductsByPrice> {
  Options$Query$FilterProductsByPrice({
    String? operationName,
    required Variables$Query$FilterProductsByPrice variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$FilterProductsByPrice? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$FilterProductsByPrice? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null
                        ? null
                        : _parserFn$Query$FilterProductsByPrice(data),
                  ),
          onError: onError,
          document: documentNodeQueryFilterProductsByPrice,
          parserFn: _parserFn$Query$FilterProductsByPrice,
        );

  final OnQueryComplete$Query$FilterProductsByPrice? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$FilterProductsByPrice
    extends graphql.WatchQueryOptions<Query$FilterProductsByPrice> {
  WatchOptions$Query$FilterProductsByPrice({
    String? operationName,
    required Variables$Query$FilterProductsByPrice variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$FilterProductsByPrice? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryFilterProductsByPrice,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$FilterProductsByPrice,
        );
}

class FetchMoreOptions$Query$FilterProductsByPrice
    extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$FilterProductsByPrice({
    required graphql.UpdateQuery updateQuery,
    required Variables$Query$FilterProductsByPrice variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables.toJson(),
          document: documentNodeQueryFilterProductsByPrice,
        );
}

extension ClientExtension$Query$FilterProductsByPrice on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$FilterProductsByPrice>>
      query$FilterProductsByPrice(
              Options$Query$FilterProductsByPrice options) async =>
          await this.query(options);
  graphql.ObservableQuery<Query$FilterProductsByPrice>
      watchQuery$FilterProductsByPrice(
              WatchOptions$Query$FilterProductsByPrice options) =>
          this.watchQuery(options);
  void writeQuery$FilterProductsByPrice({
    required Query$FilterProductsByPrice data,
    required Variables$Query$FilterProductsByPrice variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation: graphql.Operation(
              document: documentNodeQueryFilterProductsByPrice),
          variables: variables.toJson(),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$FilterProductsByPrice? readQuery$FilterProductsByPrice({
    required Variables$Query$FilterProductsByPrice variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation:
            graphql.Operation(document: documentNodeQueryFilterProductsByPrice),
        variables: variables.toJson(),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$FilterProductsByPrice.fromJson(result);
  }
}

class Query$FilterProductsByPrice$filterProductsByPrice {
  Query$FilterProductsByPrice$filterProductsByPrice({
    required this.id,
    required this.name,
    required this.description,
    required this.isFeatured,
    this.category,
    this.size,
    this.seller,
    this.condition,
    required this.discountPrice,
    this.price,
    this.parcelSize,
    required this.views,
    required this.likes,
    this.userLiked,
    required this.imagesUrl,
    required this.createdAt,
    required this.updatedAt,
    required this.color,
    this.materials,
    this.brand,
    this.$__typename = 'ProductType',
  });

  factory Query$FilterProductsByPrice$filterProductsByPrice.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$description = json['description'];
    final l$isFeatured = json['isFeatured'];
    final l$category = json['category'];
    final l$size = json['size'];
    final l$seller = json['seller'];
    final l$condition = json['condition'];
    final l$discountPrice = json['discountPrice'];
    final l$price = json['price'];
    final l$parcelSize = json['parcelSize'];
    final l$views = json['views'];
    final l$likes = json['likes'];
    final l$userLiked = json['userLiked'];
    final l$imagesUrl = json['imagesUrl'];
    final l$createdAt = json['createdAt'];
    final l$updatedAt = json['updatedAt'];
    final l$color = json['color'];
    final l$materials = json['materials'];
    final l$brand = json['brand'];
    final l$$__typename = json['__typename'];
    return Query$FilterProductsByPrice$filterProductsByPrice(
      id: (l$id as String),
      name: (l$name as String),
      description: (l$description as String),
      isFeatured: (l$isFeatured as bool),
      category: l$category == null
          ? null
          : Query$FilterProductsByPrice$filterProductsByPrice$category.fromJson(
              (l$category as Map<String, dynamic>)),
      size: l$size == null
          ? null
          : Query$FilterProductsByPrice$filterProductsByPrice$size.fromJson(
              (l$size as Map<String, dynamic>)),
      seller: l$seller == null
          ? null
          : Query$FilterProductsByPrice$filterProductsByPrice$seller.fromJson(
              (l$seller as Map<String, dynamic>)),
      condition: l$condition == null
          ? null
          : fromJson$Enum$ProductsProductConditionChoices(
              (l$condition as String)),
      discountPrice: (l$discountPrice as String),
      price: (l$price as num?)?.toDouble(),
      parcelSize: l$parcelSize == null
          ? null
          : fromJson$Enum$ProductsProductParcelSizeChoices(
              (l$parcelSize as String)),
      views: (l$views as int),
      likes: (l$likes as int),
      userLiked: (l$userLiked as bool?),
      imagesUrl:
          (l$imagesUrl as List<dynamic>).map((e) => (e as String)).toList(),
      createdAt: DateTime.parse((l$createdAt as String)),
      updatedAt: DateTime.parse((l$updatedAt as String)),
      color: (l$color as List<dynamic>).map((e) => (e as String)).toList(),
      materials: (l$materials as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$FilterProductsByPrice$filterProductsByPrice$materials
                  .fromJson((e as Map<String, dynamic>)))
          .toList(),
      brand: l$brand == null
          ? null
          : Query$FilterProductsByPrice$filterProductsByPrice$brand.fromJson(
              (l$brand as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String name;

  final String description;

  final bool isFeatured;

  final Query$FilterProductsByPrice$filterProductsByPrice$category? category;

  final Query$FilterProductsByPrice$filterProductsByPrice$size? size;

  final Query$FilterProductsByPrice$filterProductsByPrice$seller? seller;

  final Enum$ProductsProductConditionChoices? condition;

  final String discountPrice;

  final double? price;

  final Enum$ProductsProductParcelSizeChoices? parcelSize;

  final int views;

  final int likes;

  final bool? userLiked;

  final List<String> imagesUrl;

  final DateTime createdAt;

  final DateTime updatedAt;

  final List<String> color;

  final List<Query$FilterProductsByPrice$filterProductsByPrice$materials?>?
      materials;

  final Query$FilterProductsByPrice$filterProductsByPrice$brand? brand;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$description = description;
    _resultData['description'] = l$description;
    final l$isFeatured = isFeatured;
    _resultData['isFeatured'] = l$isFeatured;
    final l$category = category;
    _resultData['category'] = l$category?.toJson();
    final l$size = size;
    _resultData['size'] = l$size?.toJson();
    final l$seller = seller;
    _resultData['seller'] = l$seller?.toJson();
    final l$condition = condition;
    _resultData['condition'] = l$condition == null
        ? null
        : toJson$Enum$ProductsProductConditionChoices(l$condition);
    final l$discountPrice = discountPrice;
    _resultData['discountPrice'] = l$discountPrice;
    final l$price = price;
    _resultData['price'] = l$price;
    final l$parcelSize = parcelSize;
    _resultData['parcelSize'] = l$parcelSize == null
        ? null
        : toJson$Enum$ProductsProductParcelSizeChoices(l$parcelSize);
    final l$views = views;
    _resultData['views'] = l$views;
    final l$likes = likes;
    _resultData['likes'] = l$likes;
    final l$userLiked = userLiked;
    _resultData['userLiked'] = l$userLiked;
    final l$imagesUrl = imagesUrl;
    _resultData['imagesUrl'] = l$imagesUrl.map((e) => e).toList();
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt.toIso8601String();
    final l$color = color;
    _resultData['color'] = l$color.map((e) => e).toList();
    final l$materials = materials;
    _resultData['materials'] = l$materials?.map((e) => e?.toJson()).toList();
    final l$brand = brand;
    _resultData['brand'] = l$brand?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$description = description;
    final l$isFeatured = isFeatured;
    final l$category = category;
    final l$size = size;
    final l$seller = seller;
    final l$condition = condition;
    final l$discountPrice = discountPrice;
    final l$price = price;
    final l$parcelSize = parcelSize;
    final l$views = views;
    final l$likes = likes;
    final l$userLiked = userLiked;
    final l$imagesUrl = imagesUrl;
    final l$createdAt = createdAt;
    final l$updatedAt = updatedAt;
    final l$color = color;
    final l$materials = materials;
    final l$brand = brand;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$description,
      l$isFeatured,
      l$category,
      l$size,
      l$seller,
      l$condition,
      l$discountPrice,
      l$price,
      l$parcelSize,
      l$views,
      l$likes,
      l$userLiked,
      Object.hashAll(l$imagesUrl.map((v) => v)),
      l$createdAt,
      l$updatedAt,
      Object.hashAll(l$color.map((v) => v)),
      l$materials == null ? null : Object.hashAll(l$materials.map((v) => v)),
      l$brand,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$FilterProductsByPrice$filterProductsByPrice ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (l$description != lOther$description) {
      return false;
    }
    final l$isFeatured = isFeatured;
    final lOther$isFeatured = other.isFeatured;
    if (l$isFeatured != lOther$isFeatured) {
      return false;
    }
    final l$category = category;
    final lOther$category = other.category;
    if (l$category != lOther$category) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (l$size != lOther$size) {
      return false;
    }
    final l$seller = seller;
    final lOther$seller = other.seller;
    if (l$seller != lOther$seller) {
      return false;
    }
    final l$condition = condition;
    final lOther$condition = other.condition;
    if (l$condition != lOther$condition) {
      return false;
    }
    final l$discountPrice = discountPrice;
    final lOther$discountPrice = other.discountPrice;
    if (l$discountPrice != lOther$discountPrice) {
      return false;
    }
    final l$price = price;
    final lOther$price = other.price;
    if (l$price != lOther$price) {
      return false;
    }
    final l$parcelSize = parcelSize;
    final lOther$parcelSize = other.parcelSize;
    if (l$parcelSize != lOther$parcelSize) {
      return false;
    }
    final l$views = views;
    final lOther$views = other.views;
    if (l$views != lOther$views) {
      return false;
    }
    final l$likes = likes;
    final lOther$likes = other.likes;
    if (l$likes != lOther$likes) {
      return false;
    }
    final l$userLiked = userLiked;
    final lOther$userLiked = other.userLiked;
    if (l$userLiked != lOther$userLiked) {
      return false;
    }
    final l$imagesUrl = imagesUrl;
    final lOther$imagesUrl = other.imagesUrl;
    if (l$imagesUrl.length != lOther$imagesUrl.length) {
      return false;
    }
    for (int i = 0; i < l$imagesUrl.length; i++) {
      final l$imagesUrl$entry = l$imagesUrl[i];
      final lOther$imagesUrl$entry = lOther$imagesUrl[i];
      if (l$imagesUrl$entry != lOther$imagesUrl$entry) {
        return false;
      }
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$color = color;
    final lOther$color = other.color;
    if (l$color.length != lOther$color.length) {
      return false;
    }
    for (int i = 0; i < l$color.length; i++) {
      final l$color$entry = l$color[i];
      final lOther$color$entry = lOther$color[i];
      if (l$color$entry != lOther$color$entry) {
        return false;
      }
    }
    final l$materials = materials;
    final lOther$materials = other.materials;
    if (l$materials != null && lOther$materials != null) {
      if (l$materials.length != lOther$materials.length) {
        return false;
      }
      for (int i = 0; i < l$materials.length; i++) {
        final l$materials$entry = l$materials[i];
        final lOther$materials$entry = lOther$materials[i];
        if (l$materials$entry != lOther$materials$entry) {
          return false;
        }
      }
    } else if (l$materials != lOther$materials) {
      return false;
    }
    final l$brand = brand;
    final lOther$brand = other.brand;
    if (l$brand != lOther$brand) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$FilterProductsByPrice$filterProductsByPrice
    on Query$FilterProductsByPrice$filterProductsByPrice {
  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice<
          Query$FilterProductsByPrice$filterProductsByPrice>
      get copyWith =>
          CopyWith$Query$FilterProductsByPrice$filterProductsByPrice(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$FilterProductsByPrice$filterProductsByPrice<
    TRes> {
  factory CopyWith$Query$FilterProductsByPrice$filterProductsByPrice(
    Query$FilterProductsByPrice$filterProductsByPrice instance,
    TRes Function(Query$FilterProductsByPrice$filterProductsByPrice) then,
  ) = _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice;

  factory CopyWith$Query$FilterProductsByPrice$filterProductsByPrice.stub(
          TRes res) =
      _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice;

  TRes call({
    String? id,
    String? name,
    String? description,
    bool? isFeatured,
    Query$FilterProductsByPrice$filterProductsByPrice$category? category,
    Query$FilterProductsByPrice$filterProductsByPrice$size? size,
    Query$FilterProductsByPrice$filterProductsByPrice$seller? seller,
    Enum$ProductsProductConditionChoices? condition,
    String? discountPrice,
    double? price,
    Enum$ProductsProductParcelSizeChoices? parcelSize,
    int? views,
    int? likes,
    bool? userLiked,
    List<String>? imagesUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<String>? color,
    List<Query$FilterProductsByPrice$filterProductsByPrice$materials?>?
        materials,
    Query$FilterProductsByPrice$filterProductsByPrice$brand? brand,
    String? $__typename,
  });
  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$category<TRes>
      get category;
  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$size<TRes>
      get size;
  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$seller<TRes>
      get seller;
  TRes materials(
      Iterable<Query$FilterProductsByPrice$filterProductsByPrice$materials?>? Function(
              Iterable<
                  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$materials<
                      Query$FilterProductsByPrice$filterProductsByPrice$materials>?>?)
          _fn);
  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$brand<TRes>
      get brand;
}

class _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice<TRes>
    implements
        CopyWith$Query$FilterProductsByPrice$filterProductsByPrice<TRes> {
  _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice(
    this._instance,
    this._then,
  );

  final Query$FilterProductsByPrice$filterProductsByPrice _instance;

  final TRes Function(Query$FilterProductsByPrice$filterProductsByPrice) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? description = _undefined,
    Object? isFeatured = _undefined,
    Object? category = _undefined,
    Object? size = _undefined,
    Object? seller = _undefined,
    Object? condition = _undefined,
    Object? discountPrice = _undefined,
    Object? price = _undefined,
    Object? parcelSize = _undefined,
    Object? views = _undefined,
    Object? likes = _undefined,
    Object? userLiked = _undefined,
    Object? imagesUrl = _undefined,
    Object? createdAt = _undefined,
    Object? updatedAt = _undefined,
    Object? color = _undefined,
    Object? materials = _undefined,
    Object? brand = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$FilterProductsByPrice$filterProductsByPrice(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        description: description == _undefined || description == null
            ? _instance.description
            : (description as String),
        isFeatured: isFeatured == _undefined || isFeatured == null
            ? _instance.isFeatured
            : (isFeatured as bool),
        category: category == _undefined
            ? _instance.category
            : (category
                as Query$FilterProductsByPrice$filterProductsByPrice$category?),
        size: size == _undefined
            ? _instance.size
            : (size as Query$FilterProductsByPrice$filterProductsByPrice$size?),
        seller: seller == _undefined
            ? _instance.seller
            : (seller
                as Query$FilterProductsByPrice$filterProductsByPrice$seller?),
        condition: condition == _undefined
            ? _instance.condition
            : (condition as Enum$ProductsProductConditionChoices?),
        discountPrice: discountPrice == _undefined || discountPrice == null
            ? _instance.discountPrice
            : (discountPrice as String),
        price: price == _undefined ? _instance.price : (price as double?),
        parcelSize: parcelSize == _undefined
            ? _instance.parcelSize
            : (parcelSize as Enum$ProductsProductParcelSizeChoices?),
        views: views == _undefined || views == null
            ? _instance.views
            : (views as int),
        likes: likes == _undefined || likes == null
            ? _instance.likes
            : (likes as int),
        userLiked: userLiked == _undefined
            ? _instance.userLiked
            : (userLiked as bool?),
        imagesUrl: imagesUrl == _undefined || imagesUrl == null
            ? _instance.imagesUrl
            : (imagesUrl as List<String>),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        updatedAt: updatedAt == _undefined || updatedAt == null
            ? _instance.updatedAt
            : (updatedAt as DateTime),
        color: color == _undefined || color == null
            ? _instance.color
            : (color as List<String>),
        materials: materials == _undefined
            ? _instance.materials
            : (materials as List<
                Query$FilterProductsByPrice$filterProductsByPrice$materials?>?),
        brand: brand == _undefined
            ? _instance.brand
            : (brand
                as Query$FilterProductsByPrice$filterProductsByPrice$brand?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$category<TRes>
      get category {
    final local$category = _instance.category;
    return local$category == null
        ? CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$category
            .stub(_then(_instance))
        : CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$category(
            local$category, (e) => call(category: e));
  }

  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$size<TRes>
      get size {
    final local$size = _instance.size;
    return local$size == null
        ? CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$size.stub(
            _then(_instance))
        : CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$size(
            local$size, (e) => call(size: e));
  }

  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$seller<TRes>
      get seller {
    final local$seller = _instance.seller;
    return local$seller == null
        ? CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$seller
            .stub(_then(_instance))
        : CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$seller(
            local$seller, (e) => call(seller: e));
  }

  TRes materials(
          Iterable<Query$FilterProductsByPrice$filterProductsByPrice$materials?>? Function(
                  Iterable<
                      CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$materials<
                          Query$FilterProductsByPrice$filterProductsByPrice$materials>?>?)
              _fn) =>
      call(
          materials: _fn(_instance.materials?.map((e) => e == null
              ? null
              : CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$materials(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$brand<TRes>
      get brand {
    final local$brand = _instance.brand;
    return local$brand == null
        ? CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$brand.stub(
            _then(_instance))
        : CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$brand(
            local$brand, (e) => call(brand: e));
  }
}

class _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice<TRes>
    implements
        CopyWith$Query$FilterProductsByPrice$filterProductsByPrice<TRes> {
  _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice(
      this._res);

  TRes _res;

  call({
    String? id,
    String? name,
    String? description,
    bool? isFeatured,
    Query$FilterProductsByPrice$filterProductsByPrice$category? category,
    Query$FilterProductsByPrice$filterProductsByPrice$size? size,
    Query$FilterProductsByPrice$filterProductsByPrice$seller? seller,
    Enum$ProductsProductConditionChoices? condition,
    String? discountPrice,
    double? price,
    Enum$ProductsProductParcelSizeChoices? parcelSize,
    int? views,
    int? likes,
    bool? userLiked,
    List<String>? imagesUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<String>? color,
    List<Query$FilterProductsByPrice$filterProductsByPrice$materials?>?
        materials,
    Query$FilterProductsByPrice$filterProductsByPrice$brand? brand,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$category<TRes>
      get category =>
          CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$category
              .stub(_res);

  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$size<TRes>
      get size =>
          CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$size.stub(
              _res);

  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$seller<TRes>
      get seller =>
          CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$seller
              .stub(_res);

  materials(_fn) => _res;

  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$brand<TRes>
      get brand =>
          CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$brand.stub(
              _res);
}

class Query$FilterProductsByPrice$filterProductsByPrice$category {
  Query$FilterProductsByPrice$filterProductsByPrice$category({
    this.id,
    this.name,
    this.$__typename = 'CategoryType',
  });

  factory Query$FilterProductsByPrice$filterProductsByPrice$category.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$FilterProductsByPrice$filterProductsByPrice$category(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$FilterProductsByPrice$filterProductsByPrice$category ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$FilterProductsByPrice$filterProductsByPrice$category
    on Query$FilterProductsByPrice$filterProductsByPrice$category {
  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$category<
          Query$FilterProductsByPrice$filterProductsByPrice$category>
      get copyWith =>
          CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$category(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$category<
    TRes> {
  factory CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$category(
    Query$FilterProductsByPrice$filterProductsByPrice$category instance,
    TRes Function(Query$FilterProductsByPrice$filterProductsByPrice$category)
        then,
  ) = _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice$category;

  factory CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$category.stub(
          TRes res) =
      _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice$category;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice$category<
        TRes>
    implements
        CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$category<
            TRes> {
  _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice$category(
    this._instance,
    this._then,
  );

  final Query$FilterProductsByPrice$filterProductsByPrice$category _instance;

  final TRes Function(
      Query$FilterProductsByPrice$filterProductsByPrice$category) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$FilterProductsByPrice$filterProductsByPrice$category(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice$category<
        TRes>
    implements
        CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$category<
            TRes> {
  _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice$category(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$FilterProductsByPrice$filterProductsByPrice$size {
  Query$FilterProductsByPrice$filterProductsByPrice$size({
    this.id,
    this.name,
    this.$__typename = 'SizeType',
  });

  factory Query$FilterProductsByPrice$filterProductsByPrice$size.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$FilterProductsByPrice$filterProductsByPrice$size(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$FilterProductsByPrice$filterProductsByPrice$size ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$FilterProductsByPrice$filterProductsByPrice$size
    on Query$FilterProductsByPrice$filterProductsByPrice$size {
  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$size<
          Query$FilterProductsByPrice$filterProductsByPrice$size>
      get copyWith =>
          CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$size(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$size<
    TRes> {
  factory CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$size(
    Query$FilterProductsByPrice$filterProductsByPrice$size instance,
    TRes Function(Query$FilterProductsByPrice$filterProductsByPrice$size) then,
  ) = _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice$size;

  factory CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$size.stub(
          TRes res) =
      _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice$size;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice$size<TRes>
    implements
        CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$size<TRes> {
  _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice$size(
    this._instance,
    this._then,
  );

  final Query$FilterProductsByPrice$filterProductsByPrice$size _instance;

  final TRes Function(Query$FilterProductsByPrice$filterProductsByPrice$size)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$FilterProductsByPrice$filterProductsByPrice$size(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice$size<
        TRes>
    implements
        CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$size<TRes> {
  _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice$size(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$FilterProductsByPrice$filterProductsByPrice$seller {
  Query$FilterProductsByPrice$filterProductsByPrice$seller({
    this.id,
    this.username,
    this.profilePictureUrl,
    this.$__typename = 'UserType',
  });

  factory Query$FilterProductsByPrice$filterProductsByPrice$seller.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$$__typename = json['__typename'];
    return Query$FilterProductsByPrice$filterProductsByPrice$seller(
      id: (l$id as int?),
      username: (l$username as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String? profilePictureUrl;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$profilePictureUrl = profilePictureUrl;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$profilePictureUrl,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$FilterProductsByPrice$filterProductsByPrice$seller ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$FilterProductsByPrice$filterProductsByPrice$seller
    on Query$FilterProductsByPrice$filterProductsByPrice$seller {
  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$seller<
          Query$FilterProductsByPrice$filterProductsByPrice$seller>
      get copyWith =>
          CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$seller(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$seller<
    TRes> {
  factory CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$seller(
    Query$FilterProductsByPrice$filterProductsByPrice$seller instance,
    TRes Function(Query$FilterProductsByPrice$filterProductsByPrice$seller)
        then,
  ) = _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice$seller;

  factory CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$seller.stub(
          TRes res) =
      _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice$seller;

  TRes call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice$seller<
        TRes>
    implements
        CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$seller<
            TRes> {
  _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice$seller(
    this._instance,
    this._then,
  );

  final Query$FilterProductsByPrice$filterProductsByPrice$seller _instance;

  final TRes Function(Query$FilterProductsByPrice$filterProductsByPrice$seller)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$FilterProductsByPrice$filterProductsByPrice$seller(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice$seller<
        TRes>
    implements
        CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$seller<
            TRes> {
  _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice$seller(
      this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? $__typename,
  }) =>
      _res;
}

class Query$FilterProductsByPrice$filterProductsByPrice$materials {
  Query$FilterProductsByPrice$filterProductsByPrice$materials({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$FilterProductsByPrice$filterProductsByPrice$materials.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$FilterProductsByPrice$filterProductsByPrice$materials(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$FilterProductsByPrice$filterProductsByPrice$materials ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$FilterProductsByPrice$filterProductsByPrice$materials
    on Query$FilterProductsByPrice$filterProductsByPrice$materials {
  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$materials<
          Query$FilterProductsByPrice$filterProductsByPrice$materials>
      get copyWith =>
          CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$materials(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$materials<
    TRes> {
  factory CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$materials(
    Query$FilterProductsByPrice$filterProductsByPrice$materials instance,
    TRes Function(Query$FilterProductsByPrice$filterProductsByPrice$materials)
        then,
  ) = _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice$materials;

  factory CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$materials.stub(
          TRes res) =
      _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice$materials;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice$materials<
        TRes>
    implements
        CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$materials<
            TRes> {
  _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice$materials(
    this._instance,
    this._then,
  );

  final Query$FilterProductsByPrice$filterProductsByPrice$materials _instance;

  final TRes Function(
      Query$FilterProductsByPrice$filterProductsByPrice$materials) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$FilterProductsByPrice$filterProductsByPrice$materials(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice$materials<
        TRes>
    implements
        CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$materials<
            TRes> {
  _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice$materials(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$FilterProductsByPrice$filterProductsByPrice$brand {
  Query$FilterProductsByPrice$filterProductsByPrice$brand({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$FilterProductsByPrice$filterProductsByPrice$brand.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$FilterProductsByPrice$filterProductsByPrice$brand(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$FilterProductsByPrice$filterProductsByPrice$brand ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$FilterProductsByPrice$filterProductsByPrice$brand
    on Query$FilterProductsByPrice$filterProductsByPrice$brand {
  CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$brand<
          Query$FilterProductsByPrice$filterProductsByPrice$brand>
      get copyWith =>
          CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$brand(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$brand<
    TRes> {
  factory CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$brand(
    Query$FilterProductsByPrice$filterProductsByPrice$brand instance,
    TRes Function(Query$FilterProductsByPrice$filterProductsByPrice$brand) then,
  ) = _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice$brand;

  factory CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$brand.stub(
          TRes res) =
      _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice$brand;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice$brand<
        TRes>
    implements
        CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$brand<TRes> {
  _CopyWithImpl$Query$FilterProductsByPrice$filterProductsByPrice$brand(
    this._instance,
    this._then,
  );

  final Query$FilterProductsByPrice$filterProductsByPrice$brand _instance;

  final TRes Function(Query$FilterProductsByPrice$filterProductsByPrice$brand)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$FilterProductsByPrice$filterProductsByPrice$brand(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice$brand<
        TRes>
    implements
        CopyWith$Query$FilterProductsByPrice$filterProductsByPrice$brand<TRes> {
  _CopyWithStubImpl$Query$FilterProductsByPrice$filterProductsByPrice$brand(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$PopularBrands {
  factory Variables$Query$PopularBrands({required int top}) =>
      Variables$Query$PopularBrands._({
        r'top': top,
      });

  Variables$Query$PopularBrands._(this._$data);

  factory Variables$Query$PopularBrands.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$top = data['top'];
    result$data['top'] = (l$top as int);
    return Variables$Query$PopularBrands._(result$data);
  }

  Map<String, dynamic> _$data;

  int get top => (_$data['top'] as int);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$top = top;
    result$data['top'] = l$top;
    return result$data;
  }

  CopyWith$Variables$Query$PopularBrands<Variables$Query$PopularBrands>
      get copyWith => CopyWith$Variables$Query$PopularBrands(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$PopularBrands ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$top = top;
    final lOther$top = other.top;
    if (l$top != lOther$top) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$top = top;
    return Object.hashAll([l$top]);
  }
}

abstract class CopyWith$Variables$Query$PopularBrands<TRes> {
  factory CopyWith$Variables$Query$PopularBrands(
    Variables$Query$PopularBrands instance,
    TRes Function(Variables$Query$PopularBrands) then,
  ) = _CopyWithImpl$Variables$Query$PopularBrands;

  factory CopyWith$Variables$Query$PopularBrands.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$PopularBrands;

  TRes call({int? top});
}

class _CopyWithImpl$Variables$Query$PopularBrands<TRes>
    implements CopyWith$Variables$Query$PopularBrands<TRes> {
  _CopyWithImpl$Variables$Query$PopularBrands(
    this._instance,
    this._then,
  );

  final Variables$Query$PopularBrands _instance;

  final TRes Function(Variables$Query$PopularBrands) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? top = _undefined}) =>
      _then(Variables$Query$PopularBrands._({
        ..._instance._$data,
        if (top != _undefined && top != null) 'top': (top as int),
      }));
}

class _CopyWithStubImpl$Variables$Query$PopularBrands<TRes>
    implements CopyWith$Variables$Query$PopularBrands<TRes> {
  _CopyWithStubImpl$Variables$Query$PopularBrands(this._res);

  TRes _res;

  call({int? top}) => _res;
}

class Query$PopularBrands {
  Query$PopularBrands({
    this.popularBrands,
    this.$__typename = 'Query',
  });

  factory Query$PopularBrands.fromJson(Map<String, dynamic> json) {
    final l$popularBrands = json['popularBrands'];
    final l$$__typename = json['__typename'];
    return Query$PopularBrands(
      popularBrands: (l$popularBrands as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$PopularBrands$popularBrands.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$PopularBrands$popularBrands?>? popularBrands;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$popularBrands = popularBrands;
    _resultData['popularBrands'] =
        l$popularBrands?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$popularBrands = popularBrands;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$popularBrands == null
          ? null
          : Object.hashAll(l$popularBrands.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$PopularBrands || runtimeType != other.runtimeType) {
      return false;
    }
    final l$popularBrands = popularBrands;
    final lOther$popularBrands = other.popularBrands;
    if (l$popularBrands != null && lOther$popularBrands != null) {
      if (l$popularBrands.length != lOther$popularBrands.length) {
        return false;
      }
      for (int i = 0; i < l$popularBrands.length; i++) {
        final l$popularBrands$entry = l$popularBrands[i];
        final lOther$popularBrands$entry = lOther$popularBrands[i];
        if (l$popularBrands$entry != lOther$popularBrands$entry) {
          return false;
        }
      }
    } else if (l$popularBrands != lOther$popularBrands) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$PopularBrands on Query$PopularBrands {
  CopyWith$Query$PopularBrands<Query$PopularBrands> get copyWith =>
      CopyWith$Query$PopularBrands(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$PopularBrands<TRes> {
  factory CopyWith$Query$PopularBrands(
    Query$PopularBrands instance,
    TRes Function(Query$PopularBrands) then,
  ) = _CopyWithImpl$Query$PopularBrands;

  factory CopyWith$Query$PopularBrands.stub(TRes res) =
      _CopyWithStubImpl$Query$PopularBrands;

  TRes call({
    List<Query$PopularBrands$popularBrands?>? popularBrands,
    String? $__typename,
  });
  TRes popularBrands(
      Iterable<Query$PopularBrands$popularBrands?>? Function(
              Iterable<
                  CopyWith$Query$PopularBrands$popularBrands<
                      Query$PopularBrands$popularBrands>?>?)
          _fn);
}

class _CopyWithImpl$Query$PopularBrands<TRes>
    implements CopyWith$Query$PopularBrands<TRes> {
  _CopyWithImpl$Query$PopularBrands(
    this._instance,
    this._then,
  );

  final Query$PopularBrands _instance;

  final TRes Function(Query$PopularBrands) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? popularBrands = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$PopularBrands(
        popularBrands: popularBrands == _undefined
            ? _instance.popularBrands
            : (popularBrands as List<Query$PopularBrands$popularBrands?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes popularBrands(
          Iterable<Query$PopularBrands$popularBrands?>? Function(
                  Iterable<
                      CopyWith$Query$PopularBrands$popularBrands<
                          Query$PopularBrands$popularBrands>?>?)
              _fn) =>
      call(
          popularBrands: _fn(_instance.popularBrands?.map((e) => e == null
              ? null
              : CopyWith$Query$PopularBrands$popularBrands(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$PopularBrands<TRes>
    implements CopyWith$Query$PopularBrands<TRes> {
  _CopyWithStubImpl$Query$PopularBrands(this._res);

  TRes _res;

  call({
    List<Query$PopularBrands$popularBrands?>? popularBrands,
    String? $__typename,
  }) =>
      _res;

  popularBrands(_fn) => _res;
}

const documentNodeQueryPopularBrands = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'PopularBrands'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'top')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      )
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'popularBrands'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'top'),
            value: VariableNode(name: NameNode(value: 'top')),
          )
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$PopularBrands _parserFn$Query$PopularBrands(Map<String, dynamic> data) =>
    Query$PopularBrands.fromJson(data);
typedef OnQueryComplete$Query$PopularBrands = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$PopularBrands?,
);

class Options$Query$PopularBrands
    extends graphql.QueryOptions<Query$PopularBrands> {
  Options$Query$PopularBrands({
    String? operationName,
    required Variables$Query$PopularBrands variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$PopularBrands? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$PopularBrands? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$PopularBrands(data),
                  ),
          onError: onError,
          document: documentNodeQueryPopularBrands,
          parserFn: _parserFn$Query$PopularBrands,
        );

  final OnQueryComplete$Query$PopularBrands? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$PopularBrands
    extends graphql.WatchQueryOptions<Query$PopularBrands> {
  WatchOptions$Query$PopularBrands({
    String? operationName,
    required Variables$Query$PopularBrands variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$PopularBrands? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryPopularBrands,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$PopularBrands,
        );
}

class FetchMoreOptions$Query$PopularBrands extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$PopularBrands({
    required graphql.UpdateQuery updateQuery,
    required Variables$Query$PopularBrands variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables.toJson(),
          document: documentNodeQueryPopularBrands,
        );
}

extension ClientExtension$Query$PopularBrands on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$PopularBrands>> query$PopularBrands(
          Options$Query$PopularBrands options) async =>
      await this.query(options);
  graphql.ObservableQuery<Query$PopularBrands> watchQuery$PopularBrands(
          WatchOptions$Query$PopularBrands options) =>
      this.watchQuery(options);
  void writeQuery$PopularBrands({
    required Query$PopularBrands data,
    required Variables$Query$PopularBrands variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation:
              graphql.Operation(document: documentNodeQueryPopularBrands),
          variables: variables.toJson(),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$PopularBrands? readQuery$PopularBrands({
    required Variables$Query$PopularBrands variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQueryPopularBrands),
        variables: variables.toJson(),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$PopularBrands.fromJson(result);
  }
}

class Query$PopularBrands$popularBrands {
  Query$PopularBrands$popularBrands({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$PopularBrands$popularBrands.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$PopularBrands$popularBrands(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$PopularBrands$popularBrands ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$PopularBrands$popularBrands
    on Query$PopularBrands$popularBrands {
  CopyWith$Query$PopularBrands$popularBrands<Query$PopularBrands$popularBrands>
      get copyWith => CopyWith$Query$PopularBrands$popularBrands(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$PopularBrands$popularBrands<TRes> {
  factory CopyWith$Query$PopularBrands$popularBrands(
    Query$PopularBrands$popularBrands instance,
    TRes Function(Query$PopularBrands$popularBrands) then,
  ) = _CopyWithImpl$Query$PopularBrands$popularBrands;

  factory CopyWith$Query$PopularBrands$popularBrands.stub(TRes res) =
      _CopyWithStubImpl$Query$PopularBrands$popularBrands;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$PopularBrands$popularBrands<TRes>
    implements CopyWith$Query$PopularBrands$popularBrands<TRes> {
  _CopyWithImpl$Query$PopularBrands$popularBrands(
    this._instance,
    this._then,
  );

  final Query$PopularBrands$popularBrands _instance;

  final TRes Function(Query$PopularBrands$popularBrands) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$PopularBrands$popularBrands(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$PopularBrands$popularBrands<TRes>
    implements CopyWith$Query$PopularBrands$popularBrands<TRes> {
  _CopyWithStubImpl$Query$PopularBrands$popularBrands(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$UserOrders {
  factory Variables$Query$UserOrders({
    Input$OrderFiltersInput? filters,
    int? pageCount,
    int? pageNumber,
  }) =>
      Variables$Query$UserOrders._({
        if (filters != null) r'filters': filters,
        if (pageCount != null) r'pageCount': pageCount,
        if (pageNumber != null) r'pageNumber': pageNumber,
      });

  Variables$Query$UserOrders._(this._$data);

  factory Variables$Query$UserOrders.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('filters')) {
      final l$filters = data['filters'];
      result$data['filters'] = l$filters == null
          ? null
          : Input$OrderFiltersInput.fromJson(
              (l$filters as Map<String, dynamic>));
    }
    if (data.containsKey('pageCount')) {
      final l$pageCount = data['pageCount'];
      result$data['pageCount'] = (l$pageCount as int?);
    }
    if (data.containsKey('pageNumber')) {
      final l$pageNumber = data['pageNumber'];
      result$data['pageNumber'] = (l$pageNumber as int?);
    }
    return Variables$Query$UserOrders._(result$data);
  }

  Map<String, dynamic> _$data;

  Input$OrderFiltersInput? get filters =>
      (_$data['filters'] as Input$OrderFiltersInput?);

  int? get pageCount => (_$data['pageCount'] as int?);

  int? get pageNumber => (_$data['pageNumber'] as int?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('filters')) {
      final l$filters = filters;
      result$data['filters'] = l$filters?.toJson();
    }
    if (_$data.containsKey('pageCount')) {
      final l$pageCount = pageCount;
      result$data['pageCount'] = l$pageCount;
    }
    if (_$data.containsKey('pageNumber')) {
      final l$pageNumber = pageNumber;
      result$data['pageNumber'] = l$pageNumber;
    }
    return result$data;
  }

  CopyWith$Variables$Query$UserOrders<Variables$Query$UserOrders>
      get copyWith => CopyWith$Variables$Query$UserOrders(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$UserOrders ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$filters = filters;
    final lOther$filters = other.filters;
    if (_$data.containsKey('filters') != other._$data.containsKey('filters')) {
      return false;
    }
    if (l$filters != lOther$filters) {
      return false;
    }
    final l$pageCount = pageCount;
    final lOther$pageCount = other.pageCount;
    if (_$data.containsKey('pageCount') !=
        other._$data.containsKey('pageCount')) {
      return false;
    }
    if (l$pageCount != lOther$pageCount) {
      return false;
    }
    final l$pageNumber = pageNumber;
    final lOther$pageNumber = other.pageNumber;
    if (_$data.containsKey('pageNumber') !=
        other._$data.containsKey('pageNumber')) {
      return false;
    }
    if (l$pageNumber != lOther$pageNumber) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$filters = filters;
    final l$pageCount = pageCount;
    final l$pageNumber = pageNumber;
    return Object.hashAll([
      _$data.containsKey('filters') ? l$filters : const {},
      _$data.containsKey('pageCount') ? l$pageCount : const {},
      _$data.containsKey('pageNumber') ? l$pageNumber : const {},
    ]);
  }
}

abstract class CopyWith$Variables$Query$UserOrders<TRes> {
  factory CopyWith$Variables$Query$UserOrders(
    Variables$Query$UserOrders instance,
    TRes Function(Variables$Query$UserOrders) then,
  ) = _CopyWithImpl$Variables$Query$UserOrders;

  factory CopyWith$Variables$Query$UserOrders.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$UserOrders;

  TRes call({
    Input$OrderFiltersInput? filters,
    int? pageCount,
    int? pageNumber,
  });
}

class _CopyWithImpl$Variables$Query$UserOrders<TRes>
    implements CopyWith$Variables$Query$UserOrders<TRes> {
  _CopyWithImpl$Variables$Query$UserOrders(
    this._instance,
    this._then,
  );

  final Variables$Query$UserOrders _instance;

  final TRes Function(Variables$Query$UserOrders) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? filters = _undefined,
    Object? pageCount = _undefined,
    Object? pageNumber = _undefined,
  }) =>
      _then(Variables$Query$UserOrders._({
        ..._instance._$data,
        if (filters != _undefined)
          'filters': (filters as Input$OrderFiltersInput?),
        if (pageCount != _undefined) 'pageCount': (pageCount as int?),
        if (pageNumber != _undefined) 'pageNumber': (pageNumber as int?),
      }));
}

class _CopyWithStubImpl$Variables$Query$UserOrders<TRes>
    implements CopyWith$Variables$Query$UserOrders<TRes> {
  _CopyWithStubImpl$Variables$Query$UserOrders(this._res);

  TRes _res;

  call({
    Input$OrderFiltersInput? filters,
    int? pageCount,
    int? pageNumber,
  }) =>
      _res;
}

class Query$UserOrders {
  Query$UserOrders({
    this.userOrders,
    this.userOrdersTotalNumber,
    this.$__typename = 'Query',
  });

  factory Query$UserOrders.fromJson(Map<String, dynamic> json) {
    final l$userOrders = json['userOrders'];
    final l$userOrdersTotalNumber = json['userOrdersTotalNumber'];
    final l$$__typename = json['__typename'];
    return Query$UserOrders(
      userOrders: (l$userOrders as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$UserOrders$userOrders.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      userOrdersTotalNumber: (l$userOrdersTotalNumber as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$UserOrders$userOrders?>? userOrders;

  final int? userOrdersTotalNumber;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userOrders = userOrders;
    _resultData['userOrders'] = l$userOrders?.map((e) => e?.toJson()).toList();
    final l$userOrdersTotalNumber = userOrdersTotalNumber;
    _resultData['userOrdersTotalNumber'] = l$userOrdersTotalNumber;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userOrders = userOrders;
    final l$userOrdersTotalNumber = userOrdersTotalNumber;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userOrders == null ? null : Object.hashAll(l$userOrders.map((v) => v)),
      l$userOrdersTotalNumber,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserOrders || runtimeType != other.runtimeType) {
      return false;
    }
    final l$userOrders = userOrders;
    final lOther$userOrders = other.userOrders;
    if (l$userOrders != null && lOther$userOrders != null) {
      if (l$userOrders.length != lOther$userOrders.length) {
        return false;
      }
      for (int i = 0; i < l$userOrders.length; i++) {
        final l$userOrders$entry = l$userOrders[i];
        final lOther$userOrders$entry = lOther$userOrders[i];
        if (l$userOrders$entry != lOther$userOrders$entry) {
          return false;
        }
      }
    } else if (l$userOrders != lOther$userOrders) {
      return false;
    }
    final l$userOrdersTotalNumber = userOrdersTotalNumber;
    final lOther$userOrdersTotalNumber = other.userOrdersTotalNumber;
    if (l$userOrdersTotalNumber != lOther$userOrdersTotalNumber) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserOrders on Query$UserOrders {
  CopyWith$Query$UserOrders<Query$UserOrders> get copyWith =>
      CopyWith$Query$UserOrders(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$UserOrders<TRes> {
  factory CopyWith$Query$UserOrders(
    Query$UserOrders instance,
    TRes Function(Query$UserOrders) then,
  ) = _CopyWithImpl$Query$UserOrders;

  factory CopyWith$Query$UserOrders.stub(TRes res) =
      _CopyWithStubImpl$Query$UserOrders;

  TRes call({
    List<Query$UserOrders$userOrders?>? userOrders,
    int? userOrdersTotalNumber,
    String? $__typename,
  });
  TRes userOrders(
      Iterable<Query$UserOrders$userOrders?>? Function(
              Iterable<
                  CopyWith$Query$UserOrders$userOrders<
                      Query$UserOrders$userOrders>?>?)
          _fn);
}

class _CopyWithImpl$Query$UserOrders<TRes>
    implements CopyWith$Query$UserOrders<TRes> {
  _CopyWithImpl$Query$UserOrders(
    this._instance,
    this._then,
  );

  final Query$UserOrders _instance;

  final TRes Function(Query$UserOrders) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userOrders = _undefined,
    Object? userOrdersTotalNumber = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserOrders(
        userOrders: userOrders == _undefined
            ? _instance.userOrders
            : (userOrders as List<Query$UserOrders$userOrders?>?),
        userOrdersTotalNumber: userOrdersTotalNumber == _undefined
            ? _instance.userOrdersTotalNumber
            : (userOrdersTotalNumber as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes userOrders(
          Iterable<Query$UserOrders$userOrders?>? Function(
                  Iterable<
                      CopyWith$Query$UserOrders$userOrders<
                          Query$UserOrders$userOrders>?>?)
              _fn) =>
      call(
          userOrders: _fn(_instance.userOrders?.map((e) => e == null
              ? null
              : CopyWith$Query$UserOrders$userOrders(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$UserOrders<TRes>
    implements CopyWith$Query$UserOrders<TRes> {
  _CopyWithStubImpl$Query$UserOrders(this._res);

  TRes _res;

  call({
    List<Query$UserOrders$userOrders?>? userOrders,
    int? userOrdersTotalNumber,
    String? $__typename,
  }) =>
      _res;

  userOrders(_fn) => _res;
}

const documentNodeQueryUserOrders = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'UserOrders'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'filters')),
        type: NamedTypeNode(
          name: NameNode(value: 'OrderFiltersInput'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageCount')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageNumber')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'userOrders'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'filters'),
            value: VariableNode(name: NameNode(value: 'filters')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageCount'),
            value: VariableNode(name: NameNode(value: 'pageCount')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageNumber'),
            value: VariableNode(name: NameNode(value: 'pageNumber')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'discountPrice'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'priceTotal'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'shippingAddress'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'shippingFee'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'status'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'user'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'email'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'fullName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'gender'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'thumbnailUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'profilePictureUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'shippingAddress'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'products'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'brand'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'category'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'color'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'condition'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'createdAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'description'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'customBrand'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'imagesUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'isFeatured'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'price'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'status'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'seller'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'thumbnailUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'username'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'style'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'updatedAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'userLiked'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'views'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'likes'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'materials'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'discountPrice'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: 'userOrdersTotalNumber'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$UserOrders _parserFn$Query$UserOrders(Map<String, dynamic> data) =>
    Query$UserOrders.fromJson(data);
typedef OnQueryComplete$Query$UserOrders = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$UserOrders?,
);

class Options$Query$UserOrders extends graphql.QueryOptions<Query$UserOrders> {
  Options$Query$UserOrders({
    String? operationName,
    Variables$Query$UserOrders? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$UserOrders? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$UserOrders? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$UserOrders(data),
                  ),
          onError: onError,
          document: documentNodeQueryUserOrders,
          parserFn: _parserFn$Query$UserOrders,
        );

  final OnQueryComplete$Query$UserOrders? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$UserOrders
    extends graphql.WatchQueryOptions<Query$UserOrders> {
  WatchOptions$Query$UserOrders({
    String? operationName,
    Variables$Query$UserOrders? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$UserOrders? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryUserOrders,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$UserOrders,
        );
}

class FetchMoreOptions$Query$UserOrders extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$UserOrders({
    required graphql.UpdateQuery updateQuery,
    Variables$Query$UserOrders? variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables?.toJson() ?? {},
          document: documentNodeQueryUserOrders,
        );
}

extension ClientExtension$Query$UserOrders on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$UserOrders>> query$UserOrders(
          [Options$Query$UserOrders? options]) async =>
      await this.query(options ?? Options$Query$UserOrders());
  graphql.ObservableQuery<Query$UserOrders> watchQuery$UserOrders(
          [WatchOptions$Query$UserOrders? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$UserOrders());
  void writeQuery$UserOrders({
    required Query$UserOrders data,
    Variables$Query$UserOrders? variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation: graphql.Operation(document: documentNodeQueryUserOrders),
          variables: variables?.toJson() ?? const {},
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$UserOrders? readQuery$UserOrders({
    Variables$Query$UserOrders? variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQueryUserOrders),
        variables: variables?.toJson() ?? const {},
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$UserOrders.fromJson(result);
  }
}

class Query$UserOrders$userOrders {
  Query$UserOrders$userOrders({
    required this.createdAt,
    required this.discountPrice,
    required this.id,
    required this.priceTotal,
    required this.shippingAddress,
    required this.shippingFee,
    this.status,
    required this.updatedAt,
    this.user,
    this.products,
    this.$__typename = 'OrderType',
  });

  factory Query$UserOrders$userOrders.fromJson(Map<String, dynamic> json) {
    final l$createdAt = json['createdAt'];
    final l$discountPrice = json['discountPrice'];
    final l$id = json['id'];
    final l$priceTotal = json['priceTotal'];
    final l$shippingAddress = json['shippingAddress'];
    final l$shippingFee = json['shippingFee'];
    final l$status = json['status'];
    final l$updatedAt = json['updatedAt'];
    final l$user = json['user'];
    final l$products = json['products'];
    final l$$__typename = json['__typename'];
    return Query$UserOrders$userOrders(
      createdAt: DateTime.parse((l$createdAt as String)),
      discountPrice: (l$discountPrice as String),
      id: (l$id as String),
      priceTotal: (l$priceTotal as String),
      shippingAddress: (l$shippingAddress as String),
      shippingFee: (l$shippingFee as String),
      status: l$status == null
          ? null
          : fromJson$Enum$OrderStatusEnum((l$status as String)),
      updatedAt: DateTime.parse((l$updatedAt as String)),
      user: l$user == null
          ? null
          : Query$UserOrders$userOrders$user.fromJson(
              (l$user as Map<String, dynamic>)),
      products: (l$products as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$UserOrders$userOrders$products.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final DateTime createdAt;

  final String discountPrice;

  final String id;

  final String priceTotal;

  final String shippingAddress;

  final String shippingFee;

  final Enum$OrderStatusEnum? status;

  final DateTime updatedAt;

  final Query$UserOrders$userOrders$user? user;

  final List<Query$UserOrders$userOrders$products?>? products;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$discountPrice = discountPrice;
    _resultData['discountPrice'] = l$discountPrice;
    final l$id = id;
    _resultData['id'] = l$id;
    final l$priceTotal = priceTotal;
    _resultData['priceTotal'] = l$priceTotal;
    final l$shippingAddress = shippingAddress;
    _resultData['shippingAddress'] = l$shippingAddress;
    final l$shippingFee = shippingFee;
    _resultData['shippingFee'] = l$shippingFee;
    final l$status = status;
    _resultData['status'] =
        l$status == null ? null : toJson$Enum$OrderStatusEnum(l$status);
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt.toIso8601String();
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$products = products;
    _resultData['products'] = l$products?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$createdAt = createdAt;
    final l$discountPrice = discountPrice;
    final l$id = id;
    final l$priceTotal = priceTotal;
    final l$shippingAddress = shippingAddress;
    final l$shippingFee = shippingFee;
    final l$status = status;
    final l$updatedAt = updatedAt;
    final l$user = user;
    final l$products = products;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$createdAt,
      l$discountPrice,
      l$id,
      l$priceTotal,
      l$shippingAddress,
      l$shippingFee,
      l$status,
      l$updatedAt,
      l$user,
      l$products == null ? null : Object.hashAll(l$products.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserOrders$userOrders ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$discountPrice = discountPrice;
    final lOther$discountPrice = other.discountPrice;
    if (l$discountPrice != lOther$discountPrice) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$priceTotal = priceTotal;
    final lOther$priceTotal = other.priceTotal;
    if (l$priceTotal != lOther$priceTotal) {
      return false;
    }
    final l$shippingAddress = shippingAddress;
    final lOther$shippingAddress = other.shippingAddress;
    if (l$shippingAddress != lOther$shippingAddress) {
      return false;
    }
    final l$shippingFee = shippingFee;
    final lOther$shippingFee = other.shippingFee;
    if (l$shippingFee != lOther$shippingFee) {
      return false;
    }
    final l$status = status;
    final lOther$status = other.status;
    if (l$status != lOther$status) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$products = products;
    final lOther$products = other.products;
    if (l$products != null && lOther$products != null) {
      if (l$products.length != lOther$products.length) {
        return false;
      }
      for (int i = 0; i < l$products.length; i++) {
        final l$products$entry = l$products[i];
        final lOther$products$entry = lOther$products[i];
        if (l$products$entry != lOther$products$entry) {
          return false;
        }
      }
    } else if (l$products != lOther$products) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserOrders$userOrders
    on Query$UserOrders$userOrders {
  CopyWith$Query$UserOrders$userOrders<Query$UserOrders$userOrders>
      get copyWith => CopyWith$Query$UserOrders$userOrders(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserOrders$userOrders<TRes> {
  factory CopyWith$Query$UserOrders$userOrders(
    Query$UserOrders$userOrders instance,
    TRes Function(Query$UserOrders$userOrders) then,
  ) = _CopyWithImpl$Query$UserOrders$userOrders;

  factory CopyWith$Query$UserOrders$userOrders.stub(TRes res) =
      _CopyWithStubImpl$Query$UserOrders$userOrders;

  TRes call({
    DateTime? createdAt,
    String? discountPrice,
    String? id,
    String? priceTotal,
    String? shippingAddress,
    String? shippingFee,
    Enum$OrderStatusEnum? status,
    DateTime? updatedAt,
    Query$UserOrders$userOrders$user? user,
    List<Query$UserOrders$userOrders$products?>? products,
    String? $__typename,
  });
  CopyWith$Query$UserOrders$userOrders$user<TRes> get user;
  TRes products(
      Iterable<Query$UserOrders$userOrders$products?>? Function(
              Iterable<
                  CopyWith$Query$UserOrders$userOrders$products<
                      Query$UserOrders$userOrders$products>?>?)
          _fn);
}

class _CopyWithImpl$Query$UserOrders$userOrders<TRes>
    implements CopyWith$Query$UserOrders$userOrders<TRes> {
  _CopyWithImpl$Query$UserOrders$userOrders(
    this._instance,
    this._then,
  );

  final Query$UserOrders$userOrders _instance;

  final TRes Function(Query$UserOrders$userOrders) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? createdAt = _undefined,
    Object? discountPrice = _undefined,
    Object? id = _undefined,
    Object? priceTotal = _undefined,
    Object? shippingAddress = _undefined,
    Object? shippingFee = _undefined,
    Object? status = _undefined,
    Object? updatedAt = _undefined,
    Object? user = _undefined,
    Object? products = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserOrders$userOrders(
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        discountPrice: discountPrice == _undefined || discountPrice == null
            ? _instance.discountPrice
            : (discountPrice as String),
        id: id == _undefined || id == null ? _instance.id : (id as String),
        priceTotal: priceTotal == _undefined || priceTotal == null
            ? _instance.priceTotal
            : (priceTotal as String),
        shippingAddress:
            shippingAddress == _undefined || shippingAddress == null
                ? _instance.shippingAddress
                : (shippingAddress as String),
        shippingFee: shippingFee == _undefined || shippingFee == null
            ? _instance.shippingFee
            : (shippingFee as String),
        status: status == _undefined
            ? _instance.status
            : (status as Enum$OrderStatusEnum?),
        updatedAt: updatedAt == _undefined || updatedAt == null
            ? _instance.updatedAt
            : (updatedAt as DateTime),
        user: user == _undefined
            ? _instance.user
            : (user as Query$UserOrders$userOrders$user?),
        products: products == _undefined
            ? _instance.products
            : (products as List<Query$UserOrders$userOrders$products?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$UserOrders$userOrders$user<TRes> get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Query$UserOrders$userOrders$user.stub(_then(_instance))
        : CopyWith$Query$UserOrders$userOrders$user(
            local$user, (e) => call(user: e));
  }

  TRes products(
          Iterable<Query$UserOrders$userOrders$products?>? Function(
                  Iterable<
                      CopyWith$Query$UserOrders$userOrders$products<
                          Query$UserOrders$userOrders$products>?>?)
              _fn) =>
      call(
          products: _fn(_instance.products?.map((e) => e == null
              ? null
              : CopyWith$Query$UserOrders$userOrders$products(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$UserOrders$userOrders<TRes>
    implements CopyWith$Query$UserOrders$userOrders<TRes> {
  _CopyWithStubImpl$Query$UserOrders$userOrders(this._res);

  TRes _res;

  call({
    DateTime? createdAt,
    String? discountPrice,
    String? id,
    String? priceTotal,
    String? shippingAddress,
    String? shippingFee,
    Enum$OrderStatusEnum? status,
    DateTime? updatedAt,
    Query$UserOrders$userOrders$user? user,
    List<Query$UserOrders$userOrders$products?>? products,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$UserOrders$userOrders$user<TRes> get user =>
      CopyWith$Query$UserOrders$userOrders$user.stub(_res);

  products(_fn) => _res;
}

class Query$UserOrders$userOrders$user {
  Query$UserOrders$userOrders$user({
    this.email,
    this.fullName,
    this.gender,
    this.username,
    this.thumbnailUrl,
    this.profilePictureUrl,
    this.shippingAddress,
    this.$__typename = 'UserType',
  });

  factory Query$UserOrders$userOrders$user.fromJson(Map<String, dynamic> json) {
    final l$email = json['email'];
    final l$fullName = json['fullName'];
    final l$gender = json['gender'];
    final l$username = json['username'];
    final l$thumbnailUrl = json['thumbnailUrl'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$shippingAddress = json['shippingAddress'];
    final l$$__typename = json['__typename'];
    return Query$UserOrders$userOrders$user(
      email: (l$email as String?),
      fullName: (l$fullName as String?),
      gender: (l$gender as String?),
      username: (l$username as String?),
      thumbnailUrl: (l$thumbnailUrl as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      shippingAddress: (l$shippingAddress as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? email;

  final String? fullName;

  final String? gender;

  final String? username;

  final String? thumbnailUrl;

  final String? profilePictureUrl;

  final String? shippingAddress;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$email = email;
    _resultData['email'] = l$email;
    final l$fullName = fullName;
    _resultData['fullName'] = l$fullName;
    final l$gender = gender;
    _resultData['gender'] = l$gender;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$thumbnailUrl = thumbnailUrl;
    _resultData['thumbnailUrl'] = l$thumbnailUrl;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$shippingAddress = shippingAddress;
    _resultData['shippingAddress'] = l$shippingAddress;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$email = email;
    final l$fullName = fullName;
    final l$gender = gender;
    final l$username = username;
    final l$thumbnailUrl = thumbnailUrl;
    final l$profilePictureUrl = profilePictureUrl;
    final l$shippingAddress = shippingAddress;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$email,
      l$fullName,
      l$gender,
      l$username,
      l$thumbnailUrl,
      l$profilePictureUrl,
      l$shippingAddress,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserOrders$userOrders$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (l$email != lOther$email) {
      return false;
    }
    final l$fullName = fullName;
    final lOther$fullName = other.fullName;
    if (l$fullName != lOther$fullName) {
      return false;
    }
    final l$gender = gender;
    final lOther$gender = other.gender;
    if (l$gender != lOther$gender) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$thumbnailUrl = thumbnailUrl;
    final lOther$thumbnailUrl = other.thumbnailUrl;
    if (l$thumbnailUrl != lOther$thumbnailUrl) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$shippingAddress = shippingAddress;
    final lOther$shippingAddress = other.shippingAddress;
    if (l$shippingAddress != lOther$shippingAddress) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserOrders$userOrders$user
    on Query$UserOrders$userOrders$user {
  CopyWith$Query$UserOrders$userOrders$user<Query$UserOrders$userOrders$user>
      get copyWith => CopyWith$Query$UserOrders$userOrders$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserOrders$userOrders$user<TRes> {
  factory CopyWith$Query$UserOrders$userOrders$user(
    Query$UserOrders$userOrders$user instance,
    TRes Function(Query$UserOrders$userOrders$user) then,
  ) = _CopyWithImpl$Query$UserOrders$userOrders$user;

  factory CopyWith$Query$UserOrders$userOrders$user.stub(TRes res) =
      _CopyWithStubImpl$Query$UserOrders$userOrders$user;

  TRes call({
    String? email,
    String? fullName,
    String? gender,
    String? username,
    String? thumbnailUrl,
    String? profilePictureUrl,
    String? shippingAddress,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$UserOrders$userOrders$user<TRes>
    implements CopyWith$Query$UserOrders$userOrders$user<TRes> {
  _CopyWithImpl$Query$UserOrders$userOrders$user(
    this._instance,
    this._then,
  );

  final Query$UserOrders$userOrders$user _instance;

  final TRes Function(Query$UserOrders$userOrders$user) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? email = _undefined,
    Object? fullName = _undefined,
    Object? gender = _undefined,
    Object? username = _undefined,
    Object? thumbnailUrl = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? shippingAddress = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserOrders$userOrders$user(
        email: email == _undefined ? _instance.email : (email as String?),
        fullName:
            fullName == _undefined ? _instance.fullName : (fullName as String?),
        gender: gender == _undefined ? _instance.gender : (gender as String?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        thumbnailUrl: thumbnailUrl == _undefined
            ? _instance.thumbnailUrl
            : (thumbnailUrl as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        shippingAddress: shippingAddress == _undefined
            ? _instance.shippingAddress
            : (shippingAddress as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$UserOrders$userOrders$user<TRes>
    implements CopyWith$Query$UserOrders$userOrders$user<TRes> {
  _CopyWithStubImpl$Query$UserOrders$userOrders$user(this._res);

  TRes _res;

  call({
    String? email,
    String? fullName,
    String? gender,
    String? username,
    String? thumbnailUrl,
    String? profilePictureUrl,
    String? shippingAddress,
    String? $__typename,
  }) =>
      _res;
}

class Query$UserOrders$userOrders$products {
  Query$UserOrders$userOrders$products({
    this.brand,
    this.category,
    required this.color,
    this.condition,
    required this.createdAt,
    required this.description,
    this.customBrand,
    required this.id,
    required this.imagesUrl,
    required this.isFeatured,
    required this.name,
    this.price,
    required this.status,
    this.seller,
    this.style,
    required this.updatedAt,
    this.userLiked,
    required this.views,
    required this.likes,
    this.materials,
    required this.discountPrice,
    this.$__typename = 'ProductType',
  });

  factory Query$UserOrders$userOrders$products.fromJson(
      Map<String, dynamic> json) {
    final l$brand = json['brand'];
    final l$category = json['category'];
    final l$color = json['color'];
    final l$condition = json['condition'];
    final l$createdAt = json['createdAt'];
    final l$description = json['description'];
    final l$customBrand = json['customBrand'];
    final l$id = json['id'];
    final l$imagesUrl = json['imagesUrl'];
    final l$isFeatured = json['isFeatured'];
    final l$name = json['name'];
    final l$price = json['price'];
    final l$status = json['status'];
    final l$seller = json['seller'];
    final l$style = json['style'];
    final l$updatedAt = json['updatedAt'];
    final l$userLiked = json['userLiked'];
    final l$views = json['views'];
    final l$likes = json['likes'];
    final l$materials = json['materials'];
    final l$discountPrice = json['discountPrice'];
    final l$$__typename = json['__typename'];
    return Query$UserOrders$userOrders$products(
      brand: l$brand == null
          ? null
          : Query$UserOrders$userOrders$products$brand.fromJson(
              (l$brand as Map<String, dynamic>)),
      category: l$category == null
          ? null
          : Query$UserOrders$userOrders$products$category.fromJson(
              (l$category as Map<String, dynamic>)),
      color: (l$color as List<dynamic>).map((e) => (e as String)).toList(),
      condition: l$condition == null
          ? null
          : fromJson$Enum$ProductsProductConditionChoices(
              (l$condition as String)),
      createdAt: DateTime.parse((l$createdAt as String)),
      description: (l$description as String),
      customBrand: (l$customBrand as String?),
      id: (l$id as String),
      imagesUrl:
          (l$imagesUrl as List<dynamic>).map((e) => (e as String)).toList(),
      isFeatured: (l$isFeatured as bool),
      name: (l$name as String),
      price: (l$price as num?)?.toDouble(),
      status: fromJson$Enum$ProductsProductStatusChoices((l$status as String)),
      seller: l$seller == null
          ? null
          : Query$UserOrders$userOrders$products$seller.fromJson(
              (l$seller as Map<String, dynamic>)),
      style: l$style == null
          ? null
          : fromJson$Enum$ProductsProductStyleChoices((l$style as String)),
      updatedAt: DateTime.parse((l$updatedAt as String)),
      userLiked: (l$userLiked as bool?),
      views: (l$views as int),
      likes: (l$likes as int),
      materials: (l$materials as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$UserOrders$userOrders$products$materials.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      discountPrice: (l$discountPrice as String),
      $__typename: (l$$__typename as String),
    );
  }

  final Query$UserOrders$userOrders$products$brand? brand;

  final Query$UserOrders$userOrders$products$category? category;

  final List<String> color;

  final Enum$ProductsProductConditionChoices? condition;

  final DateTime createdAt;

  final String description;

  final String? customBrand;

  final String id;

  final List<String> imagesUrl;

  final bool isFeatured;

  final String name;

  final double? price;

  final Enum$ProductsProductStatusChoices status;

  final Query$UserOrders$userOrders$products$seller? seller;

  final Enum$ProductsProductStyleChoices? style;

  final DateTime updatedAt;

  final bool? userLiked;

  final int views;

  final int likes;

  final List<Query$UserOrders$userOrders$products$materials?>? materials;

  final String discountPrice;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$brand = brand;
    _resultData['brand'] = l$brand?.toJson();
    final l$category = category;
    _resultData['category'] = l$category?.toJson();
    final l$color = color;
    _resultData['color'] = l$color.map((e) => e).toList();
    final l$condition = condition;
    _resultData['condition'] = l$condition == null
        ? null
        : toJson$Enum$ProductsProductConditionChoices(l$condition);
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$description = description;
    _resultData['description'] = l$description;
    final l$customBrand = customBrand;
    _resultData['customBrand'] = l$customBrand;
    final l$id = id;
    _resultData['id'] = l$id;
    final l$imagesUrl = imagesUrl;
    _resultData['imagesUrl'] = l$imagesUrl.map((e) => e).toList();
    final l$isFeatured = isFeatured;
    _resultData['isFeatured'] = l$isFeatured;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$price = price;
    _resultData['price'] = l$price;
    final l$status = status;
    _resultData['status'] = toJson$Enum$ProductsProductStatusChoices(l$status);
    final l$seller = seller;
    _resultData['seller'] = l$seller?.toJson();
    final l$style = style;
    _resultData['style'] = l$style == null
        ? null
        : toJson$Enum$ProductsProductStyleChoices(l$style);
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt.toIso8601String();
    final l$userLiked = userLiked;
    _resultData['userLiked'] = l$userLiked;
    final l$views = views;
    _resultData['views'] = l$views;
    final l$likes = likes;
    _resultData['likes'] = l$likes;
    final l$materials = materials;
    _resultData['materials'] = l$materials?.map((e) => e?.toJson()).toList();
    final l$discountPrice = discountPrice;
    _resultData['discountPrice'] = l$discountPrice;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$brand = brand;
    final l$category = category;
    final l$color = color;
    final l$condition = condition;
    final l$createdAt = createdAt;
    final l$description = description;
    final l$customBrand = customBrand;
    final l$id = id;
    final l$imagesUrl = imagesUrl;
    final l$isFeatured = isFeatured;
    final l$name = name;
    final l$price = price;
    final l$status = status;
    final l$seller = seller;
    final l$style = style;
    final l$updatedAt = updatedAt;
    final l$userLiked = userLiked;
    final l$views = views;
    final l$likes = likes;
    final l$materials = materials;
    final l$discountPrice = discountPrice;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$brand,
      l$category,
      Object.hashAll(l$color.map((v) => v)),
      l$condition,
      l$createdAt,
      l$description,
      l$customBrand,
      l$id,
      Object.hashAll(l$imagesUrl.map((v) => v)),
      l$isFeatured,
      l$name,
      l$price,
      l$status,
      l$seller,
      l$style,
      l$updatedAt,
      l$userLiked,
      l$views,
      l$likes,
      l$materials == null ? null : Object.hashAll(l$materials.map((v) => v)),
      l$discountPrice,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserOrders$userOrders$products ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$brand = brand;
    final lOther$brand = other.brand;
    if (l$brand != lOther$brand) {
      return false;
    }
    final l$category = category;
    final lOther$category = other.category;
    if (l$category != lOther$category) {
      return false;
    }
    final l$color = color;
    final lOther$color = other.color;
    if (l$color.length != lOther$color.length) {
      return false;
    }
    for (int i = 0; i < l$color.length; i++) {
      final l$color$entry = l$color[i];
      final lOther$color$entry = lOther$color[i];
      if (l$color$entry != lOther$color$entry) {
        return false;
      }
    }
    final l$condition = condition;
    final lOther$condition = other.condition;
    if (l$condition != lOther$condition) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (l$description != lOther$description) {
      return false;
    }
    final l$customBrand = customBrand;
    final lOther$customBrand = other.customBrand;
    if (l$customBrand != lOther$customBrand) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$imagesUrl = imagesUrl;
    final lOther$imagesUrl = other.imagesUrl;
    if (l$imagesUrl.length != lOther$imagesUrl.length) {
      return false;
    }
    for (int i = 0; i < l$imagesUrl.length; i++) {
      final l$imagesUrl$entry = l$imagesUrl[i];
      final lOther$imagesUrl$entry = lOther$imagesUrl[i];
      if (l$imagesUrl$entry != lOther$imagesUrl$entry) {
        return false;
      }
    }
    final l$isFeatured = isFeatured;
    final lOther$isFeatured = other.isFeatured;
    if (l$isFeatured != lOther$isFeatured) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$price = price;
    final lOther$price = other.price;
    if (l$price != lOther$price) {
      return false;
    }
    final l$status = status;
    final lOther$status = other.status;
    if (l$status != lOther$status) {
      return false;
    }
    final l$seller = seller;
    final lOther$seller = other.seller;
    if (l$seller != lOther$seller) {
      return false;
    }
    final l$style = style;
    final lOther$style = other.style;
    if (l$style != lOther$style) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$userLiked = userLiked;
    final lOther$userLiked = other.userLiked;
    if (l$userLiked != lOther$userLiked) {
      return false;
    }
    final l$views = views;
    final lOther$views = other.views;
    if (l$views != lOther$views) {
      return false;
    }
    final l$likes = likes;
    final lOther$likes = other.likes;
    if (l$likes != lOther$likes) {
      return false;
    }
    final l$materials = materials;
    final lOther$materials = other.materials;
    if (l$materials != null && lOther$materials != null) {
      if (l$materials.length != lOther$materials.length) {
        return false;
      }
      for (int i = 0; i < l$materials.length; i++) {
        final l$materials$entry = l$materials[i];
        final lOther$materials$entry = lOther$materials[i];
        if (l$materials$entry != lOther$materials$entry) {
          return false;
        }
      }
    } else if (l$materials != lOther$materials) {
      return false;
    }
    final l$discountPrice = discountPrice;
    final lOther$discountPrice = other.discountPrice;
    if (l$discountPrice != lOther$discountPrice) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserOrders$userOrders$products
    on Query$UserOrders$userOrders$products {
  CopyWith$Query$UserOrders$userOrders$products<
          Query$UserOrders$userOrders$products>
      get copyWith => CopyWith$Query$UserOrders$userOrders$products(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserOrders$userOrders$products<TRes> {
  factory CopyWith$Query$UserOrders$userOrders$products(
    Query$UserOrders$userOrders$products instance,
    TRes Function(Query$UserOrders$userOrders$products) then,
  ) = _CopyWithImpl$Query$UserOrders$userOrders$products;

  factory CopyWith$Query$UserOrders$userOrders$products.stub(TRes res) =
      _CopyWithStubImpl$Query$UserOrders$userOrders$products;

  TRes call({
    Query$UserOrders$userOrders$products$brand? brand,
    Query$UserOrders$userOrders$products$category? category,
    List<String>? color,
    Enum$ProductsProductConditionChoices? condition,
    DateTime? createdAt,
    String? description,
    String? customBrand,
    String? id,
    List<String>? imagesUrl,
    bool? isFeatured,
    String? name,
    double? price,
    Enum$ProductsProductStatusChoices? status,
    Query$UserOrders$userOrders$products$seller? seller,
    Enum$ProductsProductStyleChoices? style,
    DateTime? updatedAt,
    bool? userLiked,
    int? views,
    int? likes,
    List<Query$UserOrders$userOrders$products$materials?>? materials,
    String? discountPrice,
    String? $__typename,
  });
  CopyWith$Query$UserOrders$userOrders$products$brand<TRes> get brand;
  CopyWith$Query$UserOrders$userOrders$products$category<TRes> get category;
  CopyWith$Query$UserOrders$userOrders$products$seller<TRes> get seller;
  TRes materials(
      Iterable<Query$UserOrders$userOrders$products$materials?>? Function(
              Iterable<
                  CopyWith$Query$UserOrders$userOrders$products$materials<
                      Query$UserOrders$userOrders$products$materials>?>?)
          _fn);
}

class _CopyWithImpl$Query$UserOrders$userOrders$products<TRes>
    implements CopyWith$Query$UserOrders$userOrders$products<TRes> {
  _CopyWithImpl$Query$UserOrders$userOrders$products(
    this._instance,
    this._then,
  );

  final Query$UserOrders$userOrders$products _instance;

  final TRes Function(Query$UserOrders$userOrders$products) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? brand = _undefined,
    Object? category = _undefined,
    Object? color = _undefined,
    Object? condition = _undefined,
    Object? createdAt = _undefined,
    Object? description = _undefined,
    Object? customBrand = _undefined,
    Object? id = _undefined,
    Object? imagesUrl = _undefined,
    Object? isFeatured = _undefined,
    Object? name = _undefined,
    Object? price = _undefined,
    Object? status = _undefined,
    Object? seller = _undefined,
    Object? style = _undefined,
    Object? updatedAt = _undefined,
    Object? userLiked = _undefined,
    Object? views = _undefined,
    Object? likes = _undefined,
    Object? materials = _undefined,
    Object? discountPrice = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserOrders$userOrders$products(
        brand: brand == _undefined
            ? _instance.brand
            : (brand as Query$UserOrders$userOrders$products$brand?),
        category: category == _undefined
            ? _instance.category
            : (category as Query$UserOrders$userOrders$products$category?),
        color: color == _undefined || color == null
            ? _instance.color
            : (color as List<String>),
        condition: condition == _undefined
            ? _instance.condition
            : (condition as Enum$ProductsProductConditionChoices?),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        description: description == _undefined || description == null
            ? _instance.description
            : (description as String),
        customBrand: customBrand == _undefined
            ? _instance.customBrand
            : (customBrand as String?),
        id: id == _undefined || id == null ? _instance.id : (id as String),
        imagesUrl: imagesUrl == _undefined || imagesUrl == null
            ? _instance.imagesUrl
            : (imagesUrl as List<String>),
        isFeatured: isFeatured == _undefined || isFeatured == null
            ? _instance.isFeatured
            : (isFeatured as bool),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        price: price == _undefined ? _instance.price : (price as double?),
        status: status == _undefined || status == null
            ? _instance.status
            : (status as Enum$ProductsProductStatusChoices),
        seller: seller == _undefined
            ? _instance.seller
            : (seller as Query$UserOrders$userOrders$products$seller?),
        style: style == _undefined
            ? _instance.style
            : (style as Enum$ProductsProductStyleChoices?),
        updatedAt: updatedAt == _undefined || updatedAt == null
            ? _instance.updatedAt
            : (updatedAt as DateTime),
        userLiked: userLiked == _undefined
            ? _instance.userLiked
            : (userLiked as bool?),
        views: views == _undefined || views == null
            ? _instance.views
            : (views as int),
        likes: likes == _undefined || likes == null
            ? _instance.likes
            : (likes as int),
        materials: materials == _undefined
            ? _instance.materials
            : (materials
                as List<Query$UserOrders$userOrders$products$materials?>?),
        discountPrice: discountPrice == _undefined || discountPrice == null
            ? _instance.discountPrice
            : (discountPrice as String),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$UserOrders$userOrders$products$brand<TRes> get brand {
    final local$brand = _instance.brand;
    return local$brand == null
        ? CopyWith$Query$UserOrders$userOrders$products$brand.stub(
            _then(_instance))
        : CopyWith$Query$UserOrders$userOrders$products$brand(
            local$brand, (e) => call(brand: e));
  }

  CopyWith$Query$UserOrders$userOrders$products$category<TRes> get category {
    final local$category = _instance.category;
    return local$category == null
        ? CopyWith$Query$UserOrders$userOrders$products$category.stub(
            _then(_instance))
        : CopyWith$Query$UserOrders$userOrders$products$category(
            local$category, (e) => call(category: e));
  }

  CopyWith$Query$UserOrders$userOrders$products$seller<TRes> get seller {
    final local$seller = _instance.seller;
    return local$seller == null
        ? CopyWith$Query$UserOrders$userOrders$products$seller.stub(
            _then(_instance))
        : CopyWith$Query$UserOrders$userOrders$products$seller(
            local$seller, (e) => call(seller: e));
  }

  TRes materials(
          Iterable<Query$UserOrders$userOrders$products$materials?>? Function(
                  Iterable<
                      CopyWith$Query$UserOrders$userOrders$products$materials<
                          Query$UserOrders$userOrders$products$materials>?>?)
              _fn) =>
      call(
          materials: _fn(_instance.materials?.map((e) => e == null
              ? null
              : CopyWith$Query$UserOrders$userOrders$products$materials(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$UserOrders$userOrders$products<TRes>
    implements CopyWith$Query$UserOrders$userOrders$products<TRes> {
  _CopyWithStubImpl$Query$UserOrders$userOrders$products(this._res);

  TRes _res;

  call({
    Query$UserOrders$userOrders$products$brand? brand,
    Query$UserOrders$userOrders$products$category? category,
    List<String>? color,
    Enum$ProductsProductConditionChoices? condition,
    DateTime? createdAt,
    String? description,
    String? customBrand,
    String? id,
    List<String>? imagesUrl,
    bool? isFeatured,
    String? name,
    double? price,
    Enum$ProductsProductStatusChoices? status,
    Query$UserOrders$userOrders$products$seller? seller,
    Enum$ProductsProductStyleChoices? style,
    DateTime? updatedAt,
    bool? userLiked,
    int? views,
    int? likes,
    List<Query$UserOrders$userOrders$products$materials?>? materials,
    String? discountPrice,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$UserOrders$userOrders$products$brand<TRes> get brand =>
      CopyWith$Query$UserOrders$userOrders$products$brand.stub(_res);

  CopyWith$Query$UserOrders$userOrders$products$category<TRes> get category =>
      CopyWith$Query$UserOrders$userOrders$products$category.stub(_res);

  CopyWith$Query$UserOrders$userOrders$products$seller<TRes> get seller =>
      CopyWith$Query$UserOrders$userOrders$products$seller.stub(_res);

  materials(_fn) => _res;
}

class Query$UserOrders$userOrders$products$brand {
  Query$UserOrders$userOrders$products$brand({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$UserOrders$userOrders$products$brand.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$UserOrders$userOrders$products$brand(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserOrders$userOrders$products$brand ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserOrders$userOrders$products$brand
    on Query$UserOrders$userOrders$products$brand {
  CopyWith$Query$UserOrders$userOrders$products$brand<
          Query$UserOrders$userOrders$products$brand>
      get copyWith => CopyWith$Query$UserOrders$userOrders$products$brand(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserOrders$userOrders$products$brand<TRes> {
  factory CopyWith$Query$UserOrders$userOrders$products$brand(
    Query$UserOrders$userOrders$products$brand instance,
    TRes Function(Query$UserOrders$userOrders$products$brand) then,
  ) = _CopyWithImpl$Query$UserOrders$userOrders$products$brand;

  factory CopyWith$Query$UserOrders$userOrders$products$brand.stub(TRes res) =
      _CopyWithStubImpl$Query$UserOrders$userOrders$products$brand;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$UserOrders$userOrders$products$brand<TRes>
    implements CopyWith$Query$UserOrders$userOrders$products$brand<TRes> {
  _CopyWithImpl$Query$UserOrders$userOrders$products$brand(
    this._instance,
    this._then,
  );

  final Query$UserOrders$userOrders$products$brand _instance;

  final TRes Function(Query$UserOrders$userOrders$products$brand) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserOrders$userOrders$products$brand(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$UserOrders$userOrders$products$brand<TRes>
    implements CopyWith$Query$UserOrders$userOrders$products$brand<TRes> {
  _CopyWithStubImpl$Query$UserOrders$userOrders$products$brand(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$UserOrders$userOrders$products$category {
  Query$UserOrders$userOrders$products$category({
    this.id,
    this.name,
    this.$__typename = 'CategoryType',
  });

  factory Query$UserOrders$userOrders$products$category.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$UserOrders$userOrders$products$category(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserOrders$userOrders$products$category ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserOrders$userOrders$products$category
    on Query$UserOrders$userOrders$products$category {
  CopyWith$Query$UserOrders$userOrders$products$category<
          Query$UserOrders$userOrders$products$category>
      get copyWith => CopyWith$Query$UserOrders$userOrders$products$category(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserOrders$userOrders$products$category<TRes> {
  factory CopyWith$Query$UserOrders$userOrders$products$category(
    Query$UserOrders$userOrders$products$category instance,
    TRes Function(Query$UserOrders$userOrders$products$category) then,
  ) = _CopyWithImpl$Query$UserOrders$userOrders$products$category;

  factory CopyWith$Query$UserOrders$userOrders$products$category.stub(
          TRes res) =
      _CopyWithStubImpl$Query$UserOrders$userOrders$products$category;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$UserOrders$userOrders$products$category<TRes>
    implements CopyWith$Query$UserOrders$userOrders$products$category<TRes> {
  _CopyWithImpl$Query$UserOrders$userOrders$products$category(
    this._instance,
    this._then,
  );

  final Query$UserOrders$userOrders$products$category _instance;

  final TRes Function(Query$UserOrders$userOrders$products$category) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserOrders$userOrders$products$category(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$UserOrders$userOrders$products$category<TRes>
    implements CopyWith$Query$UserOrders$userOrders$products$category<TRes> {
  _CopyWithStubImpl$Query$UserOrders$userOrders$products$category(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$UserOrders$userOrders$products$seller {
  Query$UserOrders$userOrders$products$seller({
    this.displayName,
    this.fullName,
    this.thumbnailUrl,
    this.username,
    this.id,
    this.$__typename = 'UserType',
  });

  factory Query$UserOrders$userOrders$products$seller.fromJson(
      Map<String, dynamic> json) {
    final l$displayName = json['displayName'];
    final l$fullName = json['fullName'];
    final l$thumbnailUrl = json['thumbnailUrl'];
    final l$username = json['username'];
    final l$id = json['id'];
    final l$$__typename = json['__typename'];
    return Query$UserOrders$userOrders$products$seller(
      displayName: (l$displayName as String?),
      fullName: (l$fullName as String?),
      thumbnailUrl: (l$thumbnailUrl as String?),
      username: (l$username as String?),
      id: (l$id as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? displayName;

  final String? fullName;

  final String? thumbnailUrl;

  final String? username;

  final int? id;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$displayName = displayName;
    _resultData['displayName'] = l$displayName;
    final l$fullName = fullName;
    _resultData['fullName'] = l$fullName;
    final l$thumbnailUrl = thumbnailUrl;
    _resultData['thumbnailUrl'] = l$thumbnailUrl;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$id = id;
    _resultData['id'] = l$id;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$displayName = displayName;
    final l$fullName = fullName;
    final l$thumbnailUrl = thumbnailUrl;
    final l$username = username;
    final l$id = id;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$displayName,
      l$fullName,
      l$thumbnailUrl,
      l$username,
      l$id,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserOrders$userOrders$products$seller ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$fullName = fullName;
    final lOther$fullName = other.fullName;
    if (l$fullName != lOther$fullName) {
      return false;
    }
    final l$thumbnailUrl = thumbnailUrl;
    final lOther$thumbnailUrl = other.thumbnailUrl;
    if (l$thumbnailUrl != lOther$thumbnailUrl) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserOrders$userOrders$products$seller
    on Query$UserOrders$userOrders$products$seller {
  CopyWith$Query$UserOrders$userOrders$products$seller<
          Query$UserOrders$userOrders$products$seller>
      get copyWith => CopyWith$Query$UserOrders$userOrders$products$seller(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserOrders$userOrders$products$seller<TRes> {
  factory CopyWith$Query$UserOrders$userOrders$products$seller(
    Query$UserOrders$userOrders$products$seller instance,
    TRes Function(Query$UserOrders$userOrders$products$seller) then,
  ) = _CopyWithImpl$Query$UserOrders$userOrders$products$seller;

  factory CopyWith$Query$UserOrders$userOrders$products$seller.stub(TRes res) =
      _CopyWithStubImpl$Query$UserOrders$userOrders$products$seller;

  TRes call({
    String? displayName,
    String? fullName,
    String? thumbnailUrl,
    String? username,
    int? id,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$UserOrders$userOrders$products$seller<TRes>
    implements CopyWith$Query$UserOrders$userOrders$products$seller<TRes> {
  _CopyWithImpl$Query$UserOrders$userOrders$products$seller(
    this._instance,
    this._then,
  );

  final Query$UserOrders$userOrders$products$seller _instance;

  final TRes Function(Query$UserOrders$userOrders$products$seller) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? displayName = _undefined,
    Object? fullName = _undefined,
    Object? thumbnailUrl = _undefined,
    Object? username = _undefined,
    Object? id = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserOrders$userOrders$products$seller(
        displayName: displayName == _undefined
            ? _instance.displayName
            : (displayName as String?),
        fullName:
            fullName == _undefined ? _instance.fullName : (fullName as String?),
        thumbnailUrl: thumbnailUrl == _undefined
            ? _instance.thumbnailUrl
            : (thumbnailUrl as String?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        id: id == _undefined ? _instance.id : (id as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$UserOrders$userOrders$products$seller<TRes>
    implements CopyWith$Query$UserOrders$userOrders$products$seller<TRes> {
  _CopyWithStubImpl$Query$UserOrders$userOrders$products$seller(this._res);

  TRes _res;

  call({
    String? displayName,
    String? fullName,
    String? thumbnailUrl,
    String? username,
    int? id,
    String? $__typename,
  }) =>
      _res;
}

class Query$UserOrders$userOrders$products$materials {
  Query$UserOrders$userOrders$products$materials({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$UserOrders$userOrders$products$materials.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$UserOrders$userOrders$products$materials(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserOrders$userOrders$products$materials ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserOrders$userOrders$products$materials
    on Query$UserOrders$userOrders$products$materials {
  CopyWith$Query$UserOrders$userOrders$products$materials<
          Query$UserOrders$userOrders$products$materials>
      get copyWith => CopyWith$Query$UserOrders$userOrders$products$materials(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserOrders$userOrders$products$materials<TRes> {
  factory CopyWith$Query$UserOrders$userOrders$products$materials(
    Query$UserOrders$userOrders$products$materials instance,
    TRes Function(Query$UserOrders$userOrders$products$materials) then,
  ) = _CopyWithImpl$Query$UserOrders$userOrders$products$materials;

  factory CopyWith$Query$UserOrders$userOrders$products$materials.stub(
          TRes res) =
      _CopyWithStubImpl$Query$UserOrders$userOrders$products$materials;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$UserOrders$userOrders$products$materials<TRes>
    implements CopyWith$Query$UserOrders$userOrders$products$materials<TRes> {
  _CopyWithImpl$Query$UserOrders$userOrders$products$materials(
    this._instance,
    this._then,
  );

  final Query$UserOrders$userOrders$products$materials _instance;

  final TRes Function(Query$UserOrders$userOrders$products$materials) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserOrders$userOrders$products$materials(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$UserOrders$userOrders$products$materials<TRes>
    implements CopyWith$Query$UserOrders$userOrders$products$materials<TRes> {
  _CopyWithStubImpl$Query$UserOrders$userOrders$products$materials(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$Conversation {
  factory Variables$Query$Conversation({
    required String id,
    int? pageCount,
    int? pageNumber,
  }) =>
      Variables$Query$Conversation._({
        r'id': id,
        if (pageCount != null) r'pageCount': pageCount,
        if (pageNumber != null) r'pageNumber': pageNumber,
      });

  Variables$Query$Conversation._(this._$data);

  factory Variables$Query$Conversation.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$id = data['id'];
    result$data['id'] = (l$id as String);
    if (data.containsKey('pageCount')) {
      final l$pageCount = data['pageCount'];
      result$data['pageCount'] = (l$pageCount as int?);
    }
    if (data.containsKey('pageNumber')) {
      final l$pageNumber = data['pageNumber'];
      result$data['pageNumber'] = (l$pageNumber as int?);
    }
    return Variables$Query$Conversation._(result$data);
  }

  Map<String, dynamic> _$data;

  String get id => (_$data['id'] as String);

  int? get pageCount => (_$data['pageCount'] as int?);

  int? get pageNumber => (_$data['pageNumber'] as int?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$id = id;
    result$data['id'] = l$id;
    if (_$data.containsKey('pageCount')) {
      final l$pageCount = pageCount;
      result$data['pageCount'] = l$pageCount;
    }
    if (_$data.containsKey('pageNumber')) {
      final l$pageNumber = pageNumber;
      result$data['pageNumber'] = l$pageNumber;
    }
    return result$data;
  }

  CopyWith$Variables$Query$Conversation<Variables$Query$Conversation>
      get copyWith => CopyWith$Variables$Query$Conversation(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$Conversation ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$pageCount = pageCount;
    final lOther$pageCount = other.pageCount;
    if (_$data.containsKey('pageCount') !=
        other._$data.containsKey('pageCount')) {
      return false;
    }
    if (l$pageCount != lOther$pageCount) {
      return false;
    }
    final l$pageNumber = pageNumber;
    final lOther$pageNumber = other.pageNumber;
    if (_$data.containsKey('pageNumber') !=
        other._$data.containsKey('pageNumber')) {
      return false;
    }
    if (l$pageNumber != lOther$pageNumber) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$pageCount = pageCount;
    final l$pageNumber = pageNumber;
    return Object.hashAll([
      l$id,
      _$data.containsKey('pageCount') ? l$pageCount : const {},
      _$data.containsKey('pageNumber') ? l$pageNumber : const {},
    ]);
  }
}

abstract class CopyWith$Variables$Query$Conversation<TRes> {
  factory CopyWith$Variables$Query$Conversation(
    Variables$Query$Conversation instance,
    TRes Function(Variables$Query$Conversation) then,
  ) = _CopyWithImpl$Variables$Query$Conversation;

  factory CopyWith$Variables$Query$Conversation.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$Conversation;

  TRes call({
    String? id,
    int? pageCount,
    int? pageNumber,
  });
}

class _CopyWithImpl$Variables$Query$Conversation<TRes>
    implements CopyWith$Variables$Query$Conversation<TRes> {
  _CopyWithImpl$Variables$Query$Conversation(
    this._instance,
    this._then,
  );

  final Variables$Query$Conversation _instance;

  final TRes Function(Variables$Query$Conversation) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? pageCount = _undefined,
    Object? pageNumber = _undefined,
  }) =>
      _then(Variables$Query$Conversation._({
        ..._instance._$data,
        if (id != _undefined && id != null) 'id': (id as String),
        if (pageCount != _undefined) 'pageCount': (pageCount as int?),
        if (pageNumber != _undefined) 'pageNumber': (pageNumber as int?),
      }));
}

class _CopyWithStubImpl$Variables$Query$Conversation<TRes>
    implements CopyWith$Variables$Query$Conversation<TRes> {
  _CopyWithStubImpl$Variables$Query$Conversation(this._res);

  TRes _res;

  call({
    String? id,
    int? pageCount,
    int? pageNumber,
  }) =>
      _res;
}

class Query$Conversation {
  Query$Conversation({
    this.conversation,
    this.conversationTotalNumber,
    this.$__typename = 'Query',
  });

  factory Query$Conversation.fromJson(Map<String, dynamic> json) {
    final l$conversation = json['conversation'];
    final l$conversationTotalNumber = json['conversationTotalNumber'];
    final l$$__typename = json['__typename'];
    return Query$Conversation(
      conversation: (l$conversation as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$Conversation$conversation.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      conversationTotalNumber: (l$conversationTotalNumber as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$Conversation$conversation?>? conversation;

  final int? conversationTotalNumber;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$conversation = conversation;
    _resultData['conversation'] =
        l$conversation?.map((e) => e?.toJson()).toList();
    final l$conversationTotalNumber = conversationTotalNumber;
    _resultData['conversationTotalNumber'] = l$conversationTotalNumber;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$conversation = conversation;
    final l$conversationTotalNumber = conversationTotalNumber;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$conversation == null
          ? null
          : Object.hashAll(l$conversation.map((v) => v)),
      l$conversationTotalNumber,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversation || runtimeType != other.runtimeType) {
      return false;
    }
    final l$conversation = conversation;
    final lOther$conversation = other.conversation;
    if (l$conversation != null && lOther$conversation != null) {
      if (l$conversation.length != lOther$conversation.length) {
        return false;
      }
      for (int i = 0; i < l$conversation.length; i++) {
        final l$conversation$entry = l$conversation[i];
        final lOther$conversation$entry = lOther$conversation[i];
        if (l$conversation$entry != lOther$conversation$entry) {
          return false;
        }
      }
    } else if (l$conversation != lOther$conversation) {
      return false;
    }
    final l$conversationTotalNumber = conversationTotalNumber;
    final lOther$conversationTotalNumber = other.conversationTotalNumber;
    if (l$conversationTotalNumber != lOther$conversationTotalNumber) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversation on Query$Conversation {
  CopyWith$Query$Conversation<Query$Conversation> get copyWith =>
      CopyWith$Query$Conversation(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$Conversation<TRes> {
  factory CopyWith$Query$Conversation(
    Query$Conversation instance,
    TRes Function(Query$Conversation) then,
  ) = _CopyWithImpl$Query$Conversation;

  factory CopyWith$Query$Conversation.stub(TRes res) =
      _CopyWithStubImpl$Query$Conversation;

  TRes call({
    List<Query$Conversation$conversation?>? conversation,
    int? conversationTotalNumber,
    String? $__typename,
  });
  TRes conversation(
      Iterable<Query$Conversation$conversation?>? Function(
              Iterable<
                  CopyWith$Query$Conversation$conversation<
                      Query$Conversation$conversation>?>?)
          _fn);
}

class _CopyWithImpl$Query$Conversation<TRes>
    implements CopyWith$Query$Conversation<TRes> {
  _CopyWithImpl$Query$Conversation(
    this._instance,
    this._then,
  );

  final Query$Conversation _instance;

  final TRes Function(Query$Conversation) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? conversation = _undefined,
    Object? conversationTotalNumber = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversation(
        conversation: conversation == _undefined
            ? _instance.conversation
            : (conversation as List<Query$Conversation$conversation?>?),
        conversationTotalNumber: conversationTotalNumber == _undefined
            ? _instance.conversationTotalNumber
            : (conversationTotalNumber as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes conversation(
          Iterable<Query$Conversation$conversation?>? Function(
                  Iterable<
                      CopyWith$Query$Conversation$conversation<
                          Query$Conversation$conversation>?>?)
              _fn) =>
      call(
          conversation: _fn(_instance.conversation?.map((e) => e == null
              ? null
              : CopyWith$Query$Conversation$conversation(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$Conversation<TRes>
    implements CopyWith$Query$Conversation<TRes> {
  _CopyWithStubImpl$Query$Conversation(this._res);

  TRes _res;

  call({
    List<Query$Conversation$conversation?>? conversation,
    int? conversationTotalNumber,
    String? $__typename,
  }) =>
      _res;

  conversation(_fn) => _res;
}

const documentNodeQueryConversation = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'Conversation'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'id')),
        type: NamedTypeNode(
          name: NameNode(value: 'ID'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageCount')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageNumber')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'conversation'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'id'),
            value: VariableNode(name: NameNode(value: 'id')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageCount'),
            value: VariableNode(name: NameNode(value: 'pageCount')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageNumber'),
            value: VariableNode(name: NameNode(value: 'pageNumber')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'text'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'attachment'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'attachmentType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'read'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isItem'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'itemId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'itemType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'imageUrls'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'replyTo'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'text'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'createdAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'attachment'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'attachmentType'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'sender'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'username'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'profilePictureUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'thumbnailUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'sender'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'profilePictureUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'thumbnailUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'displayName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: 'conversationTotalNumber'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$Conversation _parserFn$Query$Conversation(Map<String, dynamic> data) =>
    Query$Conversation.fromJson(data);
typedef OnQueryComplete$Query$Conversation = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$Conversation?,
);

class Options$Query$Conversation
    extends graphql.QueryOptions<Query$Conversation> {
  Options$Query$Conversation({
    String? operationName,
    required Variables$Query$Conversation variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$Conversation? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$Conversation? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$Conversation(data),
                  ),
          onError: onError,
          document: documentNodeQueryConversation,
          parserFn: _parserFn$Query$Conversation,
        );

  final OnQueryComplete$Query$Conversation? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$Conversation
    extends graphql.WatchQueryOptions<Query$Conversation> {
  WatchOptions$Query$Conversation({
    String? operationName,
    required Variables$Query$Conversation variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$Conversation? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryConversation,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$Conversation,
        );
}

class FetchMoreOptions$Query$Conversation extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$Conversation({
    required graphql.UpdateQuery updateQuery,
    required Variables$Query$Conversation variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables.toJson(),
          document: documentNodeQueryConversation,
        );
}

extension ClientExtension$Query$Conversation on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$Conversation>> query$Conversation(
          Options$Query$Conversation options) async =>
      await this.query(options);
  graphql.ObservableQuery<Query$Conversation> watchQuery$Conversation(
          WatchOptions$Query$Conversation options) =>
      this.watchQuery(options);
  void writeQuery$Conversation({
    required Query$Conversation data,
    required Variables$Query$Conversation variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation: graphql.Operation(document: documentNodeQueryConversation),
          variables: variables.toJson(),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$Conversation? readQuery$Conversation({
    required Variables$Query$Conversation variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQueryConversation),
        variables: variables.toJson(),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$Conversation.fromJson(result);
  }
}

class Query$Conversation$conversation {
  Query$Conversation$conversation({
    required this.id,
    required this.text,
    this.attachment,
    this.attachmentType,
    required this.read,
    required this.isItem,
    this.itemId,
    this.itemType,
    required this.createdAt,
    required this.imageUrls,
    this.replyTo,
    this.sender,
    this.$__typename = 'MessageType',
  });

  factory Query$Conversation$conversation.fromJson(Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$text = json['text'];
    final l$attachment = json['attachment'];
    final l$attachmentType = json['attachmentType'];
    final l$read = json['read'];
    final l$isItem = json['isItem'];
    final l$itemId = json['itemId'];
    final l$itemType = json['itemType'];
    final l$createdAt = json['createdAt'];
    final l$imageUrls = json['imageUrls'];
    final l$replyTo = json['replyTo'];
    final l$sender = json['sender'];
    final l$$__typename = json['__typename'];
    return Query$Conversation$conversation(
      id: (l$id as String),
      text: (l$text as String),
      attachment: (l$attachment as String?),
      attachmentType: l$attachmentType == null
          ? null
          : fromJson$Enum$ChatsMessageAttachmentTypeChoices(
              (l$attachmentType as String)),
      read: (l$read as bool),
      isItem: (l$isItem as bool),
      itemId: (l$itemId as int?),
      itemType: (l$itemType as String?),
      createdAt: DateTime.parse((l$createdAt as String)),
      imageUrls:
          (l$imageUrls as List<dynamic>).map((e) => (e as String)).toList(),
      replyTo: l$replyTo == null
          ? null
          : Query$Conversation$conversation$replyTo.fromJson(
              (l$replyTo as Map<String, dynamic>)),
      sender: l$sender == null
          ? null
          : Query$Conversation$conversation$sender.fromJson(
              (l$sender as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String text;

  final String? attachment;

  final Enum$ChatsMessageAttachmentTypeChoices? attachmentType;

  final bool read;

  final bool isItem;

  final int? itemId;

  final String? itemType;

  final DateTime createdAt;

  final List<String> imageUrls;

  final Query$Conversation$conversation$replyTo? replyTo;

  final Query$Conversation$conversation$sender? sender;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$text = text;
    _resultData['text'] = l$text;
    final l$attachment = attachment;
    _resultData['attachment'] = l$attachment;
    final l$attachmentType = attachmentType;
    _resultData['attachmentType'] = l$attachmentType == null
        ? null
        : toJson$Enum$ChatsMessageAttachmentTypeChoices(l$attachmentType);
    final l$read = read;
    _resultData['read'] = l$read;
    final l$isItem = isItem;
    _resultData['isItem'] = l$isItem;
    final l$itemId = itemId;
    _resultData['itemId'] = l$itemId;
    final l$itemType = itemType;
    _resultData['itemType'] = l$itemType;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$imageUrls = imageUrls;
    _resultData['imageUrls'] = l$imageUrls.map((e) => e).toList();
    final l$replyTo = replyTo;
    _resultData['replyTo'] = l$replyTo?.toJson();
    final l$sender = sender;
    _resultData['sender'] = l$sender?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$text = text;
    final l$attachment = attachment;
    final l$attachmentType = attachmentType;
    final l$read = read;
    final l$isItem = isItem;
    final l$itemId = itemId;
    final l$itemType = itemType;
    final l$createdAt = createdAt;
    final l$imageUrls = imageUrls;
    final l$replyTo = replyTo;
    final l$sender = sender;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$text,
      l$attachment,
      l$attachmentType,
      l$read,
      l$isItem,
      l$itemId,
      l$itemType,
      l$createdAt,
      Object.hashAll(l$imageUrls.map((v) => v)),
      l$replyTo,
      l$sender,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversation$conversation ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$text = text;
    final lOther$text = other.text;
    if (l$text != lOther$text) {
      return false;
    }
    final l$attachment = attachment;
    final lOther$attachment = other.attachment;
    if (l$attachment != lOther$attachment) {
      return false;
    }
    final l$attachmentType = attachmentType;
    final lOther$attachmentType = other.attachmentType;
    if (l$attachmentType != lOther$attachmentType) {
      return false;
    }
    final l$read = read;
    final lOther$read = other.read;
    if (l$read != lOther$read) {
      return false;
    }
    final l$isItem = isItem;
    final lOther$isItem = other.isItem;
    if (l$isItem != lOther$isItem) {
      return false;
    }
    final l$itemId = itemId;
    final lOther$itemId = other.itemId;
    if (l$itemId != lOther$itemId) {
      return false;
    }
    final l$itemType = itemType;
    final lOther$itemType = other.itemType;
    if (l$itemType != lOther$itemType) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$imageUrls = imageUrls;
    final lOther$imageUrls = other.imageUrls;
    if (l$imageUrls.length != lOther$imageUrls.length) {
      return false;
    }
    for (int i = 0; i < l$imageUrls.length; i++) {
      final l$imageUrls$entry = l$imageUrls[i];
      final lOther$imageUrls$entry = lOther$imageUrls[i];
      if (l$imageUrls$entry != lOther$imageUrls$entry) {
        return false;
      }
    }
    final l$replyTo = replyTo;
    final lOther$replyTo = other.replyTo;
    if (l$replyTo != lOther$replyTo) {
      return false;
    }
    final l$sender = sender;
    final lOther$sender = other.sender;
    if (l$sender != lOther$sender) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversation$conversation
    on Query$Conversation$conversation {
  CopyWith$Query$Conversation$conversation<Query$Conversation$conversation>
      get copyWith => CopyWith$Query$Conversation$conversation(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversation$conversation<TRes> {
  factory CopyWith$Query$Conversation$conversation(
    Query$Conversation$conversation instance,
    TRes Function(Query$Conversation$conversation) then,
  ) = _CopyWithImpl$Query$Conversation$conversation;

  factory CopyWith$Query$Conversation$conversation.stub(TRes res) =
      _CopyWithStubImpl$Query$Conversation$conversation;

  TRes call({
    String? id,
    String? text,
    String? attachment,
    Enum$ChatsMessageAttachmentTypeChoices? attachmentType,
    bool? read,
    bool? isItem,
    int? itemId,
    String? itemType,
    DateTime? createdAt,
    List<String>? imageUrls,
    Query$Conversation$conversation$replyTo? replyTo,
    Query$Conversation$conversation$sender? sender,
    String? $__typename,
  });
  CopyWith$Query$Conversation$conversation$replyTo<TRes> get replyTo;
  CopyWith$Query$Conversation$conversation$sender<TRes> get sender;
}

class _CopyWithImpl$Query$Conversation$conversation<TRes>
    implements CopyWith$Query$Conversation$conversation<TRes> {
  _CopyWithImpl$Query$Conversation$conversation(
    this._instance,
    this._then,
  );

  final Query$Conversation$conversation _instance;

  final TRes Function(Query$Conversation$conversation) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? text = _undefined,
    Object? attachment = _undefined,
    Object? attachmentType = _undefined,
    Object? read = _undefined,
    Object? isItem = _undefined,
    Object? itemId = _undefined,
    Object? itemType = _undefined,
    Object? createdAt = _undefined,
    Object? imageUrls = _undefined,
    Object? replyTo = _undefined,
    Object? sender = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversation$conversation(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        text: text == _undefined || text == null
            ? _instance.text
            : (text as String),
        attachment: attachment == _undefined
            ? _instance.attachment
            : (attachment as String?),
        attachmentType: attachmentType == _undefined
            ? _instance.attachmentType
            : (attachmentType as Enum$ChatsMessageAttachmentTypeChoices?),
        read: read == _undefined || read == null
            ? _instance.read
            : (read as bool),
        isItem: isItem == _undefined || isItem == null
            ? _instance.isItem
            : (isItem as bool),
        itemId: itemId == _undefined ? _instance.itemId : (itemId as int?),
        itemType:
            itemType == _undefined ? _instance.itemType : (itemType as String?),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        imageUrls: imageUrls == _undefined || imageUrls == null
            ? _instance.imageUrls
            : (imageUrls as List<String>),
        replyTo: replyTo == _undefined
            ? _instance.replyTo
            : (replyTo as Query$Conversation$conversation$replyTo?),
        sender: sender == _undefined
            ? _instance.sender
            : (sender as Query$Conversation$conversation$sender?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$Conversation$conversation$replyTo<TRes> get replyTo {
    final local$replyTo = _instance.replyTo;
    return local$replyTo == null
        ? CopyWith$Query$Conversation$conversation$replyTo.stub(
            _then(_instance))
        : CopyWith$Query$Conversation$conversation$replyTo(
            local$replyTo, (e) => call(replyTo: e));
  }

  CopyWith$Query$Conversation$conversation$sender<TRes> get sender {
    final local$sender = _instance.sender;
    return local$sender == null
        ? CopyWith$Query$Conversation$conversation$sender.stub(_then(_instance))
        : CopyWith$Query$Conversation$conversation$sender(
            local$sender, (e) => call(sender: e));
  }
}

class _CopyWithStubImpl$Query$Conversation$conversation<TRes>
    implements CopyWith$Query$Conversation$conversation<TRes> {
  _CopyWithStubImpl$Query$Conversation$conversation(this._res);

  TRes _res;

  call({
    String? id,
    String? text,
    String? attachment,
    Enum$ChatsMessageAttachmentTypeChoices? attachmentType,
    bool? read,
    bool? isItem,
    int? itemId,
    String? itemType,
    DateTime? createdAt,
    List<String>? imageUrls,
    Query$Conversation$conversation$replyTo? replyTo,
    Query$Conversation$conversation$sender? sender,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$Conversation$conversation$replyTo<TRes> get replyTo =>
      CopyWith$Query$Conversation$conversation$replyTo.stub(_res);

  CopyWith$Query$Conversation$conversation$sender<TRes> get sender =>
      CopyWith$Query$Conversation$conversation$sender.stub(_res);
}

class Query$Conversation$conversation$replyTo {
  Query$Conversation$conversation$replyTo({
    required this.id,
    required this.text,
    required this.createdAt,
    this.attachment,
    this.attachmentType,
    this.sender,
    this.$__typename = 'MessageType',
  });

  factory Query$Conversation$conversation$replyTo.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$text = json['text'];
    final l$createdAt = json['createdAt'];
    final l$attachment = json['attachment'];
    final l$attachmentType = json['attachmentType'];
    final l$sender = json['sender'];
    final l$$__typename = json['__typename'];
    return Query$Conversation$conversation$replyTo(
      id: (l$id as String),
      text: (l$text as String),
      createdAt: DateTime.parse((l$createdAt as String)),
      attachment: (l$attachment as String?),
      attachmentType: l$attachmentType == null
          ? null
          : fromJson$Enum$ChatsMessageAttachmentTypeChoices(
              (l$attachmentType as String)),
      sender: l$sender == null
          ? null
          : Query$Conversation$conversation$replyTo$sender.fromJson(
              (l$sender as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String text;

  final DateTime createdAt;

  final String? attachment;

  final Enum$ChatsMessageAttachmentTypeChoices? attachmentType;

  final Query$Conversation$conversation$replyTo$sender? sender;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$text = text;
    _resultData['text'] = l$text;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$attachment = attachment;
    _resultData['attachment'] = l$attachment;
    final l$attachmentType = attachmentType;
    _resultData['attachmentType'] = l$attachmentType == null
        ? null
        : toJson$Enum$ChatsMessageAttachmentTypeChoices(l$attachmentType);
    final l$sender = sender;
    _resultData['sender'] = l$sender?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$text = text;
    final l$createdAt = createdAt;
    final l$attachment = attachment;
    final l$attachmentType = attachmentType;
    final l$sender = sender;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$text,
      l$createdAt,
      l$attachment,
      l$attachmentType,
      l$sender,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversation$conversation$replyTo ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$text = text;
    final lOther$text = other.text;
    if (l$text != lOther$text) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$attachment = attachment;
    final lOther$attachment = other.attachment;
    if (l$attachment != lOther$attachment) {
      return false;
    }
    final l$attachmentType = attachmentType;
    final lOther$attachmentType = other.attachmentType;
    if (l$attachmentType != lOther$attachmentType) {
      return false;
    }
    final l$sender = sender;
    final lOther$sender = other.sender;
    if (l$sender != lOther$sender) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversation$conversation$replyTo
    on Query$Conversation$conversation$replyTo {
  CopyWith$Query$Conversation$conversation$replyTo<
          Query$Conversation$conversation$replyTo>
      get copyWith => CopyWith$Query$Conversation$conversation$replyTo(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversation$conversation$replyTo<TRes> {
  factory CopyWith$Query$Conversation$conversation$replyTo(
    Query$Conversation$conversation$replyTo instance,
    TRes Function(Query$Conversation$conversation$replyTo) then,
  ) = _CopyWithImpl$Query$Conversation$conversation$replyTo;

  factory CopyWith$Query$Conversation$conversation$replyTo.stub(TRes res) =
      _CopyWithStubImpl$Query$Conversation$conversation$replyTo;

  TRes call({
    String? id,
    String? text,
    DateTime? createdAt,
    String? attachment,
    Enum$ChatsMessageAttachmentTypeChoices? attachmentType,
    Query$Conversation$conversation$replyTo$sender? sender,
    String? $__typename,
  });
  CopyWith$Query$Conversation$conversation$replyTo$sender<TRes> get sender;
}

class _CopyWithImpl$Query$Conversation$conversation$replyTo<TRes>
    implements CopyWith$Query$Conversation$conversation$replyTo<TRes> {
  _CopyWithImpl$Query$Conversation$conversation$replyTo(
    this._instance,
    this._then,
  );

  final Query$Conversation$conversation$replyTo _instance;

  final TRes Function(Query$Conversation$conversation$replyTo) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? text = _undefined,
    Object? createdAt = _undefined,
    Object? attachment = _undefined,
    Object? attachmentType = _undefined,
    Object? sender = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversation$conversation$replyTo(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        text: text == _undefined || text == null
            ? _instance.text
            : (text as String),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        attachment: attachment == _undefined
            ? _instance.attachment
            : (attachment as String?),
        attachmentType: attachmentType == _undefined
            ? _instance.attachmentType
            : (attachmentType as Enum$ChatsMessageAttachmentTypeChoices?),
        sender: sender == _undefined
            ? _instance.sender
            : (sender as Query$Conversation$conversation$replyTo$sender?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$Conversation$conversation$replyTo$sender<TRes> get sender {
    final local$sender = _instance.sender;
    return local$sender == null
        ? CopyWith$Query$Conversation$conversation$replyTo$sender.stub(
            _then(_instance))
        : CopyWith$Query$Conversation$conversation$replyTo$sender(
            local$sender, (e) => call(sender: e));
  }
}

class _CopyWithStubImpl$Query$Conversation$conversation$replyTo<TRes>
    implements CopyWith$Query$Conversation$conversation$replyTo<TRes> {
  _CopyWithStubImpl$Query$Conversation$conversation$replyTo(this._res);

  TRes _res;

  call({
    String? id,
    String? text,
    DateTime? createdAt,
    String? attachment,
    Enum$ChatsMessageAttachmentTypeChoices? attachmentType,
    Query$Conversation$conversation$replyTo$sender? sender,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$Conversation$conversation$replyTo$sender<TRes> get sender =>
      CopyWith$Query$Conversation$conversation$replyTo$sender.stub(_res);
}

class Query$Conversation$conversation$replyTo$sender {
  Query$Conversation$conversation$replyTo$sender({
    this.id,
    this.username,
    this.profilePictureUrl,
    this.thumbnailUrl,
    this.displayName,
    this.$__typename = 'UserType',
  });

  factory Query$Conversation$conversation$replyTo$sender.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$thumbnailUrl = json['thumbnailUrl'];
    final l$displayName = json['displayName'];
    final l$$__typename = json['__typename'];
    return Query$Conversation$conversation$replyTo$sender(
      id: (l$id as int?),
      username: (l$username as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      thumbnailUrl: (l$thumbnailUrl as String?),
      displayName: (l$displayName as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String? profilePictureUrl;

  final String? thumbnailUrl;

  final String? displayName;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$thumbnailUrl = thumbnailUrl;
    _resultData['thumbnailUrl'] = l$thumbnailUrl;
    final l$displayName = displayName;
    _resultData['displayName'] = l$displayName;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$profilePictureUrl = profilePictureUrl;
    final l$thumbnailUrl = thumbnailUrl;
    final l$displayName = displayName;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$profilePictureUrl,
      l$thumbnailUrl,
      l$displayName,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversation$conversation$replyTo$sender ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$thumbnailUrl = thumbnailUrl;
    final lOther$thumbnailUrl = other.thumbnailUrl;
    if (l$thumbnailUrl != lOther$thumbnailUrl) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversation$conversation$replyTo$sender
    on Query$Conversation$conversation$replyTo$sender {
  CopyWith$Query$Conversation$conversation$replyTo$sender<
          Query$Conversation$conversation$replyTo$sender>
      get copyWith => CopyWith$Query$Conversation$conversation$replyTo$sender(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversation$conversation$replyTo$sender<TRes> {
  factory CopyWith$Query$Conversation$conversation$replyTo$sender(
    Query$Conversation$conversation$replyTo$sender instance,
    TRes Function(Query$Conversation$conversation$replyTo$sender) then,
  ) = _CopyWithImpl$Query$Conversation$conversation$replyTo$sender;

  factory CopyWith$Query$Conversation$conversation$replyTo$sender.stub(
          TRes res) =
      _CopyWithStubImpl$Query$Conversation$conversation$replyTo$sender;

  TRes call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? thumbnailUrl,
    String? displayName,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Conversation$conversation$replyTo$sender<TRes>
    implements CopyWith$Query$Conversation$conversation$replyTo$sender<TRes> {
  _CopyWithImpl$Query$Conversation$conversation$replyTo$sender(
    this._instance,
    this._then,
  );

  final Query$Conversation$conversation$replyTo$sender _instance;

  final TRes Function(Query$Conversation$conversation$replyTo$sender) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? thumbnailUrl = _undefined,
    Object? displayName = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversation$conversation$replyTo$sender(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        thumbnailUrl: thumbnailUrl == _undefined
            ? _instance.thumbnailUrl
            : (thumbnailUrl as String?),
        displayName: displayName == _undefined
            ? _instance.displayName
            : (displayName as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Conversation$conversation$replyTo$sender<TRes>
    implements CopyWith$Query$Conversation$conversation$replyTo$sender<TRes> {
  _CopyWithStubImpl$Query$Conversation$conversation$replyTo$sender(this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? thumbnailUrl,
    String? displayName,
    String? $__typename,
  }) =>
      _res;
}

class Query$Conversation$conversation$sender {
  Query$Conversation$conversation$sender({
    this.id,
    this.username,
    this.profilePictureUrl,
    this.thumbnailUrl,
    this.displayName,
    this.$__typename = 'UserType',
  });

  factory Query$Conversation$conversation$sender.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$thumbnailUrl = json['thumbnailUrl'];
    final l$displayName = json['displayName'];
    final l$$__typename = json['__typename'];
    return Query$Conversation$conversation$sender(
      id: (l$id as int?),
      username: (l$username as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      thumbnailUrl: (l$thumbnailUrl as String?),
      displayName: (l$displayName as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String? profilePictureUrl;

  final String? thumbnailUrl;

  final String? displayName;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$thumbnailUrl = thumbnailUrl;
    _resultData['thumbnailUrl'] = l$thumbnailUrl;
    final l$displayName = displayName;
    _resultData['displayName'] = l$displayName;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$profilePictureUrl = profilePictureUrl;
    final l$thumbnailUrl = thumbnailUrl;
    final l$displayName = displayName;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$profilePictureUrl,
      l$thumbnailUrl,
      l$displayName,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversation$conversation$sender ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$thumbnailUrl = thumbnailUrl;
    final lOther$thumbnailUrl = other.thumbnailUrl;
    if (l$thumbnailUrl != lOther$thumbnailUrl) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversation$conversation$sender
    on Query$Conversation$conversation$sender {
  CopyWith$Query$Conversation$conversation$sender<
          Query$Conversation$conversation$sender>
      get copyWith => CopyWith$Query$Conversation$conversation$sender(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversation$conversation$sender<TRes> {
  factory CopyWith$Query$Conversation$conversation$sender(
    Query$Conversation$conversation$sender instance,
    TRes Function(Query$Conversation$conversation$sender) then,
  ) = _CopyWithImpl$Query$Conversation$conversation$sender;

  factory CopyWith$Query$Conversation$conversation$sender.stub(TRes res) =
      _CopyWithStubImpl$Query$Conversation$conversation$sender;

  TRes call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? thumbnailUrl,
    String? displayName,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Conversation$conversation$sender<TRes>
    implements CopyWith$Query$Conversation$conversation$sender<TRes> {
  _CopyWithImpl$Query$Conversation$conversation$sender(
    this._instance,
    this._then,
  );

  final Query$Conversation$conversation$sender _instance;

  final TRes Function(Query$Conversation$conversation$sender) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? thumbnailUrl = _undefined,
    Object? displayName = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversation$conversation$sender(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        thumbnailUrl: thumbnailUrl == _undefined
            ? _instance.thumbnailUrl
            : (thumbnailUrl as String?),
        displayName: displayName == _undefined
            ? _instance.displayName
            : (displayName as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Conversation$conversation$sender<TRes>
    implements CopyWith$Query$Conversation$conversation$sender<TRes> {
  _CopyWithStubImpl$Query$Conversation$conversation$sender(this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? thumbnailUrl,
    String? displayName,
    String? $__typename,
  }) =>
      _res;
}

class Query$Conversations {
  Query$Conversations({
    this.conversations,
    this.$__typename = 'Query',
  });

  factory Query$Conversations.fromJson(Map<String, dynamic> json) {
    final l$conversations = json['conversations'];
    final l$$__typename = json['__typename'];
    return Query$Conversations(
      conversations: (l$conversations as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$Conversations$conversations.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$Conversations$conversations?>? conversations;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$conversations = conversations;
    _resultData['conversations'] =
        l$conversations?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$conversations = conversations;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$conversations == null
          ? null
          : Object.hashAll(l$conversations.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversations || runtimeType != other.runtimeType) {
      return false;
    }
    final l$conversations = conversations;
    final lOther$conversations = other.conversations;
    if (l$conversations != null && lOther$conversations != null) {
      if (l$conversations.length != lOther$conversations.length) {
        return false;
      }
      for (int i = 0; i < l$conversations.length; i++) {
        final l$conversations$entry = l$conversations[i];
        final lOther$conversations$entry = lOther$conversations[i];
        if (l$conversations$entry != lOther$conversations$entry) {
          return false;
        }
      }
    } else if (l$conversations != lOther$conversations) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversations on Query$Conversations {
  CopyWith$Query$Conversations<Query$Conversations> get copyWith =>
      CopyWith$Query$Conversations(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$Conversations<TRes> {
  factory CopyWith$Query$Conversations(
    Query$Conversations instance,
    TRes Function(Query$Conversations) then,
  ) = _CopyWithImpl$Query$Conversations;

  factory CopyWith$Query$Conversations.stub(TRes res) =
      _CopyWithStubImpl$Query$Conversations;

  TRes call({
    List<Query$Conversations$conversations?>? conversations,
    String? $__typename,
  });
  TRes conversations(
      Iterable<Query$Conversations$conversations?>? Function(
              Iterable<
                  CopyWith$Query$Conversations$conversations<
                      Query$Conversations$conversations>?>?)
          _fn);
}

class _CopyWithImpl$Query$Conversations<TRes>
    implements CopyWith$Query$Conversations<TRes> {
  _CopyWithImpl$Query$Conversations(
    this._instance,
    this._then,
  );

  final Query$Conversations _instance;

  final TRes Function(Query$Conversations) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? conversations = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversations(
        conversations: conversations == _undefined
            ? _instance.conversations
            : (conversations as List<Query$Conversations$conversations?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes conversations(
          Iterable<Query$Conversations$conversations?>? Function(
                  Iterable<
                      CopyWith$Query$Conversations$conversations<
                          Query$Conversations$conversations>?>?)
              _fn) =>
      call(
          conversations: _fn(_instance.conversations?.map((e) => e == null
              ? null
              : CopyWith$Query$Conversations$conversations(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$Conversations<TRes>
    implements CopyWith$Query$Conversations<TRes> {
  _CopyWithStubImpl$Query$Conversations(this._res);

  TRes _res;

  call({
    List<Query$Conversations$conversations?>? conversations,
    String? $__typename,
  }) =>
      _res;

  conversations(_fn) => _res;
}

const documentNodeQueryConversations = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'Conversations'),
    variableDefinitions: [],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'conversations'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'disableResponse'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'lastModified'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'participant1Deleted'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'participant2Deleted'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'unreadMessagesCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'recipient'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'displayName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'profilePictureUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'thumbnailUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'offer'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'products'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'brand'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: '__typename'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'category'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: '__typename'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'imagesUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'name'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'price'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'size'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'id'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'name'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: '__typename'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'status'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'seller'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'email'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'fullName'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'username'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'thumbnailUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'profilePictureUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: '__typename'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'status'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'updatedBy'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'updatedAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'expiresAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'createdBy'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'createdAt'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'offerPrice'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'message'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'children'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'buyer'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: SelectionSetNode(selections: [
                      FieldNode(
                        name: NameNode(value: 'username'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'thumbnailUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'profilePictureUrl'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: 'fullName'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                      FieldNode(
                        name: NameNode(value: '__typename'),
                        alias: null,
                        arguments: [],
                        directives: [],
                        selectionSet: null,
                      ),
                    ]),
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'createdBy'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'status'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedAt'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'updatedBy'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'offerPrice'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'message'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'buyer'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'username'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'thumbnailUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'fullName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'lastMessage'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'text'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'attachment'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'attachmentType'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'read'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'imageUrls'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'isItem'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'sender'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'username'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'profilePictureUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'thumbnailUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$Conversations _parserFn$Query$Conversations(Map<String, dynamic> data) =>
    Query$Conversations.fromJson(data);
typedef OnQueryComplete$Query$Conversations = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$Conversations?,
);

class Options$Query$Conversations
    extends graphql.QueryOptions<Query$Conversations> {
  Options$Query$Conversations({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$Conversations? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$Conversations? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$Conversations(data),
                  ),
          onError: onError,
          document: documentNodeQueryConversations,
          parserFn: _parserFn$Query$Conversations,
        );

  final OnQueryComplete$Query$Conversations? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$Conversations
    extends graphql.WatchQueryOptions<Query$Conversations> {
  WatchOptions$Query$Conversations({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$Conversations? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryConversations,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$Conversations,
        );
}

class FetchMoreOptions$Query$Conversations extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$Conversations(
      {required graphql.UpdateQuery updateQuery})
      : super(
          updateQuery: updateQuery,
          document: documentNodeQueryConversations,
        );
}

extension ClientExtension$Query$Conversations on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$Conversations>> query$Conversations(
          [Options$Query$Conversations? options]) async =>
      await this.query(options ?? Options$Query$Conversations());
  graphql.ObservableQuery<Query$Conversations> watchQuery$Conversations(
          [WatchOptions$Query$Conversations? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$Conversations());
  void writeQuery$Conversations({
    required Query$Conversations data,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
            operation:
                graphql.Operation(document: documentNodeQueryConversations)),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$Conversations? readQuery$Conversations({bool optimistic = true}) {
    final result = this.readQuery(
      graphql.Request(
          operation:
              graphql.Operation(document: documentNodeQueryConversations)),
      optimistic: optimistic,
    );
    return result == null ? null : Query$Conversations.fromJson(result);
  }
}

class Query$Conversations$conversations {
  Query$Conversations$conversations({
    required this.id,
    required this.name,
    required this.disableResponse,
    required this.createdAt,
    required this.lastModified,
    required this.participant1Deleted,
    required this.participant2Deleted,
    this.unreadMessagesCount,
    this.recipient,
    this.offer,
    this.lastMessage,
    this.$__typename = 'ConversationType',
  });

  factory Query$Conversations$conversations.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$disableResponse = json['disableResponse'];
    final l$createdAt = json['createdAt'];
    final l$lastModified = json['lastModified'];
    final l$participant1Deleted = json['participant1Deleted'];
    final l$participant2Deleted = json['participant2Deleted'];
    final l$unreadMessagesCount = json['unreadMessagesCount'];
    final l$recipient = json['recipient'];
    final l$offer = json['offer'];
    final l$lastMessage = json['lastMessage'];
    final l$$__typename = json['__typename'];
    return Query$Conversations$conversations(
      id: (l$id as String),
      name: (l$name as String),
      disableResponse: (l$disableResponse as bool),
      createdAt: DateTime.parse((l$createdAt as String)),
      lastModified: DateTime.parse((l$lastModified as String)),
      participant1Deleted: (l$participant1Deleted as bool),
      participant2Deleted: (l$participant2Deleted as bool),
      unreadMessagesCount: (l$unreadMessagesCount as int?),
      recipient: l$recipient == null
          ? null
          : Query$Conversations$conversations$recipient.fromJson(
              (l$recipient as Map<String, dynamic>)),
      offer: l$offer == null
          ? null
          : Query$Conversations$conversations$offer.fromJson(
              (l$offer as Map<String, dynamic>)),
      lastMessage: l$lastMessage == null
          ? null
          : Query$Conversations$conversations$lastMessage.fromJson(
              (l$lastMessage as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String name;

  final bool disableResponse;

  final DateTime createdAt;

  final DateTime lastModified;

  final bool participant1Deleted;

  final bool participant2Deleted;

  final int? unreadMessagesCount;

  final Query$Conversations$conversations$recipient? recipient;

  final Query$Conversations$conversations$offer? offer;

  final Query$Conversations$conversations$lastMessage? lastMessage;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$disableResponse = disableResponse;
    _resultData['disableResponse'] = l$disableResponse;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$lastModified = lastModified;
    _resultData['lastModified'] = l$lastModified.toIso8601String();
    final l$participant1Deleted = participant1Deleted;
    _resultData['participant1Deleted'] = l$participant1Deleted;
    final l$participant2Deleted = participant2Deleted;
    _resultData['participant2Deleted'] = l$participant2Deleted;
    final l$unreadMessagesCount = unreadMessagesCount;
    _resultData['unreadMessagesCount'] = l$unreadMessagesCount;
    final l$recipient = recipient;
    _resultData['recipient'] = l$recipient?.toJson();
    final l$offer = offer;
    _resultData['offer'] = l$offer?.toJson();
    final l$lastMessage = lastMessage;
    _resultData['lastMessage'] = l$lastMessage?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$disableResponse = disableResponse;
    final l$createdAt = createdAt;
    final l$lastModified = lastModified;
    final l$participant1Deleted = participant1Deleted;
    final l$participant2Deleted = participant2Deleted;
    final l$unreadMessagesCount = unreadMessagesCount;
    final l$recipient = recipient;
    final l$offer = offer;
    final l$lastMessage = lastMessage;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$disableResponse,
      l$createdAt,
      l$lastModified,
      l$participant1Deleted,
      l$participant2Deleted,
      l$unreadMessagesCount,
      l$recipient,
      l$offer,
      l$lastMessage,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversations$conversations ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$disableResponse = disableResponse;
    final lOther$disableResponse = other.disableResponse;
    if (l$disableResponse != lOther$disableResponse) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$lastModified = lastModified;
    final lOther$lastModified = other.lastModified;
    if (l$lastModified != lOther$lastModified) {
      return false;
    }
    final l$participant1Deleted = participant1Deleted;
    final lOther$participant1Deleted = other.participant1Deleted;
    if (l$participant1Deleted != lOther$participant1Deleted) {
      return false;
    }
    final l$participant2Deleted = participant2Deleted;
    final lOther$participant2Deleted = other.participant2Deleted;
    if (l$participant2Deleted != lOther$participant2Deleted) {
      return false;
    }
    final l$unreadMessagesCount = unreadMessagesCount;
    final lOther$unreadMessagesCount = other.unreadMessagesCount;
    if (l$unreadMessagesCount != lOther$unreadMessagesCount) {
      return false;
    }
    final l$recipient = recipient;
    final lOther$recipient = other.recipient;
    if (l$recipient != lOther$recipient) {
      return false;
    }
    final l$offer = offer;
    final lOther$offer = other.offer;
    if (l$offer != lOther$offer) {
      return false;
    }
    final l$lastMessage = lastMessage;
    final lOther$lastMessage = other.lastMessage;
    if (l$lastMessage != lOther$lastMessage) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversations$conversations
    on Query$Conversations$conversations {
  CopyWith$Query$Conversations$conversations<Query$Conversations$conversations>
      get copyWith => CopyWith$Query$Conversations$conversations(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversations$conversations<TRes> {
  factory CopyWith$Query$Conversations$conversations(
    Query$Conversations$conversations instance,
    TRes Function(Query$Conversations$conversations) then,
  ) = _CopyWithImpl$Query$Conversations$conversations;

  factory CopyWith$Query$Conversations$conversations.stub(TRes res) =
      _CopyWithStubImpl$Query$Conversations$conversations;

  TRes call({
    String? id,
    String? name,
    bool? disableResponse,
    DateTime? createdAt,
    DateTime? lastModified,
    bool? participant1Deleted,
    bool? participant2Deleted,
    int? unreadMessagesCount,
    Query$Conversations$conversations$recipient? recipient,
    Query$Conversations$conversations$offer? offer,
    Query$Conversations$conversations$lastMessage? lastMessage,
    String? $__typename,
  });
  CopyWith$Query$Conversations$conversations$recipient<TRes> get recipient;
  CopyWith$Query$Conversations$conversations$offer<TRes> get offer;
  CopyWith$Query$Conversations$conversations$lastMessage<TRes> get lastMessage;
}

class _CopyWithImpl$Query$Conversations$conversations<TRes>
    implements CopyWith$Query$Conversations$conversations<TRes> {
  _CopyWithImpl$Query$Conversations$conversations(
    this._instance,
    this._then,
  );

  final Query$Conversations$conversations _instance;

  final TRes Function(Query$Conversations$conversations) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? disableResponse = _undefined,
    Object? createdAt = _undefined,
    Object? lastModified = _undefined,
    Object? participant1Deleted = _undefined,
    Object? participant2Deleted = _undefined,
    Object? unreadMessagesCount = _undefined,
    Object? recipient = _undefined,
    Object? offer = _undefined,
    Object? lastMessage = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversations$conversations(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        disableResponse:
            disableResponse == _undefined || disableResponse == null
                ? _instance.disableResponse
                : (disableResponse as bool),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        lastModified: lastModified == _undefined || lastModified == null
            ? _instance.lastModified
            : (lastModified as DateTime),
        participant1Deleted:
            participant1Deleted == _undefined || participant1Deleted == null
                ? _instance.participant1Deleted
                : (participant1Deleted as bool),
        participant2Deleted:
            participant2Deleted == _undefined || participant2Deleted == null
                ? _instance.participant2Deleted
                : (participant2Deleted as bool),
        unreadMessagesCount: unreadMessagesCount == _undefined
            ? _instance.unreadMessagesCount
            : (unreadMessagesCount as int?),
        recipient: recipient == _undefined
            ? _instance.recipient
            : (recipient as Query$Conversations$conversations$recipient?),
        offer: offer == _undefined
            ? _instance.offer
            : (offer as Query$Conversations$conversations$offer?),
        lastMessage: lastMessage == _undefined
            ? _instance.lastMessage
            : (lastMessage as Query$Conversations$conversations$lastMessage?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$Conversations$conversations$recipient<TRes> get recipient {
    final local$recipient = _instance.recipient;
    return local$recipient == null
        ? CopyWith$Query$Conversations$conversations$recipient.stub(
            _then(_instance))
        : CopyWith$Query$Conversations$conversations$recipient(
            local$recipient, (e) => call(recipient: e));
  }

  CopyWith$Query$Conversations$conversations$offer<TRes> get offer {
    final local$offer = _instance.offer;
    return local$offer == null
        ? CopyWith$Query$Conversations$conversations$offer.stub(
            _then(_instance))
        : CopyWith$Query$Conversations$conversations$offer(
            local$offer, (e) => call(offer: e));
  }

  CopyWith$Query$Conversations$conversations$lastMessage<TRes> get lastMessage {
    final local$lastMessage = _instance.lastMessage;
    return local$lastMessage == null
        ? CopyWith$Query$Conversations$conversations$lastMessage.stub(
            _then(_instance))
        : CopyWith$Query$Conversations$conversations$lastMessage(
            local$lastMessage, (e) => call(lastMessage: e));
  }
}

class _CopyWithStubImpl$Query$Conversations$conversations<TRes>
    implements CopyWith$Query$Conversations$conversations<TRes> {
  _CopyWithStubImpl$Query$Conversations$conversations(this._res);

  TRes _res;

  call({
    String? id,
    String? name,
    bool? disableResponse,
    DateTime? createdAt,
    DateTime? lastModified,
    bool? participant1Deleted,
    bool? participant2Deleted,
    int? unreadMessagesCount,
    Query$Conversations$conversations$recipient? recipient,
    Query$Conversations$conversations$offer? offer,
    Query$Conversations$conversations$lastMessage? lastMessage,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$Conversations$conversations$recipient<TRes> get recipient =>
      CopyWith$Query$Conversations$conversations$recipient.stub(_res);

  CopyWith$Query$Conversations$conversations$offer<TRes> get offer =>
      CopyWith$Query$Conversations$conversations$offer.stub(_res);

  CopyWith$Query$Conversations$conversations$lastMessage<TRes>
      get lastMessage =>
          CopyWith$Query$Conversations$conversations$lastMessage.stub(_res);
}

class Query$Conversations$conversations$recipient {
  Query$Conversations$conversations$recipient({
    this.id,
    this.username,
    this.displayName,
    this.profilePictureUrl,
    this.thumbnailUrl,
    this.$__typename = 'UserType',
  });

  factory Query$Conversations$conversations$recipient.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$displayName = json['displayName'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$thumbnailUrl = json['thumbnailUrl'];
    final l$$__typename = json['__typename'];
    return Query$Conversations$conversations$recipient(
      id: (l$id as int?),
      username: (l$username as String?),
      displayName: (l$displayName as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      thumbnailUrl: (l$thumbnailUrl as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String? displayName;

  final String? profilePictureUrl;

  final String? thumbnailUrl;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$displayName = displayName;
    _resultData['displayName'] = l$displayName;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$thumbnailUrl = thumbnailUrl;
    _resultData['thumbnailUrl'] = l$thumbnailUrl;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$displayName = displayName;
    final l$profilePictureUrl = profilePictureUrl;
    final l$thumbnailUrl = thumbnailUrl;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$displayName,
      l$profilePictureUrl,
      l$thumbnailUrl,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversations$conversations$recipient ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$thumbnailUrl = thumbnailUrl;
    final lOther$thumbnailUrl = other.thumbnailUrl;
    if (l$thumbnailUrl != lOther$thumbnailUrl) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversations$conversations$recipient
    on Query$Conversations$conversations$recipient {
  CopyWith$Query$Conversations$conversations$recipient<
          Query$Conversations$conversations$recipient>
      get copyWith => CopyWith$Query$Conversations$conversations$recipient(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversations$conversations$recipient<TRes> {
  factory CopyWith$Query$Conversations$conversations$recipient(
    Query$Conversations$conversations$recipient instance,
    TRes Function(Query$Conversations$conversations$recipient) then,
  ) = _CopyWithImpl$Query$Conversations$conversations$recipient;

  factory CopyWith$Query$Conversations$conversations$recipient.stub(TRes res) =
      _CopyWithStubImpl$Query$Conversations$conversations$recipient;

  TRes call({
    int? id,
    String? username,
    String? displayName,
    String? profilePictureUrl,
    String? thumbnailUrl,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Conversations$conversations$recipient<TRes>
    implements CopyWith$Query$Conversations$conversations$recipient<TRes> {
  _CopyWithImpl$Query$Conversations$conversations$recipient(
    this._instance,
    this._then,
  );

  final Query$Conversations$conversations$recipient _instance;

  final TRes Function(Query$Conversations$conversations$recipient) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? displayName = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? thumbnailUrl = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversations$conversations$recipient(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        displayName: displayName == _undefined
            ? _instance.displayName
            : (displayName as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        thumbnailUrl: thumbnailUrl == _undefined
            ? _instance.thumbnailUrl
            : (thumbnailUrl as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Conversations$conversations$recipient<TRes>
    implements CopyWith$Query$Conversations$conversations$recipient<TRes> {
  _CopyWithStubImpl$Query$Conversations$conversations$recipient(this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? displayName,
    String? profilePictureUrl,
    String? thumbnailUrl,
    String? $__typename,
  }) =>
      _res;
}

class Query$Conversations$conversations$offer {
  Query$Conversations$conversations$offer({
    required this.products,
    this.status,
    this.updatedBy,
    required this.updatedAt,
    required this.id,
    this.expiresAt,
    this.createdBy,
    required this.createdAt,
    required this.offerPrice,
    this.message,
    required this.children,
    this.buyer,
    this.$__typename = 'OfferType',
  });

  factory Query$Conversations$conversations$offer.fromJson(
      Map<String, dynamic> json) {
    final l$products = json['products'];
    final l$status = json['status'];
    final l$updatedBy = json['updatedBy'];
    final l$updatedAt = json['updatedAt'];
    final l$id = json['id'];
    final l$expiresAt = json['expiresAt'];
    final l$createdBy = json['createdBy'];
    final l$createdAt = json['createdAt'];
    final l$offerPrice = json['offerPrice'];
    final l$message = json['message'];
    final l$children = json['children'];
    final l$buyer = json['buyer'];
    final l$$__typename = json['__typename'];
    return Query$Conversations$conversations$offer(
      products: (l$products as List<dynamic>)
          .map((e) => Query$Conversations$conversations$offer$products.fromJson(
              (e as Map<String, dynamic>)))
          .toList(),
      status: (l$status as String?),
      updatedBy: (l$updatedBy as String?),
      updatedAt: DateTime.parse((l$updatedAt as String)),
      id: (l$id as String),
      expiresAt:
          l$expiresAt == null ? null : DateTime.parse((l$expiresAt as String)),
      createdBy: (l$createdBy as String?),
      createdAt: DateTime.parse((l$createdAt as String)),
      offerPrice: (l$offerPrice as String),
      message: (l$message as String?),
      children: (l$children as List<dynamic>)
          .map((e) => Query$Conversations$conversations$offer$children.fromJson(
              (e as Map<String, dynamic>)))
          .toList(),
      buyer: l$buyer == null
          ? null
          : Query$Conversations$conversations$offer$buyer.fromJson(
              (l$buyer as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$Conversations$conversations$offer$products> products;

  final String? status;

  final String? updatedBy;

  final DateTime updatedAt;

  final String id;

  final DateTime? expiresAt;

  final String? createdBy;

  final DateTime createdAt;

  final String offerPrice;

  final String? message;

  final List<Query$Conversations$conversations$offer$children> children;

  final Query$Conversations$conversations$offer$buyer? buyer;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$products = products;
    _resultData['products'] = l$products.map((e) => e.toJson()).toList();
    final l$status = status;
    _resultData['status'] = l$status;
    final l$updatedBy = updatedBy;
    _resultData['updatedBy'] = l$updatedBy;
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt.toIso8601String();
    final l$id = id;
    _resultData['id'] = l$id;
    final l$expiresAt = expiresAt;
    _resultData['expiresAt'] = l$expiresAt?.toIso8601String();
    final l$createdBy = createdBy;
    _resultData['createdBy'] = l$createdBy;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$offerPrice = offerPrice;
    _resultData['offerPrice'] = l$offerPrice;
    final l$message = message;
    _resultData['message'] = l$message;
    final l$children = children;
    _resultData['children'] = l$children.map((e) => e.toJson()).toList();
    final l$buyer = buyer;
    _resultData['buyer'] = l$buyer?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$products = products;
    final l$status = status;
    final l$updatedBy = updatedBy;
    final l$updatedAt = updatedAt;
    final l$id = id;
    final l$expiresAt = expiresAt;
    final l$createdBy = createdBy;
    final l$createdAt = createdAt;
    final l$offerPrice = offerPrice;
    final l$message = message;
    final l$children = children;
    final l$buyer = buyer;
    final l$$__typename = $__typename;
    return Object.hashAll([
      Object.hashAll(l$products.map((v) => v)),
      l$status,
      l$updatedBy,
      l$updatedAt,
      l$id,
      l$expiresAt,
      l$createdBy,
      l$createdAt,
      l$offerPrice,
      l$message,
      Object.hashAll(l$children.map((v) => v)),
      l$buyer,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversations$conversations$offer ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$products = products;
    final lOther$products = other.products;
    if (l$products.length != lOther$products.length) {
      return false;
    }
    for (int i = 0; i < l$products.length; i++) {
      final l$products$entry = l$products[i];
      final lOther$products$entry = lOther$products[i];
      if (l$products$entry != lOther$products$entry) {
        return false;
      }
    }
    final l$status = status;
    final lOther$status = other.status;
    if (l$status != lOther$status) {
      return false;
    }
    final l$updatedBy = updatedBy;
    final lOther$updatedBy = other.updatedBy;
    if (l$updatedBy != lOther$updatedBy) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$expiresAt = expiresAt;
    final lOther$expiresAt = other.expiresAt;
    if (l$expiresAt != lOther$expiresAt) {
      return false;
    }
    final l$createdBy = createdBy;
    final lOther$createdBy = other.createdBy;
    if (l$createdBy != lOther$createdBy) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$offerPrice = offerPrice;
    final lOther$offerPrice = other.offerPrice;
    if (l$offerPrice != lOther$offerPrice) {
      return false;
    }
    final l$message = message;
    final lOther$message = other.message;
    if (l$message != lOther$message) {
      return false;
    }
    final l$children = children;
    final lOther$children = other.children;
    if (l$children.length != lOther$children.length) {
      return false;
    }
    for (int i = 0; i < l$children.length; i++) {
      final l$children$entry = l$children[i];
      final lOther$children$entry = lOther$children[i];
      if (l$children$entry != lOther$children$entry) {
        return false;
      }
    }
    final l$buyer = buyer;
    final lOther$buyer = other.buyer;
    if (l$buyer != lOther$buyer) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversations$conversations$offer
    on Query$Conversations$conversations$offer {
  CopyWith$Query$Conversations$conversations$offer<
          Query$Conversations$conversations$offer>
      get copyWith => CopyWith$Query$Conversations$conversations$offer(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversations$conversations$offer<TRes> {
  factory CopyWith$Query$Conversations$conversations$offer(
    Query$Conversations$conversations$offer instance,
    TRes Function(Query$Conversations$conversations$offer) then,
  ) = _CopyWithImpl$Query$Conversations$conversations$offer;

  factory CopyWith$Query$Conversations$conversations$offer.stub(TRes res) =
      _CopyWithStubImpl$Query$Conversations$conversations$offer;

  TRes call({
    List<Query$Conversations$conversations$offer$products>? products,
    String? status,
    String? updatedBy,
    DateTime? updatedAt,
    String? id,
    DateTime? expiresAt,
    String? createdBy,
    DateTime? createdAt,
    String? offerPrice,
    String? message,
    List<Query$Conversations$conversations$offer$children>? children,
    Query$Conversations$conversations$offer$buyer? buyer,
    String? $__typename,
  });
  TRes products(
      Iterable<Query$Conversations$conversations$offer$products> Function(
              Iterable<
                  CopyWith$Query$Conversations$conversations$offer$products<
                      Query$Conversations$conversations$offer$products>>)
          _fn);
  TRes children(
      Iterable<Query$Conversations$conversations$offer$children> Function(
              Iterable<
                  CopyWith$Query$Conversations$conversations$offer$children<
                      Query$Conversations$conversations$offer$children>>)
          _fn);
  CopyWith$Query$Conversations$conversations$offer$buyer<TRes> get buyer;
}

class _CopyWithImpl$Query$Conversations$conversations$offer<TRes>
    implements CopyWith$Query$Conversations$conversations$offer<TRes> {
  _CopyWithImpl$Query$Conversations$conversations$offer(
    this._instance,
    this._then,
  );

  final Query$Conversations$conversations$offer _instance;

  final TRes Function(Query$Conversations$conversations$offer) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? products = _undefined,
    Object? status = _undefined,
    Object? updatedBy = _undefined,
    Object? updatedAt = _undefined,
    Object? id = _undefined,
    Object? expiresAt = _undefined,
    Object? createdBy = _undefined,
    Object? createdAt = _undefined,
    Object? offerPrice = _undefined,
    Object? message = _undefined,
    Object? children = _undefined,
    Object? buyer = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversations$conversations$offer(
        products: products == _undefined || products == null
            ? _instance.products
            : (products
                as List<Query$Conversations$conversations$offer$products>),
        status: status == _undefined ? _instance.status : (status as String?),
        updatedBy: updatedBy == _undefined
            ? _instance.updatedBy
            : (updatedBy as String?),
        updatedAt: updatedAt == _undefined || updatedAt == null
            ? _instance.updatedAt
            : (updatedAt as DateTime),
        id: id == _undefined || id == null ? _instance.id : (id as String),
        expiresAt: expiresAt == _undefined
            ? _instance.expiresAt
            : (expiresAt as DateTime?),
        createdBy: createdBy == _undefined
            ? _instance.createdBy
            : (createdBy as String?),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        offerPrice: offerPrice == _undefined || offerPrice == null
            ? _instance.offerPrice
            : (offerPrice as String),
        message:
            message == _undefined ? _instance.message : (message as String?),
        children: children == _undefined || children == null
            ? _instance.children
            : (children
                as List<Query$Conversations$conversations$offer$children>),
        buyer: buyer == _undefined
            ? _instance.buyer
            : (buyer as Query$Conversations$conversations$offer$buyer?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes products(
          Iterable<Query$Conversations$conversations$offer$products> Function(
                  Iterable<
                      CopyWith$Query$Conversations$conversations$offer$products<
                          Query$Conversations$conversations$offer$products>>)
              _fn) =>
      call(
          products: _fn(_instance.products.map(
              (e) => CopyWith$Query$Conversations$conversations$offer$products(
                    e,
                    (i) => i,
                  ))).toList());

  TRes children(
          Iterable<Query$Conversations$conversations$offer$children> Function(
                  Iterable<
                      CopyWith$Query$Conversations$conversations$offer$children<
                          Query$Conversations$conversations$offer$children>>)
              _fn) =>
      call(
          children: _fn(_instance.children.map(
              (e) => CopyWith$Query$Conversations$conversations$offer$children(
                    e,
                    (i) => i,
                  ))).toList());

  CopyWith$Query$Conversations$conversations$offer$buyer<TRes> get buyer {
    final local$buyer = _instance.buyer;
    return local$buyer == null
        ? CopyWith$Query$Conversations$conversations$offer$buyer.stub(
            _then(_instance))
        : CopyWith$Query$Conversations$conversations$offer$buyer(
            local$buyer, (e) => call(buyer: e));
  }
}

class _CopyWithStubImpl$Query$Conversations$conversations$offer<TRes>
    implements CopyWith$Query$Conversations$conversations$offer<TRes> {
  _CopyWithStubImpl$Query$Conversations$conversations$offer(this._res);

  TRes _res;

  call({
    List<Query$Conversations$conversations$offer$products>? products,
    String? status,
    String? updatedBy,
    DateTime? updatedAt,
    String? id,
    DateTime? expiresAt,
    String? createdBy,
    DateTime? createdAt,
    String? offerPrice,
    String? message,
    List<Query$Conversations$conversations$offer$children>? children,
    Query$Conversations$conversations$offer$buyer? buyer,
    String? $__typename,
  }) =>
      _res;

  products(_fn) => _res;

  children(_fn) => _res;

  CopyWith$Query$Conversations$conversations$offer$buyer<TRes> get buyer =>
      CopyWith$Query$Conversations$conversations$offer$buyer.stub(_res);
}

class Query$Conversations$conversations$offer$products {
  Query$Conversations$conversations$offer$products({
    this.brand,
    this.category,
    required this.id,
    required this.imagesUrl,
    required this.name,
    this.price,
    this.size,
    required this.updatedAt,
    required this.status,
    this.seller,
    this.$__typename = 'ProductType',
  });

  factory Query$Conversations$conversations$offer$products.fromJson(
      Map<String, dynamic> json) {
    final l$brand = json['brand'];
    final l$category = json['category'];
    final l$id = json['id'];
    final l$imagesUrl = json['imagesUrl'];
    final l$name = json['name'];
    final l$price = json['price'];
    final l$size = json['size'];
    final l$updatedAt = json['updatedAt'];
    final l$status = json['status'];
    final l$seller = json['seller'];
    final l$$__typename = json['__typename'];
    return Query$Conversations$conversations$offer$products(
      brand: l$brand == null
          ? null
          : Query$Conversations$conversations$offer$products$brand.fromJson(
              (l$brand as Map<String, dynamic>)),
      category: l$category == null
          ? null
          : Query$Conversations$conversations$offer$products$category.fromJson(
              (l$category as Map<String, dynamic>)),
      id: (l$id as String),
      imagesUrl:
          (l$imagesUrl as List<dynamic>).map((e) => (e as String)).toList(),
      name: (l$name as String),
      price: (l$price as num?)?.toDouble(),
      size: l$size == null
          ? null
          : Query$Conversations$conversations$offer$products$size.fromJson(
              (l$size as Map<String, dynamic>)),
      updatedAt: DateTime.parse((l$updatedAt as String)),
      status: fromJson$Enum$ProductsProductStatusChoices((l$status as String)),
      seller: l$seller == null
          ? null
          : Query$Conversations$conversations$offer$products$seller.fromJson(
              (l$seller as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final Query$Conversations$conversations$offer$products$brand? brand;

  final Query$Conversations$conversations$offer$products$category? category;

  final String id;

  final List<String> imagesUrl;

  final String name;

  final double? price;

  final Query$Conversations$conversations$offer$products$size? size;

  final DateTime updatedAt;

  final Enum$ProductsProductStatusChoices status;

  final Query$Conversations$conversations$offer$products$seller? seller;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$brand = brand;
    _resultData['brand'] = l$brand?.toJson();
    final l$category = category;
    _resultData['category'] = l$category?.toJson();
    final l$id = id;
    _resultData['id'] = l$id;
    final l$imagesUrl = imagesUrl;
    _resultData['imagesUrl'] = l$imagesUrl.map((e) => e).toList();
    final l$name = name;
    _resultData['name'] = l$name;
    final l$price = price;
    _resultData['price'] = l$price;
    final l$size = size;
    _resultData['size'] = l$size?.toJson();
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt.toIso8601String();
    final l$status = status;
    _resultData['status'] = toJson$Enum$ProductsProductStatusChoices(l$status);
    final l$seller = seller;
    _resultData['seller'] = l$seller?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$brand = brand;
    final l$category = category;
    final l$id = id;
    final l$imagesUrl = imagesUrl;
    final l$name = name;
    final l$price = price;
    final l$size = size;
    final l$updatedAt = updatedAt;
    final l$status = status;
    final l$seller = seller;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$brand,
      l$category,
      l$id,
      Object.hashAll(l$imagesUrl.map((v) => v)),
      l$name,
      l$price,
      l$size,
      l$updatedAt,
      l$status,
      l$seller,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversations$conversations$offer$products ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$brand = brand;
    final lOther$brand = other.brand;
    if (l$brand != lOther$brand) {
      return false;
    }
    final l$category = category;
    final lOther$category = other.category;
    if (l$category != lOther$category) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$imagesUrl = imagesUrl;
    final lOther$imagesUrl = other.imagesUrl;
    if (l$imagesUrl.length != lOther$imagesUrl.length) {
      return false;
    }
    for (int i = 0; i < l$imagesUrl.length; i++) {
      final l$imagesUrl$entry = l$imagesUrl[i];
      final lOther$imagesUrl$entry = lOther$imagesUrl[i];
      if (l$imagesUrl$entry != lOther$imagesUrl$entry) {
        return false;
      }
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$price = price;
    final lOther$price = other.price;
    if (l$price != lOther$price) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (l$size != lOther$size) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$status = status;
    final lOther$status = other.status;
    if (l$status != lOther$status) {
      return false;
    }
    final l$seller = seller;
    final lOther$seller = other.seller;
    if (l$seller != lOther$seller) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversations$conversations$offer$products
    on Query$Conversations$conversations$offer$products {
  CopyWith$Query$Conversations$conversations$offer$products<
          Query$Conversations$conversations$offer$products>
      get copyWith => CopyWith$Query$Conversations$conversations$offer$products(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversations$conversations$offer$products<TRes> {
  factory CopyWith$Query$Conversations$conversations$offer$products(
    Query$Conversations$conversations$offer$products instance,
    TRes Function(Query$Conversations$conversations$offer$products) then,
  ) = _CopyWithImpl$Query$Conversations$conversations$offer$products;

  factory CopyWith$Query$Conversations$conversations$offer$products.stub(
          TRes res) =
      _CopyWithStubImpl$Query$Conversations$conversations$offer$products;

  TRes call({
    Query$Conversations$conversations$offer$products$brand? brand,
    Query$Conversations$conversations$offer$products$category? category,
    String? id,
    List<String>? imagesUrl,
    String? name,
    double? price,
    Query$Conversations$conversations$offer$products$size? size,
    DateTime? updatedAt,
    Enum$ProductsProductStatusChoices? status,
    Query$Conversations$conversations$offer$products$seller? seller,
    String? $__typename,
  });
  CopyWith$Query$Conversations$conversations$offer$products$brand<TRes>
      get brand;
  CopyWith$Query$Conversations$conversations$offer$products$category<TRes>
      get category;
  CopyWith$Query$Conversations$conversations$offer$products$size<TRes> get size;
  CopyWith$Query$Conversations$conversations$offer$products$seller<TRes>
      get seller;
}

class _CopyWithImpl$Query$Conversations$conversations$offer$products<TRes>
    implements CopyWith$Query$Conversations$conversations$offer$products<TRes> {
  _CopyWithImpl$Query$Conversations$conversations$offer$products(
    this._instance,
    this._then,
  );

  final Query$Conversations$conversations$offer$products _instance;

  final TRes Function(Query$Conversations$conversations$offer$products) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? brand = _undefined,
    Object? category = _undefined,
    Object? id = _undefined,
    Object? imagesUrl = _undefined,
    Object? name = _undefined,
    Object? price = _undefined,
    Object? size = _undefined,
    Object? updatedAt = _undefined,
    Object? status = _undefined,
    Object? seller = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversations$conversations$offer$products(
        brand: brand == _undefined
            ? _instance.brand
            : (brand
                as Query$Conversations$conversations$offer$products$brand?),
        category: category == _undefined
            ? _instance.category
            : (category
                as Query$Conversations$conversations$offer$products$category?),
        id: id == _undefined || id == null ? _instance.id : (id as String),
        imagesUrl: imagesUrl == _undefined || imagesUrl == null
            ? _instance.imagesUrl
            : (imagesUrl as List<String>),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        price: price == _undefined ? _instance.price : (price as double?),
        size: size == _undefined
            ? _instance.size
            : (size as Query$Conversations$conversations$offer$products$size?),
        updatedAt: updatedAt == _undefined || updatedAt == null
            ? _instance.updatedAt
            : (updatedAt as DateTime),
        status: status == _undefined || status == null
            ? _instance.status
            : (status as Enum$ProductsProductStatusChoices),
        seller: seller == _undefined
            ? _instance.seller
            : (seller
                as Query$Conversations$conversations$offer$products$seller?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$Conversations$conversations$offer$products$brand<TRes>
      get brand {
    final local$brand = _instance.brand;
    return local$brand == null
        ? CopyWith$Query$Conversations$conversations$offer$products$brand.stub(
            _then(_instance))
        : CopyWith$Query$Conversations$conversations$offer$products$brand(
            local$brand, (e) => call(brand: e));
  }

  CopyWith$Query$Conversations$conversations$offer$products$category<TRes>
      get category {
    final local$category = _instance.category;
    return local$category == null
        ? CopyWith$Query$Conversations$conversations$offer$products$category
            .stub(_then(_instance))
        : CopyWith$Query$Conversations$conversations$offer$products$category(
            local$category, (e) => call(category: e));
  }

  CopyWith$Query$Conversations$conversations$offer$products$size<TRes>
      get size {
    final local$size = _instance.size;
    return local$size == null
        ? CopyWith$Query$Conversations$conversations$offer$products$size.stub(
            _then(_instance))
        : CopyWith$Query$Conversations$conversations$offer$products$size(
            local$size, (e) => call(size: e));
  }

  CopyWith$Query$Conversations$conversations$offer$products$seller<TRes>
      get seller {
    final local$seller = _instance.seller;
    return local$seller == null
        ? CopyWith$Query$Conversations$conversations$offer$products$seller.stub(
            _then(_instance))
        : CopyWith$Query$Conversations$conversations$offer$products$seller(
            local$seller, (e) => call(seller: e));
  }
}

class _CopyWithStubImpl$Query$Conversations$conversations$offer$products<TRes>
    implements CopyWith$Query$Conversations$conversations$offer$products<TRes> {
  _CopyWithStubImpl$Query$Conversations$conversations$offer$products(this._res);

  TRes _res;

  call({
    Query$Conversations$conversations$offer$products$brand? brand,
    Query$Conversations$conversations$offer$products$category? category,
    String? id,
    List<String>? imagesUrl,
    String? name,
    double? price,
    Query$Conversations$conversations$offer$products$size? size,
    DateTime? updatedAt,
    Enum$ProductsProductStatusChoices? status,
    Query$Conversations$conversations$offer$products$seller? seller,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$Conversations$conversations$offer$products$brand<TRes>
      get brand =>
          CopyWith$Query$Conversations$conversations$offer$products$brand.stub(
              _res);

  CopyWith$Query$Conversations$conversations$offer$products$category<TRes>
      get category =>
          CopyWith$Query$Conversations$conversations$offer$products$category
              .stub(_res);

  CopyWith$Query$Conversations$conversations$offer$products$size<TRes>
      get size =>
          CopyWith$Query$Conversations$conversations$offer$products$size.stub(
              _res);

  CopyWith$Query$Conversations$conversations$offer$products$seller<TRes>
      get seller =>
          CopyWith$Query$Conversations$conversations$offer$products$seller.stub(
              _res);
}

class Query$Conversations$conversations$offer$products$brand {
  Query$Conversations$conversations$offer$products$brand({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$Conversations$conversations$offer$products$brand.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$Conversations$conversations$offer$products$brand(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversations$conversations$offer$products$brand ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversations$conversations$offer$products$brand
    on Query$Conversations$conversations$offer$products$brand {
  CopyWith$Query$Conversations$conversations$offer$products$brand<
          Query$Conversations$conversations$offer$products$brand>
      get copyWith =>
          CopyWith$Query$Conversations$conversations$offer$products$brand(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversations$conversations$offer$products$brand<
    TRes> {
  factory CopyWith$Query$Conversations$conversations$offer$products$brand(
    Query$Conversations$conversations$offer$products$brand instance,
    TRes Function(Query$Conversations$conversations$offer$products$brand) then,
  ) = _CopyWithImpl$Query$Conversations$conversations$offer$products$brand;

  factory CopyWith$Query$Conversations$conversations$offer$products$brand.stub(
          TRes res) =
      _CopyWithStubImpl$Query$Conversations$conversations$offer$products$brand;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Conversations$conversations$offer$products$brand<TRes>
    implements
        CopyWith$Query$Conversations$conversations$offer$products$brand<TRes> {
  _CopyWithImpl$Query$Conversations$conversations$offer$products$brand(
    this._instance,
    this._then,
  );

  final Query$Conversations$conversations$offer$products$brand _instance;

  final TRes Function(Query$Conversations$conversations$offer$products$brand)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversations$conversations$offer$products$brand(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Conversations$conversations$offer$products$brand<
        TRes>
    implements
        CopyWith$Query$Conversations$conversations$offer$products$brand<TRes> {
  _CopyWithStubImpl$Query$Conversations$conversations$offer$products$brand(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$Conversations$conversations$offer$products$category {
  Query$Conversations$conversations$offer$products$category({
    this.id,
    this.name,
    this.$__typename = 'CategoryType',
  });

  factory Query$Conversations$conversations$offer$products$category.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$Conversations$conversations$offer$products$category(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversations$conversations$offer$products$category ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversations$conversations$offer$products$category
    on Query$Conversations$conversations$offer$products$category {
  CopyWith$Query$Conversations$conversations$offer$products$category<
          Query$Conversations$conversations$offer$products$category>
      get copyWith =>
          CopyWith$Query$Conversations$conversations$offer$products$category(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversations$conversations$offer$products$category<
    TRes> {
  factory CopyWith$Query$Conversations$conversations$offer$products$category(
    Query$Conversations$conversations$offer$products$category instance,
    TRes Function(Query$Conversations$conversations$offer$products$category)
        then,
  ) = _CopyWithImpl$Query$Conversations$conversations$offer$products$category;

  factory CopyWith$Query$Conversations$conversations$offer$products$category.stub(
          TRes res) =
      _CopyWithStubImpl$Query$Conversations$conversations$offer$products$category;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Conversations$conversations$offer$products$category<
        TRes>
    implements
        CopyWith$Query$Conversations$conversations$offer$products$category<
            TRes> {
  _CopyWithImpl$Query$Conversations$conversations$offer$products$category(
    this._instance,
    this._then,
  );

  final Query$Conversations$conversations$offer$products$category _instance;

  final TRes Function(Query$Conversations$conversations$offer$products$category)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversations$conversations$offer$products$category(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Conversations$conversations$offer$products$category<
        TRes>
    implements
        CopyWith$Query$Conversations$conversations$offer$products$category<
            TRes> {
  _CopyWithStubImpl$Query$Conversations$conversations$offer$products$category(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$Conversations$conversations$offer$products$size {
  Query$Conversations$conversations$offer$products$size({
    this.id,
    this.name,
    this.$__typename = 'SizeType',
  });

  factory Query$Conversations$conversations$offer$products$size.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$Conversations$conversations$offer$products$size(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversations$conversations$offer$products$size ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversations$conversations$offer$products$size
    on Query$Conversations$conversations$offer$products$size {
  CopyWith$Query$Conversations$conversations$offer$products$size<
          Query$Conversations$conversations$offer$products$size>
      get copyWith =>
          CopyWith$Query$Conversations$conversations$offer$products$size(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversations$conversations$offer$products$size<
    TRes> {
  factory CopyWith$Query$Conversations$conversations$offer$products$size(
    Query$Conversations$conversations$offer$products$size instance,
    TRes Function(Query$Conversations$conversations$offer$products$size) then,
  ) = _CopyWithImpl$Query$Conversations$conversations$offer$products$size;

  factory CopyWith$Query$Conversations$conversations$offer$products$size.stub(
          TRes res) =
      _CopyWithStubImpl$Query$Conversations$conversations$offer$products$size;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Conversations$conversations$offer$products$size<TRes>
    implements
        CopyWith$Query$Conversations$conversations$offer$products$size<TRes> {
  _CopyWithImpl$Query$Conversations$conversations$offer$products$size(
    this._instance,
    this._then,
  );

  final Query$Conversations$conversations$offer$products$size _instance;

  final TRes Function(Query$Conversations$conversations$offer$products$size)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversations$conversations$offer$products$size(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Conversations$conversations$offer$products$size<
        TRes>
    implements
        CopyWith$Query$Conversations$conversations$offer$products$size<TRes> {
  _CopyWithStubImpl$Query$Conversations$conversations$offer$products$size(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$Conversations$conversations$offer$products$seller {
  Query$Conversations$conversations$offer$products$seller({
    this.email,
    this.fullName,
    this.username,
    this.thumbnailUrl,
    this.profilePictureUrl,
    this.$__typename = 'UserType',
  });

  factory Query$Conversations$conversations$offer$products$seller.fromJson(
      Map<String, dynamic> json) {
    final l$email = json['email'];
    final l$fullName = json['fullName'];
    final l$username = json['username'];
    final l$thumbnailUrl = json['thumbnailUrl'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$$__typename = json['__typename'];
    return Query$Conversations$conversations$offer$products$seller(
      email: (l$email as String?),
      fullName: (l$fullName as String?),
      username: (l$username as String?),
      thumbnailUrl: (l$thumbnailUrl as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? email;

  final String? fullName;

  final String? username;

  final String? thumbnailUrl;

  final String? profilePictureUrl;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$email = email;
    _resultData['email'] = l$email;
    final l$fullName = fullName;
    _resultData['fullName'] = l$fullName;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$thumbnailUrl = thumbnailUrl;
    _resultData['thumbnailUrl'] = l$thumbnailUrl;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$email = email;
    final l$fullName = fullName;
    final l$username = username;
    final l$thumbnailUrl = thumbnailUrl;
    final l$profilePictureUrl = profilePictureUrl;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$email,
      l$fullName,
      l$username,
      l$thumbnailUrl,
      l$profilePictureUrl,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversations$conversations$offer$products$seller ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (l$email != lOther$email) {
      return false;
    }
    final l$fullName = fullName;
    final lOther$fullName = other.fullName;
    if (l$fullName != lOther$fullName) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$thumbnailUrl = thumbnailUrl;
    final lOther$thumbnailUrl = other.thumbnailUrl;
    if (l$thumbnailUrl != lOther$thumbnailUrl) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversations$conversations$offer$products$seller
    on Query$Conversations$conversations$offer$products$seller {
  CopyWith$Query$Conversations$conversations$offer$products$seller<
          Query$Conversations$conversations$offer$products$seller>
      get copyWith =>
          CopyWith$Query$Conversations$conversations$offer$products$seller(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversations$conversations$offer$products$seller<
    TRes> {
  factory CopyWith$Query$Conversations$conversations$offer$products$seller(
    Query$Conversations$conversations$offer$products$seller instance,
    TRes Function(Query$Conversations$conversations$offer$products$seller) then,
  ) = _CopyWithImpl$Query$Conversations$conversations$offer$products$seller;

  factory CopyWith$Query$Conversations$conversations$offer$products$seller.stub(
          TRes res) =
      _CopyWithStubImpl$Query$Conversations$conversations$offer$products$seller;

  TRes call({
    String? email,
    String? fullName,
    String? username,
    String? thumbnailUrl,
    String? profilePictureUrl,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Conversations$conversations$offer$products$seller<
        TRes>
    implements
        CopyWith$Query$Conversations$conversations$offer$products$seller<TRes> {
  _CopyWithImpl$Query$Conversations$conversations$offer$products$seller(
    this._instance,
    this._then,
  );

  final Query$Conversations$conversations$offer$products$seller _instance;

  final TRes Function(Query$Conversations$conversations$offer$products$seller)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? email = _undefined,
    Object? fullName = _undefined,
    Object? username = _undefined,
    Object? thumbnailUrl = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversations$conversations$offer$products$seller(
        email: email == _undefined ? _instance.email : (email as String?),
        fullName:
            fullName == _undefined ? _instance.fullName : (fullName as String?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        thumbnailUrl: thumbnailUrl == _undefined
            ? _instance.thumbnailUrl
            : (thumbnailUrl as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Conversations$conversations$offer$products$seller<
        TRes>
    implements
        CopyWith$Query$Conversations$conversations$offer$products$seller<TRes> {
  _CopyWithStubImpl$Query$Conversations$conversations$offer$products$seller(
      this._res);

  TRes _res;

  call({
    String? email,
    String? fullName,
    String? username,
    String? thumbnailUrl,
    String? profilePictureUrl,
    String? $__typename,
  }) =>
      _res;
}

class Query$Conversations$conversations$offer$children {
  Query$Conversations$conversations$offer$children({
    this.buyer,
    required this.createdAt,
    this.createdBy,
    required this.id,
    this.status,
    required this.updatedAt,
    this.updatedBy,
    required this.offerPrice,
    this.message,
    this.$__typename = 'OfferType',
  });

  factory Query$Conversations$conversations$offer$children.fromJson(
      Map<String, dynamic> json) {
    final l$buyer = json['buyer'];
    final l$createdAt = json['createdAt'];
    final l$createdBy = json['createdBy'];
    final l$id = json['id'];
    final l$status = json['status'];
    final l$updatedAt = json['updatedAt'];
    final l$updatedBy = json['updatedBy'];
    final l$offerPrice = json['offerPrice'];
    final l$message = json['message'];
    final l$$__typename = json['__typename'];
    return Query$Conversations$conversations$offer$children(
      buyer: l$buyer == null
          ? null
          : Query$Conversations$conversations$offer$children$buyer.fromJson(
              (l$buyer as Map<String, dynamic>)),
      createdAt: DateTime.parse((l$createdAt as String)),
      createdBy: (l$createdBy as String?),
      id: (l$id as String),
      status: (l$status as String?),
      updatedAt: DateTime.parse((l$updatedAt as String)),
      updatedBy: (l$updatedBy as String?),
      offerPrice: (l$offerPrice as String),
      message: (l$message as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final Query$Conversations$conversations$offer$children$buyer? buyer;

  final DateTime createdAt;

  final String? createdBy;

  final String id;

  final String? status;

  final DateTime updatedAt;

  final String? updatedBy;

  final String offerPrice;

  final String? message;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$buyer = buyer;
    _resultData['buyer'] = l$buyer?.toJson();
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$createdBy = createdBy;
    _resultData['createdBy'] = l$createdBy;
    final l$id = id;
    _resultData['id'] = l$id;
    final l$status = status;
    _resultData['status'] = l$status;
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt.toIso8601String();
    final l$updatedBy = updatedBy;
    _resultData['updatedBy'] = l$updatedBy;
    final l$offerPrice = offerPrice;
    _resultData['offerPrice'] = l$offerPrice;
    final l$message = message;
    _resultData['message'] = l$message;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$buyer = buyer;
    final l$createdAt = createdAt;
    final l$createdBy = createdBy;
    final l$id = id;
    final l$status = status;
    final l$updatedAt = updatedAt;
    final l$updatedBy = updatedBy;
    final l$offerPrice = offerPrice;
    final l$message = message;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$buyer,
      l$createdAt,
      l$createdBy,
      l$id,
      l$status,
      l$updatedAt,
      l$updatedBy,
      l$offerPrice,
      l$message,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversations$conversations$offer$children ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$buyer = buyer;
    final lOther$buyer = other.buyer;
    if (l$buyer != lOther$buyer) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$createdBy = createdBy;
    final lOther$createdBy = other.createdBy;
    if (l$createdBy != lOther$createdBy) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$status = status;
    final lOther$status = other.status;
    if (l$status != lOther$status) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$updatedBy = updatedBy;
    final lOther$updatedBy = other.updatedBy;
    if (l$updatedBy != lOther$updatedBy) {
      return false;
    }
    final l$offerPrice = offerPrice;
    final lOther$offerPrice = other.offerPrice;
    if (l$offerPrice != lOther$offerPrice) {
      return false;
    }
    final l$message = message;
    final lOther$message = other.message;
    if (l$message != lOther$message) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversations$conversations$offer$children
    on Query$Conversations$conversations$offer$children {
  CopyWith$Query$Conversations$conversations$offer$children<
          Query$Conversations$conversations$offer$children>
      get copyWith => CopyWith$Query$Conversations$conversations$offer$children(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversations$conversations$offer$children<TRes> {
  factory CopyWith$Query$Conversations$conversations$offer$children(
    Query$Conversations$conversations$offer$children instance,
    TRes Function(Query$Conversations$conversations$offer$children) then,
  ) = _CopyWithImpl$Query$Conversations$conversations$offer$children;

  factory CopyWith$Query$Conversations$conversations$offer$children.stub(
          TRes res) =
      _CopyWithStubImpl$Query$Conversations$conversations$offer$children;

  TRes call({
    Query$Conversations$conversations$offer$children$buyer? buyer,
    DateTime? createdAt,
    String? createdBy,
    String? id,
    String? status,
    DateTime? updatedAt,
    String? updatedBy,
    String? offerPrice,
    String? message,
    String? $__typename,
  });
  CopyWith$Query$Conversations$conversations$offer$children$buyer<TRes>
      get buyer;
}

class _CopyWithImpl$Query$Conversations$conversations$offer$children<TRes>
    implements CopyWith$Query$Conversations$conversations$offer$children<TRes> {
  _CopyWithImpl$Query$Conversations$conversations$offer$children(
    this._instance,
    this._then,
  );

  final Query$Conversations$conversations$offer$children _instance;

  final TRes Function(Query$Conversations$conversations$offer$children) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? buyer = _undefined,
    Object? createdAt = _undefined,
    Object? createdBy = _undefined,
    Object? id = _undefined,
    Object? status = _undefined,
    Object? updatedAt = _undefined,
    Object? updatedBy = _undefined,
    Object? offerPrice = _undefined,
    Object? message = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversations$conversations$offer$children(
        buyer: buyer == _undefined
            ? _instance.buyer
            : (buyer
                as Query$Conversations$conversations$offer$children$buyer?),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        createdBy: createdBy == _undefined
            ? _instance.createdBy
            : (createdBy as String?),
        id: id == _undefined || id == null ? _instance.id : (id as String),
        status: status == _undefined ? _instance.status : (status as String?),
        updatedAt: updatedAt == _undefined || updatedAt == null
            ? _instance.updatedAt
            : (updatedAt as DateTime),
        updatedBy: updatedBy == _undefined
            ? _instance.updatedBy
            : (updatedBy as String?),
        offerPrice: offerPrice == _undefined || offerPrice == null
            ? _instance.offerPrice
            : (offerPrice as String),
        message:
            message == _undefined ? _instance.message : (message as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$Conversations$conversations$offer$children$buyer<TRes>
      get buyer {
    final local$buyer = _instance.buyer;
    return local$buyer == null
        ? CopyWith$Query$Conversations$conversations$offer$children$buyer.stub(
            _then(_instance))
        : CopyWith$Query$Conversations$conversations$offer$children$buyer(
            local$buyer, (e) => call(buyer: e));
  }
}

class _CopyWithStubImpl$Query$Conversations$conversations$offer$children<TRes>
    implements CopyWith$Query$Conversations$conversations$offer$children<TRes> {
  _CopyWithStubImpl$Query$Conversations$conversations$offer$children(this._res);

  TRes _res;

  call({
    Query$Conversations$conversations$offer$children$buyer? buyer,
    DateTime? createdAt,
    String? createdBy,
    String? id,
    String? status,
    DateTime? updatedAt,
    String? updatedBy,
    String? offerPrice,
    String? message,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$Conversations$conversations$offer$children$buyer<TRes>
      get buyer =>
          CopyWith$Query$Conversations$conversations$offer$children$buyer.stub(
              _res);
}

class Query$Conversations$conversations$offer$children$buyer {
  Query$Conversations$conversations$offer$children$buyer({
    this.username,
    this.thumbnailUrl,
    this.profilePictureUrl,
    this.fullName,
    this.$__typename = 'UserType',
  });

  factory Query$Conversations$conversations$offer$children$buyer.fromJson(
      Map<String, dynamic> json) {
    final l$username = json['username'];
    final l$thumbnailUrl = json['thumbnailUrl'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$fullName = json['fullName'];
    final l$$__typename = json['__typename'];
    return Query$Conversations$conversations$offer$children$buyer(
      username: (l$username as String?),
      thumbnailUrl: (l$thumbnailUrl as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      fullName: (l$fullName as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? username;

  final String? thumbnailUrl;

  final String? profilePictureUrl;

  final String? fullName;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$username = username;
    _resultData['username'] = l$username;
    final l$thumbnailUrl = thumbnailUrl;
    _resultData['thumbnailUrl'] = l$thumbnailUrl;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$fullName = fullName;
    _resultData['fullName'] = l$fullName;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$username = username;
    final l$thumbnailUrl = thumbnailUrl;
    final l$profilePictureUrl = profilePictureUrl;
    final l$fullName = fullName;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$username,
      l$thumbnailUrl,
      l$profilePictureUrl,
      l$fullName,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversations$conversations$offer$children$buyer ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$thumbnailUrl = thumbnailUrl;
    final lOther$thumbnailUrl = other.thumbnailUrl;
    if (l$thumbnailUrl != lOther$thumbnailUrl) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$fullName = fullName;
    final lOther$fullName = other.fullName;
    if (l$fullName != lOther$fullName) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversations$conversations$offer$children$buyer
    on Query$Conversations$conversations$offer$children$buyer {
  CopyWith$Query$Conversations$conversations$offer$children$buyer<
          Query$Conversations$conversations$offer$children$buyer>
      get copyWith =>
          CopyWith$Query$Conversations$conversations$offer$children$buyer(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversations$conversations$offer$children$buyer<
    TRes> {
  factory CopyWith$Query$Conversations$conversations$offer$children$buyer(
    Query$Conversations$conversations$offer$children$buyer instance,
    TRes Function(Query$Conversations$conversations$offer$children$buyer) then,
  ) = _CopyWithImpl$Query$Conversations$conversations$offer$children$buyer;

  factory CopyWith$Query$Conversations$conversations$offer$children$buyer.stub(
          TRes res) =
      _CopyWithStubImpl$Query$Conversations$conversations$offer$children$buyer;

  TRes call({
    String? username,
    String? thumbnailUrl,
    String? profilePictureUrl,
    String? fullName,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Conversations$conversations$offer$children$buyer<TRes>
    implements
        CopyWith$Query$Conversations$conversations$offer$children$buyer<TRes> {
  _CopyWithImpl$Query$Conversations$conversations$offer$children$buyer(
    this._instance,
    this._then,
  );

  final Query$Conversations$conversations$offer$children$buyer _instance;

  final TRes Function(Query$Conversations$conversations$offer$children$buyer)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? username = _undefined,
    Object? thumbnailUrl = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? fullName = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversations$conversations$offer$children$buyer(
        username:
            username == _undefined ? _instance.username : (username as String?),
        thumbnailUrl: thumbnailUrl == _undefined
            ? _instance.thumbnailUrl
            : (thumbnailUrl as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        fullName:
            fullName == _undefined ? _instance.fullName : (fullName as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Conversations$conversations$offer$children$buyer<
        TRes>
    implements
        CopyWith$Query$Conversations$conversations$offer$children$buyer<TRes> {
  _CopyWithStubImpl$Query$Conversations$conversations$offer$children$buyer(
      this._res);

  TRes _res;

  call({
    String? username,
    String? thumbnailUrl,
    String? profilePictureUrl,
    String? fullName,
    String? $__typename,
  }) =>
      _res;
}

class Query$Conversations$conversations$offer$buyer {
  Query$Conversations$conversations$offer$buyer({
    this.username,
    this.thumbnailUrl,
    this.displayName,
    this.fullName,
    this.$__typename = 'UserType',
  });

  factory Query$Conversations$conversations$offer$buyer.fromJson(
      Map<String, dynamic> json) {
    final l$username = json['username'];
    final l$thumbnailUrl = json['thumbnailUrl'];
    final l$displayName = json['displayName'];
    final l$fullName = json['fullName'];
    final l$$__typename = json['__typename'];
    return Query$Conversations$conversations$offer$buyer(
      username: (l$username as String?),
      thumbnailUrl: (l$thumbnailUrl as String?),
      displayName: (l$displayName as String?),
      fullName: (l$fullName as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? username;

  final String? thumbnailUrl;

  final String? displayName;

  final String? fullName;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$username = username;
    _resultData['username'] = l$username;
    final l$thumbnailUrl = thumbnailUrl;
    _resultData['thumbnailUrl'] = l$thumbnailUrl;
    final l$displayName = displayName;
    _resultData['displayName'] = l$displayName;
    final l$fullName = fullName;
    _resultData['fullName'] = l$fullName;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$username = username;
    final l$thumbnailUrl = thumbnailUrl;
    final l$displayName = displayName;
    final l$fullName = fullName;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$username,
      l$thumbnailUrl,
      l$displayName,
      l$fullName,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversations$conversations$offer$buyer ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$thumbnailUrl = thumbnailUrl;
    final lOther$thumbnailUrl = other.thumbnailUrl;
    if (l$thumbnailUrl != lOther$thumbnailUrl) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$fullName = fullName;
    final lOther$fullName = other.fullName;
    if (l$fullName != lOther$fullName) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversations$conversations$offer$buyer
    on Query$Conversations$conversations$offer$buyer {
  CopyWith$Query$Conversations$conversations$offer$buyer<
          Query$Conversations$conversations$offer$buyer>
      get copyWith => CopyWith$Query$Conversations$conversations$offer$buyer(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversations$conversations$offer$buyer<TRes> {
  factory CopyWith$Query$Conversations$conversations$offer$buyer(
    Query$Conversations$conversations$offer$buyer instance,
    TRes Function(Query$Conversations$conversations$offer$buyer) then,
  ) = _CopyWithImpl$Query$Conversations$conversations$offer$buyer;

  factory CopyWith$Query$Conversations$conversations$offer$buyer.stub(
          TRes res) =
      _CopyWithStubImpl$Query$Conversations$conversations$offer$buyer;

  TRes call({
    String? username,
    String? thumbnailUrl,
    String? displayName,
    String? fullName,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Conversations$conversations$offer$buyer<TRes>
    implements CopyWith$Query$Conversations$conversations$offer$buyer<TRes> {
  _CopyWithImpl$Query$Conversations$conversations$offer$buyer(
    this._instance,
    this._then,
  );

  final Query$Conversations$conversations$offer$buyer _instance;

  final TRes Function(Query$Conversations$conversations$offer$buyer) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? username = _undefined,
    Object? thumbnailUrl = _undefined,
    Object? displayName = _undefined,
    Object? fullName = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversations$conversations$offer$buyer(
        username:
            username == _undefined ? _instance.username : (username as String?),
        thumbnailUrl: thumbnailUrl == _undefined
            ? _instance.thumbnailUrl
            : (thumbnailUrl as String?),
        displayName: displayName == _undefined
            ? _instance.displayName
            : (displayName as String?),
        fullName:
            fullName == _undefined ? _instance.fullName : (fullName as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Conversations$conversations$offer$buyer<TRes>
    implements CopyWith$Query$Conversations$conversations$offer$buyer<TRes> {
  _CopyWithStubImpl$Query$Conversations$conversations$offer$buyer(this._res);

  TRes _res;

  call({
    String? username,
    String? thumbnailUrl,
    String? displayName,
    String? fullName,
    String? $__typename,
  }) =>
      _res;
}

class Query$Conversations$conversations$lastMessage {
  Query$Conversations$conversations$lastMessage({
    required this.id,
    required this.text,
    this.attachment,
    this.attachmentType,
    required this.read,
    required this.imageUrls,
    required this.isItem,
    this.sender,
    this.$__typename = 'MessageType',
  });

  factory Query$Conversations$conversations$lastMessage.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$text = json['text'];
    final l$attachment = json['attachment'];
    final l$attachmentType = json['attachmentType'];
    final l$read = json['read'];
    final l$imageUrls = json['imageUrls'];
    final l$isItem = json['isItem'];
    final l$sender = json['sender'];
    final l$$__typename = json['__typename'];
    return Query$Conversations$conversations$lastMessage(
      id: (l$id as String),
      text: (l$text as String),
      attachment: (l$attachment as String?),
      attachmentType: l$attachmentType == null
          ? null
          : fromJson$Enum$ChatsMessageAttachmentTypeChoices(
              (l$attachmentType as String)),
      read: (l$read as bool),
      imageUrls:
          (l$imageUrls as List<dynamic>).map((e) => (e as String)).toList(),
      isItem: (l$isItem as bool),
      sender: l$sender == null
          ? null
          : Query$Conversations$conversations$lastMessage$sender.fromJson(
              (l$sender as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String text;

  final String? attachment;

  final Enum$ChatsMessageAttachmentTypeChoices? attachmentType;

  final bool read;

  final List<String> imageUrls;

  final bool isItem;

  final Query$Conversations$conversations$lastMessage$sender? sender;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$text = text;
    _resultData['text'] = l$text;
    final l$attachment = attachment;
    _resultData['attachment'] = l$attachment;
    final l$attachmentType = attachmentType;
    _resultData['attachmentType'] = l$attachmentType == null
        ? null
        : toJson$Enum$ChatsMessageAttachmentTypeChoices(l$attachmentType);
    final l$read = read;
    _resultData['read'] = l$read;
    final l$imageUrls = imageUrls;
    _resultData['imageUrls'] = l$imageUrls.map((e) => e).toList();
    final l$isItem = isItem;
    _resultData['isItem'] = l$isItem;
    final l$sender = sender;
    _resultData['sender'] = l$sender?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$text = text;
    final l$attachment = attachment;
    final l$attachmentType = attachmentType;
    final l$read = read;
    final l$imageUrls = imageUrls;
    final l$isItem = isItem;
    final l$sender = sender;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$text,
      l$attachment,
      l$attachmentType,
      l$read,
      Object.hashAll(l$imageUrls.map((v) => v)),
      l$isItem,
      l$sender,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversations$conversations$lastMessage ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$text = text;
    final lOther$text = other.text;
    if (l$text != lOther$text) {
      return false;
    }
    final l$attachment = attachment;
    final lOther$attachment = other.attachment;
    if (l$attachment != lOther$attachment) {
      return false;
    }
    final l$attachmentType = attachmentType;
    final lOther$attachmentType = other.attachmentType;
    if (l$attachmentType != lOther$attachmentType) {
      return false;
    }
    final l$read = read;
    final lOther$read = other.read;
    if (l$read != lOther$read) {
      return false;
    }
    final l$imageUrls = imageUrls;
    final lOther$imageUrls = other.imageUrls;
    if (l$imageUrls.length != lOther$imageUrls.length) {
      return false;
    }
    for (int i = 0; i < l$imageUrls.length; i++) {
      final l$imageUrls$entry = l$imageUrls[i];
      final lOther$imageUrls$entry = lOther$imageUrls[i];
      if (l$imageUrls$entry != lOther$imageUrls$entry) {
        return false;
      }
    }
    final l$isItem = isItem;
    final lOther$isItem = other.isItem;
    if (l$isItem != lOther$isItem) {
      return false;
    }
    final l$sender = sender;
    final lOther$sender = other.sender;
    if (l$sender != lOther$sender) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversations$conversations$lastMessage
    on Query$Conversations$conversations$lastMessage {
  CopyWith$Query$Conversations$conversations$lastMessage<
          Query$Conversations$conversations$lastMessage>
      get copyWith => CopyWith$Query$Conversations$conversations$lastMessage(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversations$conversations$lastMessage<TRes> {
  factory CopyWith$Query$Conversations$conversations$lastMessage(
    Query$Conversations$conversations$lastMessage instance,
    TRes Function(Query$Conversations$conversations$lastMessage) then,
  ) = _CopyWithImpl$Query$Conversations$conversations$lastMessage;

  factory CopyWith$Query$Conversations$conversations$lastMessage.stub(
          TRes res) =
      _CopyWithStubImpl$Query$Conversations$conversations$lastMessage;

  TRes call({
    String? id,
    String? text,
    String? attachment,
    Enum$ChatsMessageAttachmentTypeChoices? attachmentType,
    bool? read,
    List<String>? imageUrls,
    bool? isItem,
    Query$Conversations$conversations$lastMessage$sender? sender,
    String? $__typename,
  });
  CopyWith$Query$Conversations$conversations$lastMessage$sender<TRes>
      get sender;
}

class _CopyWithImpl$Query$Conversations$conversations$lastMessage<TRes>
    implements CopyWith$Query$Conversations$conversations$lastMessage<TRes> {
  _CopyWithImpl$Query$Conversations$conversations$lastMessage(
    this._instance,
    this._then,
  );

  final Query$Conversations$conversations$lastMessage _instance;

  final TRes Function(Query$Conversations$conversations$lastMessage) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? text = _undefined,
    Object? attachment = _undefined,
    Object? attachmentType = _undefined,
    Object? read = _undefined,
    Object? imageUrls = _undefined,
    Object? isItem = _undefined,
    Object? sender = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversations$conversations$lastMessage(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        text: text == _undefined || text == null
            ? _instance.text
            : (text as String),
        attachment: attachment == _undefined
            ? _instance.attachment
            : (attachment as String?),
        attachmentType: attachmentType == _undefined
            ? _instance.attachmentType
            : (attachmentType as Enum$ChatsMessageAttachmentTypeChoices?),
        read: read == _undefined || read == null
            ? _instance.read
            : (read as bool),
        imageUrls: imageUrls == _undefined || imageUrls == null
            ? _instance.imageUrls
            : (imageUrls as List<String>),
        isItem: isItem == _undefined || isItem == null
            ? _instance.isItem
            : (isItem as bool),
        sender: sender == _undefined
            ? _instance.sender
            : (sender as Query$Conversations$conversations$lastMessage$sender?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$Conversations$conversations$lastMessage$sender<TRes>
      get sender {
    final local$sender = _instance.sender;
    return local$sender == null
        ? CopyWith$Query$Conversations$conversations$lastMessage$sender.stub(
            _then(_instance))
        : CopyWith$Query$Conversations$conversations$lastMessage$sender(
            local$sender, (e) => call(sender: e));
  }
}

class _CopyWithStubImpl$Query$Conversations$conversations$lastMessage<TRes>
    implements CopyWith$Query$Conversations$conversations$lastMessage<TRes> {
  _CopyWithStubImpl$Query$Conversations$conversations$lastMessage(this._res);

  TRes _res;

  call({
    String? id,
    String? text,
    String? attachment,
    Enum$ChatsMessageAttachmentTypeChoices? attachmentType,
    bool? read,
    List<String>? imageUrls,
    bool? isItem,
    Query$Conversations$conversations$lastMessage$sender? sender,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$Conversations$conversations$lastMessage$sender<TRes>
      get sender =>
          CopyWith$Query$Conversations$conversations$lastMessage$sender.stub(
              _res);
}

class Query$Conversations$conversations$lastMessage$sender {
  Query$Conversations$conversations$lastMessage$sender({
    this.id,
    this.username,
    this.profilePictureUrl,
    this.thumbnailUrl,
    this.displayName,
    this.$__typename = 'UserType',
  });

  factory Query$Conversations$conversations$lastMessage$sender.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$thumbnailUrl = json['thumbnailUrl'];
    final l$displayName = json['displayName'];
    final l$$__typename = json['__typename'];
    return Query$Conversations$conversations$lastMessage$sender(
      id: (l$id as int?),
      username: (l$username as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      thumbnailUrl: (l$thumbnailUrl as String?),
      displayName: (l$displayName as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String? profilePictureUrl;

  final String? thumbnailUrl;

  final String? displayName;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$thumbnailUrl = thumbnailUrl;
    _resultData['thumbnailUrl'] = l$thumbnailUrl;
    final l$displayName = displayName;
    _resultData['displayName'] = l$displayName;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$profilePictureUrl = profilePictureUrl;
    final l$thumbnailUrl = thumbnailUrl;
    final l$displayName = displayName;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$profilePictureUrl,
      l$thumbnailUrl,
      l$displayName,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Conversations$conversations$lastMessage$sender ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$thumbnailUrl = thumbnailUrl;
    final lOther$thumbnailUrl = other.thumbnailUrl;
    if (l$thumbnailUrl != lOther$thumbnailUrl) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Conversations$conversations$lastMessage$sender
    on Query$Conversations$conversations$lastMessage$sender {
  CopyWith$Query$Conversations$conversations$lastMessage$sender<
          Query$Conversations$conversations$lastMessage$sender>
      get copyWith =>
          CopyWith$Query$Conversations$conversations$lastMessage$sender(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Conversations$conversations$lastMessage$sender<
    TRes> {
  factory CopyWith$Query$Conversations$conversations$lastMessage$sender(
    Query$Conversations$conversations$lastMessage$sender instance,
    TRes Function(Query$Conversations$conversations$lastMessage$sender) then,
  ) = _CopyWithImpl$Query$Conversations$conversations$lastMessage$sender;

  factory CopyWith$Query$Conversations$conversations$lastMessage$sender.stub(
          TRes res) =
      _CopyWithStubImpl$Query$Conversations$conversations$lastMessage$sender;

  TRes call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? thumbnailUrl,
    String? displayName,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Conversations$conversations$lastMessage$sender<TRes>
    implements
        CopyWith$Query$Conversations$conversations$lastMessage$sender<TRes> {
  _CopyWithImpl$Query$Conversations$conversations$lastMessage$sender(
    this._instance,
    this._then,
  );

  final Query$Conversations$conversations$lastMessage$sender _instance;

  final TRes Function(Query$Conversations$conversations$lastMessage$sender)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? thumbnailUrl = _undefined,
    Object? displayName = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Conversations$conversations$lastMessage$sender(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        thumbnailUrl: thumbnailUrl == _undefined
            ? _instance.thumbnailUrl
            : (thumbnailUrl as String?),
        displayName: displayName == _undefined
            ? _instance.displayName
            : (displayName as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Conversations$conversations$lastMessage$sender<
        TRes>
    implements
        CopyWith$Query$Conversations$conversations$lastMessage$sender<TRes> {
  _CopyWithStubImpl$Query$Conversations$conversations$lastMessage$sender(
      this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? thumbnailUrl,
    String? displayName,
    String? $__typename,
  }) =>
      _res;
}

class Query$ArchivedConversations {
  Query$ArchivedConversations({
    this.archivedConversations,
    this.$__typename = 'Query',
  });

  factory Query$ArchivedConversations.fromJson(Map<String, dynamic> json) {
    final l$archivedConversations = json['archivedConversations'];
    final l$$__typename = json['__typename'];
    return Query$ArchivedConversations(
      archivedConversations: (l$archivedConversations as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$ArchivedConversations$archivedConversations.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$ArchivedConversations$archivedConversations?>?
      archivedConversations;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$archivedConversations = archivedConversations;
    _resultData['archivedConversations'] =
        l$archivedConversations?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$archivedConversations = archivedConversations;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$archivedConversations == null
          ? null
          : Object.hashAll(l$archivedConversations.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$ArchivedConversations ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$archivedConversations = archivedConversations;
    final lOther$archivedConversations = other.archivedConversations;
    if (l$archivedConversations != null &&
        lOther$archivedConversations != null) {
      if (l$archivedConversations.length !=
          lOther$archivedConversations.length) {
        return false;
      }
      for (int i = 0; i < l$archivedConversations.length; i++) {
        final l$archivedConversations$entry = l$archivedConversations[i];
        final lOther$archivedConversations$entry =
            lOther$archivedConversations[i];
        if (l$archivedConversations$entry !=
            lOther$archivedConversations$entry) {
          return false;
        }
      }
    } else if (l$archivedConversations != lOther$archivedConversations) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$ArchivedConversations
    on Query$ArchivedConversations {
  CopyWith$Query$ArchivedConversations<Query$ArchivedConversations>
      get copyWith => CopyWith$Query$ArchivedConversations(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$ArchivedConversations<TRes> {
  factory CopyWith$Query$ArchivedConversations(
    Query$ArchivedConversations instance,
    TRes Function(Query$ArchivedConversations) then,
  ) = _CopyWithImpl$Query$ArchivedConversations;

  factory CopyWith$Query$ArchivedConversations.stub(TRes res) =
      _CopyWithStubImpl$Query$ArchivedConversations;

  TRes call({
    List<Query$ArchivedConversations$archivedConversations?>?
        archivedConversations,
    String? $__typename,
  });
  TRes archivedConversations(
      Iterable<Query$ArchivedConversations$archivedConversations?>? Function(
              Iterable<
                  CopyWith$Query$ArchivedConversations$archivedConversations<
                      Query$ArchivedConversations$archivedConversations>?>?)
          _fn);
}

class _CopyWithImpl$Query$ArchivedConversations<TRes>
    implements CopyWith$Query$ArchivedConversations<TRes> {
  _CopyWithImpl$Query$ArchivedConversations(
    this._instance,
    this._then,
  );

  final Query$ArchivedConversations _instance;

  final TRes Function(Query$ArchivedConversations) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? archivedConversations = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$ArchivedConversations(
        archivedConversations: archivedConversations == _undefined
            ? _instance.archivedConversations
            : (archivedConversations
                as List<Query$ArchivedConversations$archivedConversations?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes archivedConversations(
          Iterable<Query$ArchivedConversations$archivedConversations?>? Function(
                  Iterable<
                      CopyWith$Query$ArchivedConversations$archivedConversations<
                          Query$ArchivedConversations$archivedConversations>?>?)
              _fn) =>
      call(
          archivedConversations:
              _fn(_instance.archivedConversations?.map((e) => e == null
                  ? null
                  : CopyWith$Query$ArchivedConversations$archivedConversations(
                      e,
                      (i) => i,
                    )))?.toList());
}

class _CopyWithStubImpl$Query$ArchivedConversations<TRes>
    implements CopyWith$Query$ArchivedConversations<TRes> {
  _CopyWithStubImpl$Query$ArchivedConversations(this._res);

  TRes _res;

  call({
    List<Query$ArchivedConversations$archivedConversations?>?
        archivedConversations,
    String? $__typename,
  }) =>
      _res;

  archivedConversations(_fn) => _res;
}

const documentNodeQueryArchivedConversations = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'ArchivedConversations'),
    variableDefinitions: [],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'archivedConversations'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'disableResponse'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'lastModified'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'participant1Deleted'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'participant2Deleted'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'unreadMessagesCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'recipient'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'displayName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'profilePictureUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'thumbnailUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'lastMessage'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'text'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'attachment'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'attachmentType'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'sender'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'id'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'username'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'profilePictureUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'thumbnailUrl'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'displayName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$ArchivedConversations _parserFn$Query$ArchivedConversations(
        Map<String, dynamic> data) =>
    Query$ArchivedConversations.fromJson(data);
typedef OnQueryComplete$Query$ArchivedConversations = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$ArchivedConversations?,
);

class Options$Query$ArchivedConversations
    extends graphql.QueryOptions<Query$ArchivedConversations> {
  Options$Query$ArchivedConversations({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$ArchivedConversations? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$ArchivedConversations? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null
                        ? null
                        : _parserFn$Query$ArchivedConversations(data),
                  ),
          onError: onError,
          document: documentNodeQueryArchivedConversations,
          parserFn: _parserFn$Query$ArchivedConversations,
        );

  final OnQueryComplete$Query$ArchivedConversations? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$ArchivedConversations
    extends graphql.WatchQueryOptions<Query$ArchivedConversations> {
  WatchOptions$Query$ArchivedConversations({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$ArchivedConversations? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryArchivedConversations,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$ArchivedConversations,
        );
}

class FetchMoreOptions$Query$ArchivedConversations
    extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$ArchivedConversations(
      {required graphql.UpdateQuery updateQuery})
      : super(
          updateQuery: updateQuery,
          document: documentNodeQueryArchivedConversations,
        );
}

extension ClientExtension$Query$ArchivedConversations on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$ArchivedConversations>>
      query$ArchivedConversations(
              [Options$Query$ArchivedConversations? options]) async =>
          await this.query(options ?? Options$Query$ArchivedConversations());
  graphql.ObservableQuery<
      Query$ArchivedConversations> watchQuery$ArchivedConversations(
          [WatchOptions$Query$ArchivedConversations? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$ArchivedConversations());
  void writeQuery$ArchivedConversations({
    required Query$ArchivedConversations data,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
            operation: graphql.Operation(
                document: documentNodeQueryArchivedConversations)),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$ArchivedConversations? readQuery$ArchivedConversations(
      {bool optimistic = true}) {
    final result = this.readQuery(
      graphql.Request(
          operation: graphql.Operation(
              document: documentNodeQueryArchivedConversations)),
      optimistic: optimistic,
    );
    return result == null ? null : Query$ArchivedConversations.fromJson(result);
  }
}

class Query$ArchivedConversations$archivedConversations {
  Query$ArchivedConversations$archivedConversations({
    required this.id,
    required this.name,
    required this.disableResponse,
    required this.createdAt,
    required this.lastModified,
    required this.participant1Deleted,
    required this.participant2Deleted,
    this.unreadMessagesCount,
    this.recipient,
    this.lastMessage,
    this.$__typename = 'ConversationType',
  });

  factory Query$ArchivedConversations$archivedConversations.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$disableResponse = json['disableResponse'];
    final l$createdAt = json['createdAt'];
    final l$lastModified = json['lastModified'];
    final l$participant1Deleted = json['participant1Deleted'];
    final l$participant2Deleted = json['participant2Deleted'];
    final l$unreadMessagesCount = json['unreadMessagesCount'];
    final l$recipient = json['recipient'];
    final l$lastMessage = json['lastMessage'];
    final l$$__typename = json['__typename'];
    return Query$ArchivedConversations$archivedConversations(
      id: (l$id as String),
      name: (l$name as String),
      disableResponse: (l$disableResponse as bool),
      createdAt: DateTime.parse((l$createdAt as String)),
      lastModified: DateTime.parse((l$lastModified as String)),
      participant1Deleted: (l$participant1Deleted as bool),
      participant2Deleted: (l$participant2Deleted as bool),
      unreadMessagesCount: (l$unreadMessagesCount as int?),
      recipient: l$recipient == null
          ? null
          : Query$ArchivedConversations$archivedConversations$recipient
              .fromJson((l$recipient as Map<String, dynamic>)),
      lastMessage: l$lastMessage == null
          ? null
          : Query$ArchivedConversations$archivedConversations$lastMessage
              .fromJson((l$lastMessage as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String name;

  final bool disableResponse;

  final DateTime createdAt;

  final DateTime lastModified;

  final bool participant1Deleted;

  final bool participant2Deleted;

  final int? unreadMessagesCount;

  final Query$ArchivedConversations$archivedConversations$recipient? recipient;

  final Query$ArchivedConversations$archivedConversations$lastMessage?
      lastMessage;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$disableResponse = disableResponse;
    _resultData['disableResponse'] = l$disableResponse;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$lastModified = lastModified;
    _resultData['lastModified'] = l$lastModified.toIso8601String();
    final l$participant1Deleted = participant1Deleted;
    _resultData['participant1Deleted'] = l$participant1Deleted;
    final l$participant2Deleted = participant2Deleted;
    _resultData['participant2Deleted'] = l$participant2Deleted;
    final l$unreadMessagesCount = unreadMessagesCount;
    _resultData['unreadMessagesCount'] = l$unreadMessagesCount;
    final l$recipient = recipient;
    _resultData['recipient'] = l$recipient?.toJson();
    final l$lastMessage = lastMessage;
    _resultData['lastMessage'] = l$lastMessage?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$disableResponse = disableResponse;
    final l$createdAt = createdAt;
    final l$lastModified = lastModified;
    final l$participant1Deleted = participant1Deleted;
    final l$participant2Deleted = participant2Deleted;
    final l$unreadMessagesCount = unreadMessagesCount;
    final l$recipient = recipient;
    final l$lastMessage = lastMessage;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$disableResponse,
      l$createdAt,
      l$lastModified,
      l$participant1Deleted,
      l$participant2Deleted,
      l$unreadMessagesCount,
      l$recipient,
      l$lastMessage,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$ArchivedConversations$archivedConversations ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$disableResponse = disableResponse;
    final lOther$disableResponse = other.disableResponse;
    if (l$disableResponse != lOther$disableResponse) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$lastModified = lastModified;
    final lOther$lastModified = other.lastModified;
    if (l$lastModified != lOther$lastModified) {
      return false;
    }
    final l$participant1Deleted = participant1Deleted;
    final lOther$participant1Deleted = other.participant1Deleted;
    if (l$participant1Deleted != lOther$participant1Deleted) {
      return false;
    }
    final l$participant2Deleted = participant2Deleted;
    final lOther$participant2Deleted = other.participant2Deleted;
    if (l$participant2Deleted != lOther$participant2Deleted) {
      return false;
    }
    final l$unreadMessagesCount = unreadMessagesCount;
    final lOther$unreadMessagesCount = other.unreadMessagesCount;
    if (l$unreadMessagesCount != lOther$unreadMessagesCount) {
      return false;
    }
    final l$recipient = recipient;
    final lOther$recipient = other.recipient;
    if (l$recipient != lOther$recipient) {
      return false;
    }
    final l$lastMessage = lastMessage;
    final lOther$lastMessage = other.lastMessage;
    if (l$lastMessage != lOther$lastMessage) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$ArchivedConversations$archivedConversations
    on Query$ArchivedConversations$archivedConversations {
  CopyWith$Query$ArchivedConversations$archivedConversations<
          Query$ArchivedConversations$archivedConversations>
      get copyWith =>
          CopyWith$Query$ArchivedConversations$archivedConversations(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$ArchivedConversations$archivedConversations<
    TRes> {
  factory CopyWith$Query$ArchivedConversations$archivedConversations(
    Query$ArchivedConversations$archivedConversations instance,
    TRes Function(Query$ArchivedConversations$archivedConversations) then,
  ) = _CopyWithImpl$Query$ArchivedConversations$archivedConversations;

  factory CopyWith$Query$ArchivedConversations$archivedConversations.stub(
          TRes res) =
      _CopyWithStubImpl$Query$ArchivedConversations$archivedConversations;

  TRes call({
    String? id,
    String? name,
    bool? disableResponse,
    DateTime? createdAt,
    DateTime? lastModified,
    bool? participant1Deleted,
    bool? participant2Deleted,
    int? unreadMessagesCount,
    Query$ArchivedConversations$archivedConversations$recipient? recipient,
    Query$ArchivedConversations$archivedConversations$lastMessage? lastMessage,
    String? $__typename,
  });
  CopyWith$Query$ArchivedConversations$archivedConversations$recipient<TRes>
      get recipient;
  CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage<TRes>
      get lastMessage;
}

class _CopyWithImpl$Query$ArchivedConversations$archivedConversations<TRes>
    implements
        CopyWith$Query$ArchivedConversations$archivedConversations<TRes> {
  _CopyWithImpl$Query$ArchivedConversations$archivedConversations(
    this._instance,
    this._then,
  );

  final Query$ArchivedConversations$archivedConversations _instance;

  final TRes Function(Query$ArchivedConversations$archivedConversations) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? disableResponse = _undefined,
    Object? createdAt = _undefined,
    Object? lastModified = _undefined,
    Object? participant1Deleted = _undefined,
    Object? participant2Deleted = _undefined,
    Object? unreadMessagesCount = _undefined,
    Object? recipient = _undefined,
    Object? lastMessage = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$ArchivedConversations$archivedConversations(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        disableResponse:
            disableResponse == _undefined || disableResponse == null
                ? _instance.disableResponse
                : (disableResponse as bool),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        lastModified: lastModified == _undefined || lastModified == null
            ? _instance.lastModified
            : (lastModified as DateTime),
        participant1Deleted:
            participant1Deleted == _undefined || participant1Deleted == null
                ? _instance.participant1Deleted
                : (participant1Deleted as bool),
        participant2Deleted:
            participant2Deleted == _undefined || participant2Deleted == null
                ? _instance.participant2Deleted
                : (participant2Deleted as bool),
        unreadMessagesCount: unreadMessagesCount == _undefined
            ? _instance.unreadMessagesCount
            : (unreadMessagesCount as int?),
        recipient: recipient == _undefined
            ? _instance.recipient
            : (recipient
                as Query$ArchivedConversations$archivedConversations$recipient?),
        lastMessage: lastMessage == _undefined
            ? _instance.lastMessage
            : (lastMessage
                as Query$ArchivedConversations$archivedConversations$lastMessage?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$ArchivedConversations$archivedConversations$recipient<TRes>
      get recipient {
    final local$recipient = _instance.recipient;
    return local$recipient == null
        ? CopyWith$Query$ArchivedConversations$archivedConversations$recipient
            .stub(_then(_instance))
        : CopyWith$Query$ArchivedConversations$archivedConversations$recipient(
            local$recipient, (e) => call(recipient: e));
  }

  CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage<TRes>
      get lastMessage {
    final local$lastMessage = _instance.lastMessage;
    return local$lastMessage == null
        ? CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage
            .stub(_then(_instance))
        : CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage(
            local$lastMessage, (e) => call(lastMessage: e));
  }
}

class _CopyWithStubImpl$Query$ArchivedConversations$archivedConversations<TRes>
    implements
        CopyWith$Query$ArchivedConversations$archivedConversations<TRes> {
  _CopyWithStubImpl$Query$ArchivedConversations$archivedConversations(
      this._res);

  TRes _res;

  call({
    String? id,
    String? name,
    bool? disableResponse,
    DateTime? createdAt,
    DateTime? lastModified,
    bool? participant1Deleted,
    bool? participant2Deleted,
    int? unreadMessagesCount,
    Query$ArchivedConversations$archivedConversations$recipient? recipient,
    Query$ArchivedConversations$archivedConversations$lastMessage? lastMessage,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$ArchivedConversations$archivedConversations$recipient<TRes>
      get recipient =>
          CopyWith$Query$ArchivedConversations$archivedConversations$recipient
              .stub(_res);

  CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage<TRes>
      get lastMessage =>
          CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage
              .stub(_res);
}

class Query$ArchivedConversations$archivedConversations$recipient {
  Query$ArchivedConversations$archivedConversations$recipient({
    this.id,
    this.username,
    this.displayName,
    this.profilePictureUrl,
    this.thumbnailUrl,
    this.$__typename = 'UserType',
  });

  factory Query$ArchivedConversations$archivedConversations$recipient.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$displayName = json['displayName'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$thumbnailUrl = json['thumbnailUrl'];
    final l$$__typename = json['__typename'];
    return Query$ArchivedConversations$archivedConversations$recipient(
      id: (l$id as int?),
      username: (l$username as String?),
      displayName: (l$displayName as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      thumbnailUrl: (l$thumbnailUrl as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String? displayName;

  final String? profilePictureUrl;

  final String? thumbnailUrl;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$displayName = displayName;
    _resultData['displayName'] = l$displayName;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$thumbnailUrl = thumbnailUrl;
    _resultData['thumbnailUrl'] = l$thumbnailUrl;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$displayName = displayName;
    final l$profilePictureUrl = profilePictureUrl;
    final l$thumbnailUrl = thumbnailUrl;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$displayName,
      l$profilePictureUrl,
      l$thumbnailUrl,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$ArchivedConversations$archivedConversations$recipient ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$thumbnailUrl = thumbnailUrl;
    final lOther$thumbnailUrl = other.thumbnailUrl;
    if (l$thumbnailUrl != lOther$thumbnailUrl) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$ArchivedConversations$archivedConversations$recipient
    on Query$ArchivedConversations$archivedConversations$recipient {
  CopyWith$Query$ArchivedConversations$archivedConversations$recipient<
          Query$ArchivedConversations$archivedConversations$recipient>
      get copyWith =>
          CopyWith$Query$ArchivedConversations$archivedConversations$recipient(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$ArchivedConversations$archivedConversations$recipient<
    TRes> {
  factory CopyWith$Query$ArchivedConversations$archivedConversations$recipient(
    Query$ArchivedConversations$archivedConversations$recipient instance,
    TRes Function(Query$ArchivedConversations$archivedConversations$recipient)
        then,
  ) = _CopyWithImpl$Query$ArchivedConversations$archivedConversations$recipient;

  factory CopyWith$Query$ArchivedConversations$archivedConversations$recipient.stub(
          TRes res) =
      _CopyWithStubImpl$Query$ArchivedConversations$archivedConversations$recipient;

  TRes call({
    int? id,
    String? username,
    String? displayName,
    String? profilePictureUrl,
    String? thumbnailUrl,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$ArchivedConversations$archivedConversations$recipient<
        TRes>
    implements
        CopyWith$Query$ArchivedConversations$archivedConversations$recipient<
            TRes> {
  _CopyWithImpl$Query$ArchivedConversations$archivedConversations$recipient(
    this._instance,
    this._then,
  );

  final Query$ArchivedConversations$archivedConversations$recipient _instance;

  final TRes Function(
      Query$ArchivedConversations$archivedConversations$recipient) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? displayName = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? thumbnailUrl = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$ArchivedConversations$archivedConversations$recipient(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        displayName: displayName == _undefined
            ? _instance.displayName
            : (displayName as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        thumbnailUrl: thumbnailUrl == _undefined
            ? _instance.thumbnailUrl
            : (thumbnailUrl as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$ArchivedConversations$archivedConversations$recipient<
        TRes>
    implements
        CopyWith$Query$ArchivedConversations$archivedConversations$recipient<
            TRes> {
  _CopyWithStubImpl$Query$ArchivedConversations$archivedConversations$recipient(
      this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? displayName,
    String? profilePictureUrl,
    String? thumbnailUrl,
    String? $__typename,
  }) =>
      _res;
}

class Query$ArchivedConversations$archivedConversations$lastMessage {
  Query$ArchivedConversations$archivedConversations$lastMessage({
    required this.id,
    required this.text,
    this.attachment,
    this.attachmentType,
    this.sender,
    this.$__typename = 'MessageType',
  });

  factory Query$ArchivedConversations$archivedConversations$lastMessage.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$text = json['text'];
    final l$attachment = json['attachment'];
    final l$attachmentType = json['attachmentType'];
    final l$sender = json['sender'];
    final l$$__typename = json['__typename'];
    return Query$ArchivedConversations$archivedConversations$lastMessage(
      id: (l$id as String),
      text: (l$text as String),
      attachment: (l$attachment as String?),
      attachmentType: l$attachmentType == null
          ? null
          : fromJson$Enum$ChatsMessageAttachmentTypeChoices(
              (l$attachmentType as String)),
      sender: l$sender == null
          ? null
          : Query$ArchivedConversations$archivedConversations$lastMessage$sender
              .fromJson((l$sender as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String text;

  final String? attachment;

  final Enum$ChatsMessageAttachmentTypeChoices? attachmentType;

  final Query$ArchivedConversations$archivedConversations$lastMessage$sender?
      sender;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$text = text;
    _resultData['text'] = l$text;
    final l$attachment = attachment;
    _resultData['attachment'] = l$attachment;
    final l$attachmentType = attachmentType;
    _resultData['attachmentType'] = l$attachmentType == null
        ? null
        : toJson$Enum$ChatsMessageAttachmentTypeChoices(l$attachmentType);
    final l$sender = sender;
    _resultData['sender'] = l$sender?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$text = text;
    final l$attachment = attachment;
    final l$attachmentType = attachmentType;
    final l$sender = sender;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$text,
      l$attachment,
      l$attachmentType,
      l$sender,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other
            is! Query$ArchivedConversations$archivedConversations$lastMessage ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$text = text;
    final lOther$text = other.text;
    if (l$text != lOther$text) {
      return false;
    }
    final l$attachment = attachment;
    final lOther$attachment = other.attachment;
    if (l$attachment != lOther$attachment) {
      return false;
    }
    final l$attachmentType = attachmentType;
    final lOther$attachmentType = other.attachmentType;
    if (l$attachmentType != lOther$attachmentType) {
      return false;
    }
    final l$sender = sender;
    final lOther$sender = other.sender;
    if (l$sender != lOther$sender) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$ArchivedConversations$archivedConversations$lastMessage
    on Query$ArchivedConversations$archivedConversations$lastMessage {
  CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage<
          Query$ArchivedConversations$archivedConversations$lastMessage>
      get copyWith =>
          CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage<
    TRes> {
  factory CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage(
    Query$ArchivedConversations$archivedConversations$lastMessage instance,
    TRes Function(Query$ArchivedConversations$archivedConversations$lastMessage)
        then,
  ) = _CopyWithImpl$Query$ArchivedConversations$archivedConversations$lastMessage;

  factory CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage.stub(
          TRes res) =
      _CopyWithStubImpl$Query$ArchivedConversations$archivedConversations$lastMessage;

  TRes call({
    String? id,
    String? text,
    String? attachment,
    Enum$ChatsMessageAttachmentTypeChoices? attachmentType,
    Query$ArchivedConversations$archivedConversations$lastMessage$sender?
        sender,
    String? $__typename,
  });
  CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage$sender<
      TRes> get sender;
}

class _CopyWithImpl$Query$ArchivedConversations$archivedConversations$lastMessage<
        TRes>
    implements
        CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage<
            TRes> {
  _CopyWithImpl$Query$ArchivedConversations$archivedConversations$lastMessage(
    this._instance,
    this._then,
  );

  final Query$ArchivedConversations$archivedConversations$lastMessage _instance;

  final TRes Function(
      Query$ArchivedConversations$archivedConversations$lastMessage) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? text = _undefined,
    Object? attachment = _undefined,
    Object? attachmentType = _undefined,
    Object? sender = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$ArchivedConversations$archivedConversations$lastMessage(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        text: text == _undefined || text == null
            ? _instance.text
            : (text as String),
        attachment: attachment == _undefined
            ? _instance.attachment
            : (attachment as String?),
        attachmentType: attachmentType == _undefined
            ? _instance.attachmentType
            : (attachmentType as Enum$ChatsMessageAttachmentTypeChoices?),
        sender: sender == _undefined
            ? _instance.sender
            : (sender
                as Query$ArchivedConversations$archivedConversations$lastMessage$sender?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage$sender<
      TRes> get sender {
    final local$sender = _instance.sender;
    return local$sender == null
        ? CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage$sender
            .stub(_then(_instance))
        : CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage$sender(
            local$sender, (e) => call(sender: e));
  }
}

class _CopyWithStubImpl$Query$ArchivedConversations$archivedConversations$lastMessage<
        TRes>
    implements
        CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage<
            TRes> {
  _CopyWithStubImpl$Query$ArchivedConversations$archivedConversations$lastMessage(
      this._res);

  TRes _res;

  call({
    String? id,
    String? text,
    String? attachment,
    Enum$ChatsMessageAttachmentTypeChoices? attachmentType,
    Query$ArchivedConversations$archivedConversations$lastMessage$sender?
        sender,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage$sender<
          TRes>
      get sender =>
          CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage$sender
              .stub(_res);
}

class Query$ArchivedConversations$archivedConversations$lastMessage$sender {
  Query$ArchivedConversations$archivedConversations$lastMessage$sender({
    this.id,
    this.username,
    this.profilePictureUrl,
    this.thumbnailUrl,
    this.displayName,
    this.$__typename = 'UserType',
  });

  factory Query$ArchivedConversations$archivedConversations$lastMessage$sender.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$thumbnailUrl = json['thumbnailUrl'];
    final l$displayName = json['displayName'];
    final l$$__typename = json['__typename'];
    return Query$ArchivedConversations$archivedConversations$lastMessage$sender(
      id: (l$id as int?),
      username: (l$username as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      thumbnailUrl: (l$thumbnailUrl as String?),
      displayName: (l$displayName as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String? profilePictureUrl;

  final String? thumbnailUrl;

  final String? displayName;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$thumbnailUrl = thumbnailUrl;
    _resultData['thumbnailUrl'] = l$thumbnailUrl;
    final l$displayName = displayName;
    _resultData['displayName'] = l$displayName;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$profilePictureUrl = profilePictureUrl;
    final l$thumbnailUrl = thumbnailUrl;
    final l$displayName = displayName;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$profilePictureUrl,
      l$thumbnailUrl,
      l$displayName,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other
            is! Query$ArchivedConversations$archivedConversations$lastMessage$sender ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$thumbnailUrl = thumbnailUrl;
    final lOther$thumbnailUrl = other.thumbnailUrl;
    if (l$thumbnailUrl != lOther$thumbnailUrl) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$ArchivedConversations$archivedConversations$lastMessage$sender
    on Query$ArchivedConversations$archivedConversations$lastMessage$sender {
  CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage$sender<
          Query$ArchivedConversations$archivedConversations$lastMessage$sender>
      get copyWith =>
          CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage$sender(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage$sender<
    TRes> {
  factory CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage$sender(
    Query$ArchivedConversations$archivedConversations$lastMessage$sender
        instance,
    TRes Function(
            Query$ArchivedConversations$archivedConversations$lastMessage$sender)
        then,
  ) = _CopyWithImpl$Query$ArchivedConversations$archivedConversations$lastMessage$sender;

  factory CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage$sender.stub(
          TRes res) =
      _CopyWithStubImpl$Query$ArchivedConversations$archivedConversations$lastMessage$sender;

  TRes call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? thumbnailUrl,
    String? displayName,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$ArchivedConversations$archivedConversations$lastMessage$sender<
        TRes>
    implements
        CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage$sender<
            TRes> {
  _CopyWithImpl$Query$ArchivedConversations$archivedConversations$lastMessage$sender(
    this._instance,
    this._then,
  );

  final Query$ArchivedConversations$archivedConversations$lastMessage$sender
      _instance;

  final TRes Function(
          Query$ArchivedConversations$archivedConversations$lastMessage$sender)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? thumbnailUrl = _undefined,
    Object? displayName = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(
          Query$ArchivedConversations$archivedConversations$lastMessage$sender(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        thumbnailUrl: thumbnailUrl == _undefined
            ? _instance.thumbnailUrl
            : (thumbnailUrl as String?),
        displayName: displayName == _undefined
            ? _instance.displayName
            : (displayName as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$ArchivedConversations$archivedConversations$lastMessage$sender<
        TRes>
    implements
        CopyWith$Query$ArchivedConversations$archivedConversations$lastMessage$sender<
            TRes> {
  _CopyWithStubImpl$Query$ArchivedConversations$archivedConversations$lastMessage$sender(
      this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? thumbnailUrl,
    String? displayName,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$Notifications {
  factory Variables$Query$Notifications({
    int? pageCount,
    int? pageNumber,
  }) =>
      Variables$Query$Notifications._({
        if (pageCount != null) r'pageCount': pageCount,
        if (pageNumber != null) r'pageNumber': pageNumber,
      });

  Variables$Query$Notifications._(this._$data);

  factory Variables$Query$Notifications.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('pageCount')) {
      final l$pageCount = data['pageCount'];
      result$data['pageCount'] = (l$pageCount as int?);
    }
    if (data.containsKey('pageNumber')) {
      final l$pageNumber = data['pageNumber'];
      result$data['pageNumber'] = (l$pageNumber as int?);
    }
    return Variables$Query$Notifications._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get pageCount => (_$data['pageCount'] as int?);

  int? get pageNumber => (_$data['pageNumber'] as int?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('pageCount')) {
      final l$pageCount = pageCount;
      result$data['pageCount'] = l$pageCount;
    }
    if (_$data.containsKey('pageNumber')) {
      final l$pageNumber = pageNumber;
      result$data['pageNumber'] = l$pageNumber;
    }
    return result$data;
  }

  CopyWith$Variables$Query$Notifications<Variables$Query$Notifications>
      get copyWith => CopyWith$Variables$Query$Notifications(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$Notifications ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$pageCount = pageCount;
    final lOther$pageCount = other.pageCount;
    if (_$data.containsKey('pageCount') !=
        other._$data.containsKey('pageCount')) {
      return false;
    }
    if (l$pageCount != lOther$pageCount) {
      return false;
    }
    final l$pageNumber = pageNumber;
    final lOther$pageNumber = other.pageNumber;
    if (_$data.containsKey('pageNumber') !=
        other._$data.containsKey('pageNumber')) {
      return false;
    }
    if (l$pageNumber != lOther$pageNumber) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$pageCount = pageCount;
    final l$pageNumber = pageNumber;
    return Object.hashAll([
      _$data.containsKey('pageCount') ? l$pageCount : const {},
      _$data.containsKey('pageNumber') ? l$pageNumber : const {},
    ]);
  }
}

abstract class CopyWith$Variables$Query$Notifications<TRes> {
  factory CopyWith$Variables$Query$Notifications(
    Variables$Query$Notifications instance,
    TRes Function(Variables$Query$Notifications) then,
  ) = _CopyWithImpl$Variables$Query$Notifications;

  factory CopyWith$Variables$Query$Notifications.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$Notifications;

  TRes call({
    int? pageCount,
    int? pageNumber,
  });
}

class _CopyWithImpl$Variables$Query$Notifications<TRes>
    implements CopyWith$Variables$Query$Notifications<TRes> {
  _CopyWithImpl$Variables$Query$Notifications(
    this._instance,
    this._then,
  );

  final Variables$Query$Notifications _instance;

  final TRes Function(Variables$Query$Notifications) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? pageCount = _undefined,
    Object? pageNumber = _undefined,
  }) =>
      _then(Variables$Query$Notifications._({
        ..._instance._$data,
        if (pageCount != _undefined) 'pageCount': (pageCount as int?),
        if (pageNumber != _undefined) 'pageNumber': (pageNumber as int?),
      }));
}

class _CopyWithStubImpl$Variables$Query$Notifications<TRes>
    implements CopyWith$Variables$Query$Notifications<TRes> {
  _CopyWithStubImpl$Variables$Query$Notifications(this._res);

  TRes _res;

  call({
    int? pageCount,
    int? pageNumber,
  }) =>
      _res;
}

class Query$Notifications {
  Query$Notifications({
    this.notifications,
    this.notificationsTotalNumber,
    this.$__typename = 'Query',
  });

  factory Query$Notifications.fromJson(Map<String, dynamic> json) {
    final l$notifications = json['notifications'];
    final l$notificationsTotalNumber = json['notificationsTotalNumber'];
    final l$$__typename = json['__typename'];
    return Query$Notifications(
      notifications: (l$notifications as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$Notifications$notifications.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      notificationsTotalNumber: (l$notificationsTotalNumber as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$Notifications$notifications?>? notifications;

  final int? notificationsTotalNumber;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$notifications = notifications;
    _resultData['notifications'] =
        l$notifications?.map((e) => e?.toJson()).toList();
    final l$notificationsTotalNumber = notificationsTotalNumber;
    _resultData['notificationsTotalNumber'] = l$notificationsTotalNumber;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$notifications = notifications;
    final l$notificationsTotalNumber = notificationsTotalNumber;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$notifications == null
          ? null
          : Object.hashAll(l$notifications.map((v) => v)),
      l$notificationsTotalNumber,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Notifications || runtimeType != other.runtimeType) {
      return false;
    }
    final l$notifications = notifications;
    final lOther$notifications = other.notifications;
    if (l$notifications != null && lOther$notifications != null) {
      if (l$notifications.length != lOther$notifications.length) {
        return false;
      }
      for (int i = 0; i < l$notifications.length; i++) {
        final l$notifications$entry = l$notifications[i];
        final lOther$notifications$entry = lOther$notifications[i];
        if (l$notifications$entry != lOther$notifications$entry) {
          return false;
        }
      }
    } else if (l$notifications != lOther$notifications) {
      return false;
    }
    final l$notificationsTotalNumber = notificationsTotalNumber;
    final lOther$notificationsTotalNumber = other.notificationsTotalNumber;
    if (l$notificationsTotalNumber != lOther$notificationsTotalNumber) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Notifications on Query$Notifications {
  CopyWith$Query$Notifications<Query$Notifications> get copyWith =>
      CopyWith$Query$Notifications(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$Notifications<TRes> {
  factory CopyWith$Query$Notifications(
    Query$Notifications instance,
    TRes Function(Query$Notifications) then,
  ) = _CopyWithImpl$Query$Notifications;

  factory CopyWith$Query$Notifications.stub(TRes res) =
      _CopyWithStubImpl$Query$Notifications;

  TRes call({
    List<Query$Notifications$notifications?>? notifications,
    int? notificationsTotalNumber,
    String? $__typename,
  });
  TRes notifications(
      Iterable<Query$Notifications$notifications?>? Function(
              Iterable<
                  CopyWith$Query$Notifications$notifications<
                      Query$Notifications$notifications>?>?)
          _fn);
}

class _CopyWithImpl$Query$Notifications<TRes>
    implements CopyWith$Query$Notifications<TRes> {
  _CopyWithImpl$Query$Notifications(
    this._instance,
    this._then,
  );

  final Query$Notifications _instance;

  final TRes Function(Query$Notifications) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? notifications = _undefined,
    Object? notificationsTotalNumber = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Notifications(
        notifications: notifications == _undefined
            ? _instance.notifications
            : (notifications as List<Query$Notifications$notifications?>?),
        notificationsTotalNumber: notificationsTotalNumber == _undefined
            ? _instance.notificationsTotalNumber
            : (notificationsTotalNumber as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes notifications(
          Iterable<Query$Notifications$notifications?>? Function(
                  Iterable<
                      CopyWith$Query$Notifications$notifications<
                          Query$Notifications$notifications>?>?)
              _fn) =>
      call(
          notifications: _fn(_instance.notifications?.map((e) => e == null
              ? null
              : CopyWith$Query$Notifications$notifications(
                  e,
                  (i) => i,
                )))?.toList());
}

class _CopyWithStubImpl$Query$Notifications<TRes>
    implements CopyWith$Query$Notifications<TRes> {
  _CopyWithStubImpl$Query$Notifications(this._res);

  TRes _res;

  call({
    List<Query$Notifications$notifications?>? notifications,
    int? notificationsTotalNumber,
    String? $__typename,
  }) =>
      _res;

  notifications(_fn) => _res;
}

const documentNodeQueryNotifications = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'Notifications'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageCount')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageNumber')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'notifications'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'pageCount'),
            value: VariableNode(name: NameNode(value: 'pageCount')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageNumber'),
            value: VariableNode(name: NameNode(value: 'pageNumber')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'message'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'model'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'modelId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'modelGroup'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isRead'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'delivered'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'deleted'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'meta'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'sender'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'profilePictureUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'thumbnailUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: 'notificationsTotalNumber'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$Notifications _parserFn$Query$Notifications(Map<String, dynamic> data) =>
    Query$Notifications.fromJson(data);
typedef OnQueryComplete$Query$Notifications = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$Notifications?,
);

class Options$Query$Notifications
    extends graphql.QueryOptions<Query$Notifications> {
  Options$Query$Notifications({
    String? operationName,
    Variables$Query$Notifications? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$Notifications? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$Notifications? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$Notifications(data),
                  ),
          onError: onError,
          document: documentNodeQueryNotifications,
          parserFn: _parserFn$Query$Notifications,
        );

  final OnQueryComplete$Query$Notifications? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$Notifications
    extends graphql.WatchQueryOptions<Query$Notifications> {
  WatchOptions$Query$Notifications({
    String? operationName,
    Variables$Query$Notifications? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$Notifications? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryNotifications,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$Notifications,
        );
}

class FetchMoreOptions$Query$Notifications extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$Notifications({
    required graphql.UpdateQuery updateQuery,
    Variables$Query$Notifications? variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables?.toJson() ?? {},
          document: documentNodeQueryNotifications,
        );
}

extension ClientExtension$Query$Notifications on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$Notifications>> query$Notifications(
          [Options$Query$Notifications? options]) async =>
      await this.query(options ?? Options$Query$Notifications());
  graphql.ObservableQuery<Query$Notifications> watchQuery$Notifications(
          [WatchOptions$Query$Notifications? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$Notifications());
  void writeQuery$Notifications({
    required Query$Notifications data,
    Variables$Query$Notifications? variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation:
              graphql.Operation(document: documentNodeQueryNotifications),
          variables: variables?.toJson() ?? const {},
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$Notifications? readQuery$Notifications({
    Variables$Query$Notifications? variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQueryNotifications),
        variables: variables?.toJson() ?? const {},
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$Notifications.fromJson(result);
  }
}

class Query$Notifications$notifications {
  Query$Notifications$notifications({
    required this.id,
    required this.message,
    required this.model,
    required this.modelId,
    this.modelGroup,
    required this.isRead,
    required this.delivered,
    required this.deleted,
    required this.createdAt,
    required this.updatedAt,
    this.meta,
    this.sender,
    this.$__typename = 'NotificationType',
  });

  factory Query$Notifications$notifications.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$message = json['message'];
    final l$model = json['model'];
    final l$modelId = json['modelId'];
    final l$modelGroup = json['modelGroup'];
    final l$isRead = json['isRead'];
    final l$delivered = json['delivered'];
    final l$deleted = json['deleted'];
    final l$createdAt = json['createdAt'];
    final l$updatedAt = json['updatedAt'];
    final l$meta = json['meta'];
    final l$sender = json['sender'];
    final l$$__typename = json['__typename'];
    return Query$Notifications$notifications(
      id: (l$id as String),
      message: (l$message as String),
      model: (l$model as String),
      modelId: (l$modelId as String),
      modelGroup: (l$modelGroup as String?),
      isRead: (l$isRead as bool),
      delivered: (l$delivered as bool),
      deleted: (l$deleted as bool),
      createdAt: DateTime.parse((l$createdAt as String)),
      updatedAt: DateTime.parse((l$updatedAt as String)),
      meta: (l$meta as String?),
      sender: l$sender == null
          ? null
          : Query$Notifications$notifications$sender.fromJson(
              (l$sender as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String message;

  final String model;

  final String modelId;

  final String? modelGroup;

  final bool isRead;

  final bool delivered;

  final bool deleted;

  final DateTime createdAt;

  final DateTime updatedAt;

  final String? meta;

  final Query$Notifications$notifications$sender? sender;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$message = message;
    _resultData['message'] = l$message;
    final l$model = model;
    _resultData['model'] = l$model;
    final l$modelId = modelId;
    _resultData['modelId'] = l$modelId;
    final l$modelGroup = modelGroup;
    _resultData['modelGroup'] = l$modelGroup;
    final l$isRead = isRead;
    _resultData['isRead'] = l$isRead;
    final l$delivered = delivered;
    _resultData['delivered'] = l$delivered;
    final l$deleted = deleted;
    _resultData['deleted'] = l$deleted;
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt.toIso8601String();
    final l$meta = meta;
    _resultData['meta'] = l$meta;
    final l$sender = sender;
    _resultData['sender'] = l$sender?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$message = message;
    final l$model = model;
    final l$modelId = modelId;
    final l$modelGroup = modelGroup;
    final l$isRead = isRead;
    final l$delivered = delivered;
    final l$deleted = deleted;
    final l$createdAt = createdAt;
    final l$updatedAt = updatedAt;
    final l$meta = meta;
    final l$sender = sender;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$message,
      l$model,
      l$modelId,
      l$modelGroup,
      l$isRead,
      l$delivered,
      l$deleted,
      l$createdAt,
      l$updatedAt,
      l$meta,
      l$sender,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Notifications$notifications ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$message = message;
    final lOther$message = other.message;
    if (l$message != lOther$message) {
      return false;
    }
    final l$model = model;
    final lOther$model = other.model;
    if (l$model != lOther$model) {
      return false;
    }
    final l$modelId = modelId;
    final lOther$modelId = other.modelId;
    if (l$modelId != lOther$modelId) {
      return false;
    }
    final l$modelGroup = modelGroup;
    final lOther$modelGroup = other.modelGroup;
    if (l$modelGroup != lOther$modelGroup) {
      return false;
    }
    final l$isRead = isRead;
    final lOther$isRead = other.isRead;
    if (l$isRead != lOther$isRead) {
      return false;
    }
    final l$delivered = delivered;
    final lOther$delivered = other.delivered;
    if (l$delivered != lOther$delivered) {
      return false;
    }
    final l$deleted = deleted;
    final lOther$deleted = other.deleted;
    if (l$deleted != lOther$deleted) {
      return false;
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$meta = meta;
    final lOther$meta = other.meta;
    if (l$meta != lOther$meta) {
      return false;
    }
    final l$sender = sender;
    final lOther$sender = other.sender;
    if (l$sender != lOther$sender) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Notifications$notifications
    on Query$Notifications$notifications {
  CopyWith$Query$Notifications$notifications<Query$Notifications$notifications>
      get copyWith => CopyWith$Query$Notifications$notifications(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Notifications$notifications<TRes> {
  factory CopyWith$Query$Notifications$notifications(
    Query$Notifications$notifications instance,
    TRes Function(Query$Notifications$notifications) then,
  ) = _CopyWithImpl$Query$Notifications$notifications;

  factory CopyWith$Query$Notifications$notifications.stub(TRes res) =
      _CopyWithStubImpl$Query$Notifications$notifications;

  TRes call({
    String? id,
    String? message,
    String? model,
    String? modelId,
    String? modelGroup,
    bool? isRead,
    bool? delivered,
    bool? deleted,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? meta,
    Query$Notifications$notifications$sender? sender,
    String? $__typename,
  });
  CopyWith$Query$Notifications$notifications$sender<TRes> get sender;
}

class _CopyWithImpl$Query$Notifications$notifications<TRes>
    implements CopyWith$Query$Notifications$notifications<TRes> {
  _CopyWithImpl$Query$Notifications$notifications(
    this._instance,
    this._then,
  );

  final Query$Notifications$notifications _instance;

  final TRes Function(Query$Notifications$notifications) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? message = _undefined,
    Object? model = _undefined,
    Object? modelId = _undefined,
    Object? modelGroup = _undefined,
    Object? isRead = _undefined,
    Object? delivered = _undefined,
    Object? deleted = _undefined,
    Object? createdAt = _undefined,
    Object? updatedAt = _undefined,
    Object? meta = _undefined,
    Object? sender = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Notifications$notifications(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        message: message == _undefined || message == null
            ? _instance.message
            : (message as String),
        model: model == _undefined || model == null
            ? _instance.model
            : (model as String),
        modelId: modelId == _undefined || modelId == null
            ? _instance.modelId
            : (modelId as String),
        modelGroup: modelGroup == _undefined
            ? _instance.modelGroup
            : (modelGroup as String?),
        isRead: isRead == _undefined || isRead == null
            ? _instance.isRead
            : (isRead as bool),
        delivered: delivered == _undefined || delivered == null
            ? _instance.delivered
            : (delivered as bool),
        deleted: deleted == _undefined || deleted == null
            ? _instance.deleted
            : (deleted as bool),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        updatedAt: updatedAt == _undefined || updatedAt == null
            ? _instance.updatedAt
            : (updatedAt as DateTime),
        meta: meta == _undefined ? _instance.meta : (meta as String?),
        sender: sender == _undefined
            ? _instance.sender
            : (sender as Query$Notifications$notifications$sender?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$Notifications$notifications$sender<TRes> get sender {
    final local$sender = _instance.sender;
    return local$sender == null
        ? CopyWith$Query$Notifications$notifications$sender.stub(
            _then(_instance))
        : CopyWith$Query$Notifications$notifications$sender(
            local$sender, (e) => call(sender: e));
  }
}

class _CopyWithStubImpl$Query$Notifications$notifications<TRes>
    implements CopyWith$Query$Notifications$notifications<TRes> {
  _CopyWithStubImpl$Query$Notifications$notifications(this._res);

  TRes _res;

  call({
    String? id,
    String? message,
    String? model,
    String? modelId,
    String? modelGroup,
    bool? isRead,
    bool? delivered,
    bool? deleted,
    DateTime? createdAt,
    DateTime? updatedAt,
    String? meta,
    Query$Notifications$notifications$sender? sender,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$Notifications$notifications$sender<TRes> get sender =>
      CopyWith$Query$Notifications$notifications$sender.stub(_res);
}

class Query$Notifications$notifications$sender {
  Query$Notifications$notifications$sender({
    this.username,
    this.profilePictureUrl,
    this.thumbnailUrl,
    this.$__typename = 'SenderType',
  });

  factory Query$Notifications$notifications$sender.fromJson(
      Map<String, dynamic> json) {
    final l$username = json['username'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$thumbnailUrl = json['thumbnailUrl'];
    final l$$__typename = json['__typename'];
    return Query$Notifications$notifications$sender(
      username: (l$username as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      thumbnailUrl: (l$thumbnailUrl as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? username;

  final String? profilePictureUrl;

  final String? thumbnailUrl;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$username = username;
    _resultData['username'] = l$username;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$thumbnailUrl = thumbnailUrl;
    _resultData['thumbnailUrl'] = l$thumbnailUrl;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$username = username;
    final l$profilePictureUrl = profilePictureUrl;
    final l$thumbnailUrl = thumbnailUrl;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$username,
      l$profilePictureUrl,
      l$thumbnailUrl,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$Notifications$notifications$sender ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$thumbnailUrl = thumbnailUrl;
    final lOther$thumbnailUrl = other.thumbnailUrl;
    if (l$thumbnailUrl != lOther$thumbnailUrl) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$Notifications$notifications$sender
    on Query$Notifications$notifications$sender {
  CopyWith$Query$Notifications$notifications$sender<
          Query$Notifications$notifications$sender>
      get copyWith => CopyWith$Query$Notifications$notifications$sender(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$Notifications$notifications$sender<TRes> {
  factory CopyWith$Query$Notifications$notifications$sender(
    Query$Notifications$notifications$sender instance,
    TRes Function(Query$Notifications$notifications$sender) then,
  ) = _CopyWithImpl$Query$Notifications$notifications$sender;

  factory CopyWith$Query$Notifications$notifications$sender.stub(TRes res) =
      _CopyWithStubImpl$Query$Notifications$notifications$sender;

  TRes call({
    String? username,
    String? profilePictureUrl,
    String? thumbnailUrl,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$Notifications$notifications$sender<TRes>
    implements CopyWith$Query$Notifications$notifications$sender<TRes> {
  _CopyWithImpl$Query$Notifications$notifications$sender(
    this._instance,
    this._then,
  );

  final Query$Notifications$notifications$sender _instance;

  final TRes Function(Query$Notifications$notifications$sender) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? username = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? thumbnailUrl = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$Notifications$notifications$sender(
        username:
            username == _undefined ? _instance.username : (username as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        thumbnailUrl: thumbnailUrl == _undefined
            ? _instance.thumbnailUrl
            : (thumbnailUrl as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$Notifications$notifications$sender<TRes>
    implements CopyWith$Query$Notifications$notifications$sender<TRes> {
  _CopyWithStubImpl$Query$Notifications$notifications$sender(this._res);

  TRes _res;

  call({
    String? username,
    String? profilePictureUrl,
    String? thumbnailUrl,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$UserProductGrouping {
  factory Variables$Query$UserProductGrouping({
    required int userId,
    required Enum$ProductGroupingEnum groupBy,
  }) =>
      Variables$Query$UserProductGrouping._({
        r'userId': userId,
        r'groupBy': groupBy,
      });

  Variables$Query$UserProductGrouping._(this._$data);

  factory Variables$Query$UserProductGrouping.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$userId = data['userId'];
    result$data['userId'] = (l$userId as int);
    final l$groupBy = data['groupBy'];
    result$data['groupBy'] =
        fromJson$Enum$ProductGroupingEnum((l$groupBy as String));
    return Variables$Query$UserProductGrouping._(result$data);
  }

  Map<String, dynamic> _$data;

  int get userId => (_$data['userId'] as int);

  Enum$ProductGroupingEnum get groupBy =>
      (_$data['groupBy'] as Enum$ProductGroupingEnum);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$userId = userId;
    result$data['userId'] = l$userId;
    final l$groupBy = groupBy;
    result$data['groupBy'] = toJson$Enum$ProductGroupingEnum(l$groupBy);
    return result$data;
  }

  CopyWith$Variables$Query$UserProductGrouping<
          Variables$Query$UserProductGrouping>
      get copyWith => CopyWith$Variables$Query$UserProductGrouping(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$UserProductGrouping ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userId = userId;
    final lOther$userId = other.userId;
    if (l$userId != lOther$userId) {
      return false;
    }
    final l$groupBy = groupBy;
    final lOther$groupBy = other.groupBy;
    if (l$groupBy != lOther$groupBy) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$userId = userId;
    final l$groupBy = groupBy;
    return Object.hashAll([
      l$userId,
      l$groupBy,
    ]);
  }
}

abstract class CopyWith$Variables$Query$UserProductGrouping<TRes> {
  factory CopyWith$Variables$Query$UserProductGrouping(
    Variables$Query$UserProductGrouping instance,
    TRes Function(Variables$Query$UserProductGrouping) then,
  ) = _CopyWithImpl$Variables$Query$UserProductGrouping;

  factory CopyWith$Variables$Query$UserProductGrouping.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$UserProductGrouping;

  TRes call({
    int? userId,
    Enum$ProductGroupingEnum? groupBy,
  });
}

class _CopyWithImpl$Variables$Query$UserProductGrouping<TRes>
    implements CopyWith$Variables$Query$UserProductGrouping<TRes> {
  _CopyWithImpl$Variables$Query$UserProductGrouping(
    this._instance,
    this._then,
  );

  final Variables$Query$UserProductGrouping _instance;

  final TRes Function(Variables$Query$UserProductGrouping) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userId = _undefined,
    Object? groupBy = _undefined,
  }) =>
      _then(Variables$Query$UserProductGrouping._({
        ..._instance._$data,
        if (userId != _undefined && userId != null) 'userId': (userId as int),
        if (groupBy != _undefined && groupBy != null)
          'groupBy': (groupBy as Enum$ProductGroupingEnum),
      }));
}

class _CopyWithStubImpl$Variables$Query$UserProductGrouping<TRes>
    implements CopyWith$Variables$Query$UserProductGrouping<TRes> {
  _CopyWithStubImpl$Variables$Query$UserProductGrouping(this._res);

  TRes _res;

  call({
    int? userId,
    Enum$ProductGroupingEnum? groupBy,
  }) =>
      _res;
}

class Query$UserProductGrouping {
  Query$UserProductGrouping({
    this.userProductGrouping,
    this.$__typename = 'Query',
  });

  factory Query$UserProductGrouping.fromJson(Map<String, dynamic> json) {
    final l$userProductGrouping = json['userProductGrouping'];
    final l$$__typename = json['__typename'];
    return Query$UserProductGrouping(
      userProductGrouping: (l$userProductGrouping as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$UserProductGrouping$userProductGrouping.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$UserProductGrouping$userProductGrouping?>?
      userProductGrouping;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userProductGrouping = userProductGrouping;
    _resultData['userProductGrouping'] =
        l$userProductGrouping?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userProductGrouping = userProductGrouping;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userProductGrouping == null
          ? null
          : Object.hashAll(l$userProductGrouping.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserProductGrouping ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userProductGrouping = userProductGrouping;
    final lOther$userProductGrouping = other.userProductGrouping;
    if (l$userProductGrouping != null && lOther$userProductGrouping != null) {
      if (l$userProductGrouping.length != lOther$userProductGrouping.length) {
        return false;
      }
      for (int i = 0; i < l$userProductGrouping.length; i++) {
        final l$userProductGrouping$entry = l$userProductGrouping[i];
        final lOther$userProductGrouping$entry = lOther$userProductGrouping[i];
        if (l$userProductGrouping$entry != lOther$userProductGrouping$entry) {
          return false;
        }
      }
    } else if (l$userProductGrouping != lOther$userProductGrouping) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserProductGrouping
    on Query$UserProductGrouping {
  CopyWith$Query$UserProductGrouping<Query$UserProductGrouping> get copyWith =>
      CopyWith$Query$UserProductGrouping(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$UserProductGrouping<TRes> {
  factory CopyWith$Query$UserProductGrouping(
    Query$UserProductGrouping instance,
    TRes Function(Query$UserProductGrouping) then,
  ) = _CopyWithImpl$Query$UserProductGrouping;

  factory CopyWith$Query$UserProductGrouping.stub(TRes res) =
      _CopyWithStubImpl$Query$UserProductGrouping;

  TRes call({
    List<Query$UserProductGrouping$userProductGrouping?>? userProductGrouping,
    String? $__typename,
  });
  TRes userProductGrouping(
      Iterable<Query$UserProductGrouping$userProductGrouping?>? Function(
              Iterable<
                  CopyWith$Query$UserProductGrouping$userProductGrouping<
                      Query$UserProductGrouping$userProductGrouping>?>?)
          _fn);
}

class _CopyWithImpl$Query$UserProductGrouping<TRes>
    implements CopyWith$Query$UserProductGrouping<TRes> {
  _CopyWithImpl$Query$UserProductGrouping(
    this._instance,
    this._then,
  );

  final Query$UserProductGrouping _instance;

  final TRes Function(Query$UserProductGrouping) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userProductGrouping = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserProductGrouping(
        userProductGrouping: userProductGrouping == _undefined
            ? _instance.userProductGrouping
            : (userProductGrouping
                as List<Query$UserProductGrouping$userProductGrouping?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes userProductGrouping(
          Iterable<Query$UserProductGrouping$userProductGrouping?>? Function(
                  Iterable<
                      CopyWith$Query$UserProductGrouping$userProductGrouping<
                          Query$UserProductGrouping$userProductGrouping>?>?)
              _fn) =>
      call(
          userProductGrouping:
              _fn(_instance.userProductGrouping?.map((e) => e == null
                  ? null
                  : CopyWith$Query$UserProductGrouping$userProductGrouping(
                      e,
                      (i) => i,
                    )))?.toList());
}

class _CopyWithStubImpl$Query$UserProductGrouping<TRes>
    implements CopyWith$Query$UserProductGrouping<TRes> {
  _CopyWithStubImpl$Query$UserProductGrouping(this._res);

  TRes _res;

  call({
    List<Query$UserProductGrouping$userProductGrouping?>? userProductGrouping,
    String? $__typename,
  }) =>
      _res;

  userProductGrouping(_fn) => _res;
}

const documentNodeQueryUserProductGrouping = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'UserProductGrouping'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'userId')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'groupBy')),
        type: NamedTypeNode(
          name: NameNode(value: 'ProductGroupingEnum'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'userProductGrouping'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'userId'),
            value: VariableNode(name: NameNode(value: 'userId')),
          ),
          ArgumentNode(
            name: NameNode(value: 'groupBy'),
            value: VariableNode(name: NameNode(value: 'groupBy')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'count'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$UserProductGrouping _parserFn$Query$UserProductGrouping(
        Map<String, dynamic> data) =>
    Query$UserProductGrouping.fromJson(data);
typedef OnQueryComplete$Query$UserProductGrouping = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$UserProductGrouping?,
);

class Options$Query$UserProductGrouping
    extends graphql.QueryOptions<Query$UserProductGrouping> {
  Options$Query$UserProductGrouping({
    String? operationName,
    required Variables$Query$UserProductGrouping variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$UserProductGrouping? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$UserProductGrouping? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null
                        ? null
                        : _parserFn$Query$UserProductGrouping(data),
                  ),
          onError: onError,
          document: documentNodeQueryUserProductGrouping,
          parserFn: _parserFn$Query$UserProductGrouping,
        );

  final OnQueryComplete$Query$UserProductGrouping? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$UserProductGrouping
    extends graphql.WatchQueryOptions<Query$UserProductGrouping> {
  WatchOptions$Query$UserProductGrouping({
    String? operationName,
    required Variables$Query$UserProductGrouping variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$UserProductGrouping? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryUserProductGrouping,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$UserProductGrouping,
        );
}

class FetchMoreOptions$Query$UserProductGrouping
    extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$UserProductGrouping({
    required graphql.UpdateQuery updateQuery,
    required Variables$Query$UserProductGrouping variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables.toJson(),
          document: documentNodeQueryUserProductGrouping,
        );
}

extension ClientExtension$Query$UserProductGrouping on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$UserProductGrouping>>
      query$UserProductGrouping(
              Options$Query$UserProductGrouping options) async =>
          await this.query(options);
  graphql.ObservableQuery<Query$UserProductGrouping>
      watchQuery$UserProductGrouping(
              WatchOptions$Query$UserProductGrouping options) =>
          this.watchQuery(options);
  void writeQuery$UserProductGrouping({
    required Query$UserProductGrouping data,
    required Variables$Query$UserProductGrouping variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation:
              graphql.Operation(document: documentNodeQueryUserProductGrouping),
          variables: variables.toJson(),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$UserProductGrouping? readQuery$UserProductGrouping({
    required Variables$Query$UserProductGrouping variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation:
            graphql.Operation(document: documentNodeQueryUserProductGrouping),
        variables: variables.toJson(),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$UserProductGrouping.fromJson(result);
  }
}

class Query$UserProductGrouping$userProductGrouping {
  Query$UserProductGrouping$userProductGrouping({
    this.id,
    this.name,
    this.count,
    this.$__typename = 'CategoryGroupType',
  });

  factory Query$UserProductGrouping$userProductGrouping.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$count = json['count'];
    final l$$__typename = json['__typename'];
    return Query$UserProductGrouping$userProductGrouping(
      id: (l$id as int?),
      name: (l$name as String?),
      count: (l$count as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final int? count;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$count = count;
    _resultData['count'] = l$count;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$count = count;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$count,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserProductGrouping$userProductGrouping ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$count = count;
    final lOther$count = other.count;
    if (l$count != lOther$count) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserProductGrouping$userProductGrouping
    on Query$UserProductGrouping$userProductGrouping {
  CopyWith$Query$UserProductGrouping$userProductGrouping<
          Query$UserProductGrouping$userProductGrouping>
      get copyWith => CopyWith$Query$UserProductGrouping$userProductGrouping(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserProductGrouping$userProductGrouping<TRes> {
  factory CopyWith$Query$UserProductGrouping$userProductGrouping(
    Query$UserProductGrouping$userProductGrouping instance,
    TRes Function(Query$UserProductGrouping$userProductGrouping) then,
  ) = _CopyWithImpl$Query$UserProductGrouping$userProductGrouping;

  factory CopyWith$Query$UserProductGrouping$userProductGrouping.stub(
          TRes res) =
      _CopyWithStubImpl$Query$UserProductGrouping$userProductGrouping;

  TRes call({
    int? id,
    String? name,
    int? count,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$UserProductGrouping$userProductGrouping<TRes>
    implements CopyWith$Query$UserProductGrouping$userProductGrouping<TRes> {
  _CopyWithImpl$Query$UserProductGrouping$userProductGrouping(
    this._instance,
    this._then,
  );

  final Query$UserProductGrouping$userProductGrouping _instance;

  final TRes Function(Query$UserProductGrouping$userProductGrouping) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? count = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserProductGrouping$userProductGrouping(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        count: count == _undefined ? _instance.count : (count as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$UserProductGrouping$userProductGrouping<TRes>
    implements CopyWith$Query$UserProductGrouping$userProductGrouping<TRes> {
  _CopyWithStubImpl$Query$UserProductGrouping$userProductGrouping(this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    int? count,
    String? $__typename,
  }) =>
      _res;
}

class Query$NotificationPreference {
  Query$NotificationPreference({
    this.notificationPreference,
    this.$__typename = 'Query',
  });

  factory Query$NotificationPreference.fromJson(Map<String, dynamic> json) {
    final l$notificationPreference = json['notificationPreference'];
    final l$$__typename = json['__typename'];
    return Query$NotificationPreference(
      notificationPreference: l$notificationPreference == null
          ? null
          : Query$NotificationPreference$notificationPreference.fromJson(
              (l$notificationPreference as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final Query$NotificationPreference$notificationPreference?
      notificationPreference;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$notificationPreference = notificationPreference;
    _resultData['notificationPreference'] = l$notificationPreference?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$notificationPreference = notificationPreference;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$notificationPreference,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$NotificationPreference ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$notificationPreference = notificationPreference;
    final lOther$notificationPreference = other.notificationPreference;
    if (l$notificationPreference != lOther$notificationPreference) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$NotificationPreference
    on Query$NotificationPreference {
  CopyWith$Query$NotificationPreference<Query$NotificationPreference>
      get copyWith => CopyWith$Query$NotificationPreference(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$NotificationPreference<TRes> {
  factory CopyWith$Query$NotificationPreference(
    Query$NotificationPreference instance,
    TRes Function(Query$NotificationPreference) then,
  ) = _CopyWithImpl$Query$NotificationPreference;

  factory CopyWith$Query$NotificationPreference.stub(TRes res) =
      _CopyWithStubImpl$Query$NotificationPreference;

  TRes call({
    Query$NotificationPreference$notificationPreference? notificationPreference,
    String? $__typename,
  });
  CopyWith$Query$NotificationPreference$notificationPreference<TRes>
      get notificationPreference;
}

class _CopyWithImpl$Query$NotificationPreference<TRes>
    implements CopyWith$Query$NotificationPreference<TRes> {
  _CopyWithImpl$Query$NotificationPreference(
    this._instance,
    this._then,
  );

  final Query$NotificationPreference _instance;

  final TRes Function(Query$NotificationPreference) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? notificationPreference = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$NotificationPreference(
        notificationPreference: notificationPreference == _undefined
            ? _instance.notificationPreference
            : (notificationPreference
                as Query$NotificationPreference$notificationPreference?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$NotificationPreference$notificationPreference<TRes>
      get notificationPreference {
    final local$notificationPreference = _instance.notificationPreference;
    return local$notificationPreference == null
        ? CopyWith$Query$NotificationPreference$notificationPreference.stub(
            _then(_instance))
        : CopyWith$Query$NotificationPreference$notificationPreference(
            local$notificationPreference,
            (e) => call(notificationPreference: e));
  }
}

class _CopyWithStubImpl$Query$NotificationPreference<TRes>
    implements CopyWith$Query$NotificationPreference<TRes> {
  _CopyWithStubImpl$Query$NotificationPreference(this._res);

  TRes _res;

  call({
    Query$NotificationPreference$notificationPreference? notificationPreference,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$NotificationPreference$notificationPreference<TRes>
      get notificationPreference =>
          CopyWith$Query$NotificationPreference$notificationPreference.stub(
              _res);
}

const documentNodeQueryNotificationPreference = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'NotificationPreference'),
    variableDefinitions: [],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'notificationPreference'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'user'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'isPushNotification'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isEmailNotification'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'inappNotifications'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'emailNotifications'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$NotificationPreference _parserFn$Query$NotificationPreference(
        Map<String, dynamic> data) =>
    Query$NotificationPreference.fromJson(data);
typedef OnQueryComplete$Query$NotificationPreference = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$NotificationPreference?,
);

class Options$Query$NotificationPreference
    extends graphql.QueryOptions<Query$NotificationPreference> {
  Options$Query$NotificationPreference({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$NotificationPreference? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$NotificationPreference? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null
                        ? null
                        : _parserFn$Query$NotificationPreference(data),
                  ),
          onError: onError,
          document: documentNodeQueryNotificationPreference,
          parserFn: _parserFn$Query$NotificationPreference,
        );

  final OnQueryComplete$Query$NotificationPreference? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$NotificationPreference
    extends graphql.WatchQueryOptions<Query$NotificationPreference> {
  WatchOptions$Query$NotificationPreference({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$NotificationPreference? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryNotificationPreference,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$NotificationPreference,
        );
}

class FetchMoreOptions$Query$NotificationPreference
    extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$NotificationPreference(
      {required graphql.UpdateQuery updateQuery})
      : super(
          updateQuery: updateQuery,
          document: documentNodeQueryNotificationPreference,
        );
}

extension ClientExtension$Query$NotificationPreference
    on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$NotificationPreference>>
      query$NotificationPreference(
              [Options$Query$NotificationPreference? options]) async =>
          await this.query(options ?? Options$Query$NotificationPreference());
  graphql.ObservableQuery<
      Query$NotificationPreference> watchQuery$NotificationPreference(
          [WatchOptions$Query$NotificationPreference? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$NotificationPreference());
  void writeQuery$NotificationPreference({
    required Query$NotificationPreference data,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
            operation: graphql.Operation(
                document: documentNodeQueryNotificationPreference)),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$NotificationPreference? readQuery$NotificationPreference(
      {bool optimistic = true}) {
    final result = this.readQuery(
      graphql.Request(
          operation: graphql.Operation(
              document: documentNodeQueryNotificationPreference)),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Query$NotificationPreference.fromJson(result);
  }
}

class Query$NotificationPreference$notificationPreference {
  Query$NotificationPreference$notificationPreference({
    this.user,
    required this.isPushNotification,
    required this.isEmailNotification,
    required this.inappNotifications,
    required this.emailNotifications,
    this.$__typename = 'NotificationPreferenceType',
  });

  factory Query$NotificationPreference$notificationPreference.fromJson(
      Map<String, dynamic> json) {
    final l$user = json['user'];
    final l$isPushNotification = json['isPushNotification'];
    final l$isEmailNotification = json['isEmailNotification'];
    final l$inappNotifications = json['inappNotifications'];
    final l$emailNotifications = json['emailNotifications'];
    final l$$__typename = json['__typename'];
    return Query$NotificationPreference$notificationPreference(
      user: l$user == null
          ? null
          : Query$NotificationPreference$notificationPreference$user.fromJson(
              (l$user as Map<String, dynamic>)),
      isPushNotification: (l$isPushNotification as bool),
      isEmailNotification: (l$isEmailNotification as bool),
      inappNotifications: (l$inappNotifications as String),
      emailNotifications: (l$emailNotifications as String),
      $__typename: (l$$__typename as String),
    );
  }

  final Query$NotificationPreference$notificationPreference$user? user;

  final bool isPushNotification;

  final bool isEmailNotification;

  final String inappNotifications;

  final String emailNotifications;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$user = user;
    _resultData['user'] = l$user?.toJson();
    final l$isPushNotification = isPushNotification;
    _resultData['isPushNotification'] = l$isPushNotification;
    final l$isEmailNotification = isEmailNotification;
    _resultData['isEmailNotification'] = l$isEmailNotification;
    final l$inappNotifications = inappNotifications;
    _resultData['inappNotifications'] = l$inappNotifications;
    final l$emailNotifications = emailNotifications;
    _resultData['emailNotifications'] = l$emailNotifications;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$user = user;
    final l$isPushNotification = isPushNotification;
    final l$isEmailNotification = isEmailNotification;
    final l$inappNotifications = inappNotifications;
    final l$emailNotifications = emailNotifications;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$user,
      l$isPushNotification,
      l$isEmailNotification,
      l$inappNotifications,
      l$emailNotifications,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$NotificationPreference$notificationPreference ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$user = user;
    final lOther$user = other.user;
    if (l$user != lOther$user) {
      return false;
    }
    final l$isPushNotification = isPushNotification;
    final lOther$isPushNotification = other.isPushNotification;
    if (l$isPushNotification != lOther$isPushNotification) {
      return false;
    }
    final l$isEmailNotification = isEmailNotification;
    final lOther$isEmailNotification = other.isEmailNotification;
    if (l$isEmailNotification != lOther$isEmailNotification) {
      return false;
    }
    final l$inappNotifications = inappNotifications;
    final lOther$inappNotifications = other.inappNotifications;
    if (l$inappNotifications != lOther$inappNotifications) {
      return false;
    }
    final l$emailNotifications = emailNotifications;
    final lOther$emailNotifications = other.emailNotifications;
    if (l$emailNotifications != lOther$emailNotifications) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$NotificationPreference$notificationPreference
    on Query$NotificationPreference$notificationPreference {
  CopyWith$Query$NotificationPreference$notificationPreference<
          Query$NotificationPreference$notificationPreference>
      get copyWith =>
          CopyWith$Query$NotificationPreference$notificationPreference(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$NotificationPreference$notificationPreference<
    TRes> {
  factory CopyWith$Query$NotificationPreference$notificationPreference(
    Query$NotificationPreference$notificationPreference instance,
    TRes Function(Query$NotificationPreference$notificationPreference) then,
  ) = _CopyWithImpl$Query$NotificationPreference$notificationPreference;

  factory CopyWith$Query$NotificationPreference$notificationPreference.stub(
          TRes res) =
      _CopyWithStubImpl$Query$NotificationPreference$notificationPreference;

  TRes call({
    Query$NotificationPreference$notificationPreference$user? user,
    bool? isPushNotification,
    bool? isEmailNotification,
    String? inappNotifications,
    String? emailNotifications,
    String? $__typename,
  });
  CopyWith$Query$NotificationPreference$notificationPreference$user<TRes>
      get user;
}

class _CopyWithImpl$Query$NotificationPreference$notificationPreference<TRes>
    implements
        CopyWith$Query$NotificationPreference$notificationPreference<TRes> {
  _CopyWithImpl$Query$NotificationPreference$notificationPreference(
    this._instance,
    this._then,
  );

  final Query$NotificationPreference$notificationPreference _instance;

  final TRes Function(Query$NotificationPreference$notificationPreference)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? user = _undefined,
    Object? isPushNotification = _undefined,
    Object? isEmailNotification = _undefined,
    Object? inappNotifications = _undefined,
    Object? emailNotifications = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$NotificationPreference$notificationPreference(
        user: user == _undefined
            ? _instance.user
            : (user
                as Query$NotificationPreference$notificationPreference$user?),
        isPushNotification:
            isPushNotification == _undefined || isPushNotification == null
                ? _instance.isPushNotification
                : (isPushNotification as bool),
        isEmailNotification:
            isEmailNotification == _undefined || isEmailNotification == null
                ? _instance.isEmailNotification
                : (isEmailNotification as bool),
        inappNotifications:
            inappNotifications == _undefined || inappNotifications == null
                ? _instance.inappNotifications
                : (inappNotifications as String),
        emailNotifications:
            emailNotifications == _undefined || emailNotifications == null
                ? _instance.emailNotifications
                : (emailNotifications as String),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$NotificationPreference$notificationPreference$user<TRes>
      get user {
    final local$user = _instance.user;
    return local$user == null
        ? CopyWith$Query$NotificationPreference$notificationPreference$user
            .stub(_then(_instance))
        : CopyWith$Query$NotificationPreference$notificationPreference$user(
            local$user, (e) => call(user: e));
  }
}

class _CopyWithStubImpl$Query$NotificationPreference$notificationPreference<
        TRes>
    implements
        CopyWith$Query$NotificationPreference$notificationPreference<TRes> {
  _CopyWithStubImpl$Query$NotificationPreference$notificationPreference(
      this._res);

  TRes _res;

  call({
    Query$NotificationPreference$notificationPreference$user? user,
    bool? isPushNotification,
    bool? isEmailNotification,
    String? inappNotifications,
    String? emailNotifications,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$NotificationPreference$notificationPreference$user<TRes>
      get user =>
          CopyWith$Query$NotificationPreference$notificationPreference$user
              .stub(_res);
}

class Query$NotificationPreference$notificationPreference$user {
  Query$NotificationPreference$notificationPreference$user({
    this.id,
    this.username,
    this.$__typename = 'UserType',
  });

  factory Query$NotificationPreference$notificationPreference$user.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$$__typename = json['__typename'];
    return Query$NotificationPreference$notificationPreference$user(
      id: (l$id as int?),
      username: (l$username as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$NotificationPreference$notificationPreference$user ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$NotificationPreference$notificationPreference$user
    on Query$NotificationPreference$notificationPreference$user {
  CopyWith$Query$NotificationPreference$notificationPreference$user<
          Query$NotificationPreference$notificationPreference$user>
      get copyWith =>
          CopyWith$Query$NotificationPreference$notificationPreference$user(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$NotificationPreference$notificationPreference$user<
    TRes> {
  factory CopyWith$Query$NotificationPreference$notificationPreference$user(
    Query$NotificationPreference$notificationPreference$user instance,
    TRes Function(Query$NotificationPreference$notificationPreference$user)
        then,
  ) = _CopyWithImpl$Query$NotificationPreference$notificationPreference$user;

  factory CopyWith$Query$NotificationPreference$notificationPreference$user.stub(
          TRes res) =
      _CopyWithStubImpl$Query$NotificationPreference$notificationPreference$user;

  TRes call({
    int? id,
    String? username,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$NotificationPreference$notificationPreference$user<
        TRes>
    implements
        CopyWith$Query$NotificationPreference$notificationPreference$user<
            TRes> {
  _CopyWithImpl$Query$NotificationPreference$notificationPreference$user(
    this._instance,
    this._then,
  );

  final Query$NotificationPreference$notificationPreference$user _instance;

  final TRes Function(Query$NotificationPreference$notificationPreference$user)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$NotificationPreference$notificationPreference$user(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$NotificationPreference$notificationPreference$user<
        TRes>
    implements
        CopyWith$Query$NotificationPreference$notificationPreference$user<
            TRes> {
  _CopyWithStubImpl$Query$NotificationPreference$notificationPreference$user(
      this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? $__typename,
  }) =>
      _res;
}

class Query$UserEarnings {
  Query$UserEarnings({
    this.userEarnings,
    this.$__typename = 'Query',
  });

  factory Query$UserEarnings.fromJson(Map<String, dynamic> json) {
    final l$userEarnings = json['userEarnings'];
    final l$$__typename = json['__typename'];
    return Query$UserEarnings(
      userEarnings: l$userEarnings == null
          ? null
          : Query$UserEarnings$userEarnings.fromJson(
              (l$userEarnings as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final Query$UserEarnings$userEarnings? userEarnings;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userEarnings = userEarnings;
    _resultData['userEarnings'] = l$userEarnings?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userEarnings = userEarnings;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userEarnings,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserEarnings || runtimeType != other.runtimeType) {
      return false;
    }
    final l$userEarnings = userEarnings;
    final lOther$userEarnings = other.userEarnings;
    if (l$userEarnings != lOther$userEarnings) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserEarnings on Query$UserEarnings {
  CopyWith$Query$UserEarnings<Query$UserEarnings> get copyWith =>
      CopyWith$Query$UserEarnings(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$UserEarnings<TRes> {
  factory CopyWith$Query$UserEarnings(
    Query$UserEarnings instance,
    TRes Function(Query$UserEarnings) then,
  ) = _CopyWithImpl$Query$UserEarnings;

  factory CopyWith$Query$UserEarnings.stub(TRes res) =
      _CopyWithStubImpl$Query$UserEarnings;

  TRes call({
    Query$UserEarnings$userEarnings? userEarnings,
    String? $__typename,
  });
  CopyWith$Query$UserEarnings$userEarnings<TRes> get userEarnings;
}

class _CopyWithImpl$Query$UserEarnings<TRes>
    implements CopyWith$Query$UserEarnings<TRes> {
  _CopyWithImpl$Query$UserEarnings(
    this._instance,
    this._then,
  );

  final Query$UserEarnings _instance;

  final TRes Function(Query$UserEarnings) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userEarnings = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserEarnings(
        userEarnings: userEarnings == _undefined
            ? _instance.userEarnings
            : (userEarnings as Query$UserEarnings$userEarnings?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$UserEarnings$userEarnings<TRes> get userEarnings {
    final local$userEarnings = _instance.userEarnings;
    return local$userEarnings == null
        ? CopyWith$Query$UserEarnings$userEarnings.stub(_then(_instance))
        : CopyWith$Query$UserEarnings$userEarnings(
            local$userEarnings, (e) => call(userEarnings: e));
  }
}

class _CopyWithStubImpl$Query$UserEarnings<TRes>
    implements CopyWith$Query$UserEarnings<TRes> {
  _CopyWithStubImpl$Query$UserEarnings(this._res);

  TRes _res;

  call({
    Query$UserEarnings$userEarnings? userEarnings,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$UserEarnings$userEarnings<TRes> get userEarnings =>
      CopyWith$Query$UserEarnings$userEarnings.stub(_res);
}

const documentNodeQueryUserEarnings = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'UserEarnings'),
    variableDefinitions: [],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'userEarnings'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'networth'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'pendingPayments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'quantity'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'value'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'totalEarnings'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'quantity'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'value'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'earningsInMonth'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'quantity'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'value'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'completedPayments'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'quantity'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'value'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$UserEarnings _parserFn$Query$UserEarnings(Map<String, dynamic> data) =>
    Query$UserEarnings.fromJson(data);
typedef OnQueryComplete$Query$UserEarnings = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$UserEarnings?,
);

class Options$Query$UserEarnings
    extends graphql.QueryOptions<Query$UserEarnings> {
  Options$Query$UserEarnings({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$UserEarnings? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$UserEarnings? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$UserEarnings(data),
                  ),
          onError: onError,
          document: documentNodeQueryUserEarnings,
          parserFn: _parserFn$Query$UserEarnings,
        );

  final OnQueryComplete$Query$UserEarnings? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$UserEarnings
    extends graphql.WatchQueryOptions<Query$UserEarnings> {
  WatchOptions$Query$UserEarnings({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$UserEarnings? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryUserEarnings,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$UserEarnings,
        );
}

class FetchMoreOptions$Query$UserEarnings extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$UserEarnings(
      {required graphql.UpdateQuery updateQuery})
      : super(
          updateQuery: updateQuery,
          document: documentNodeQueryUserEarnings,
        );
}

extension ClientExtension$Query$UserEarnings on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$UserEarnings>> query$UserEarnings(
          [Options$Query$UserEarnings? options]) async =>
      await this.query(options ?? Options$Query$UserEarnings());
  graphql.ObservableQuery<Query$UserEarnings> watchQuery$UserEarnings(
          [WatchOptions$Query$UserEarnings? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$UserEarnings());
  void writeQuery$UserEarnings({
    required Query$UserEarnings data,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
            operation:
                graphql.Operation(document: documentNodeQueryUserEarnings)),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$UserEarnings? readQuery$UserEarnings({bool optimistic = true}) {
    final result = this.readQuery(
      graphql.Request(
          operation:
              graphql.Operation(document: documentNodeQueryUserEarnings)),
      optimistic: optimistic,
    );
    return result == null ? null : Query$UserEarnings.fromJson(result);
  }
}

class Query$UserEarnings$userEarnings {
  Query$UserEarnings$userEarnings({
    this.networth,
    this.pendingPayments,
    this.totalEarnings,
    this.earningsInMonth,
    this.completedPayments,
    this.$__typename = 'EarningType',
  });

  factory Query$UserEarnings$userEarnings.fromJson(Map<String, dynamic> json) {
    final l$networth = json['networth'];
    final l$pendingPayments = json['pendingPayments'];
    final l$totalEarnings = json['totalEarnings'];
    final l$earningsInMonth = json['earningsInMonth'];
    final l$completedPayments = json['completedPayments'];
    final l$$__typename = json['__typename'];
    return Query$UserEarnings$userEarnings(
      networth: (l$networth as num?)?.toDouble(),
      pendingPayments: l$pendingPayments == null
          ? null
          : Query$UserEarnings$userEarnings$pendingPayments.fromJson(
              (l$pendingPayments as Map<String, dynamic>)),
      totalEarnings: l$totalEarnings == null
          ? null
          : Query$UserEarnings$userEarnings$totalEarnings.fromJson(
              (l$totalEarnings as Map<String, dynamic>)),
      earningsInMonth: l$earningsInMonth == null
          ? null
          : Query$UserEarnings$userEarnings$earningsInMonth.fromJson(
              (l$earningsInMonth as Map<String, dynamic>)),
      completedPayments: l$completedPayments == null
          ? null
          : Query$UserEarnings$userEarnings$completedPayments.fromJson(
              (l$completedPayments as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final double? networth;

  final Query$UserEarnings$userEarnings$pendingPayments? pendingPayments;

  final Query$UserEarnings$userEarnings$totalEarnings? totalEarnings;

  final Query$UserEarnings$userEarnings$earningsInMonth? earningsInMonth;

  final Query$UserEarnings$userEarnings$completedPayments? completedPayments;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$networth = networth;
    _resultData['networth'] = l$networth;
    final l$pendingPayments = pendingPayments;
    _resultData['pendingPayments'] = l$pendingPayments?.toJson();
    final l$totalEarnings = totalEarnings;
    _resultData['totalEarnings'] = l$totalEarnings?.toJson();
    final l$earningsInMonth = earningsInMonth;
    _resultData['earningsInMonth'] = l$earningsInMonth?.toJson();
    final l$completedPayments = completedPayments;
    _resultData['completedPayments'] = l$completedPayments?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$networth = networth;
    final l$pendingPayments = pendingPayments;
    final l$totalEarnings = totalEarnings;
    final l$earningsInMonth = earningsInMonth;
    final l$completedPayments = completedPayments;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$networth,
      l$pendingPayments,
      l$totalEarnings,
      l$earningsInMonth,
      l$completedPayments,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserEarnings$userEarnings ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$networth = networth;
    final lOther$networth = other.networth;
    if (l$networth != lOther$networth) {
      return false;
    }
    final l$pendingPayments = pendingPayments;
    final lOther$pendingPayments = other.pendingPayments;
    if (l$pendingPayments != lOther$pendingPayments) {
      return false;
    }
    final l$totalEarnings = totalEarnings;
    final lOther$totalEarnings = other.totalEarnings;
    if (l$totalEarnings != lOther$totalEarnings) {
      return false;
    }
    final l$earningsInMonth = earningsInMonth;
    final lOther$earningsInMonth = other.earningsInMonth;
    if (l$earningsInMonth != lOther$earningsInMonth) {
      return false;
    }
    final l$completedPayments = completedPayments;
    final lOther$completedPayments = other.completedPayments;
    if (l$completedPayments != lOther$completedPayments) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserEarnings$userEarnings
    on Query$UserEarnings$userEarnings {
  CopyWith$Query$UserEarnings$userEarnings<Query$UserEarnings$userEarnings>
      get copyWith => CopyWith$Query$UserEarnings$userEarnings(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserEarnings$userEarnings<TRes> {
  factory CopyWith$Query$UserEarnings$userEarnings(
    Query$UserEarnings$userEarnings instance,
    TRes Function(Query$UserEarnings$userEarnings) then,
  ) = _CopyWithImpl$Query$UserEarnings$userEarnings;

  factory CopyWith$Query$UserEarnings$userEarnings.stub(TRes res) =
      _CopyWithStubImpl$Query$UserEarnings$userEarnings;

  TRes call({
    double? networth,
    Query$UserEarnings$userEarnings$pendingPayments? pendingPayments,
    Query$UserEarnings$userEarnings$totalEarnings? totalEarnings,
    Query$UserEarnings$userEarnings$earningsInMonth? earningsInMonth,
    Query$UserEarnings$userEarnings$completedPayments? completedPayments,
    String? $__typename,
  });
  CopyWith$Query$UserEarnings$userEarnings$pendingPayments<TRes>
      get pendingPayments;
  CopyWith$Query$UserEarnings$userEarnings$totalEarnings<TRes>
      get totalEarnings;
  CopyWith$Query$UserEarnings$userEarnings$earningsInMonth<TRes>
      get earningsInMonth;
  CopyWith$Query$UserEarnings$userEarnings$completedPayments<TRes>
      get completedPayments;
}

class _CopyWithImpl$Query$UserEarnings$userEarnings<TRes>
    implements CopyWith$Query$UserEarnings$userEarnings<TRes> {
  _CopyWithImpl$Query$UserEarnings$userEarnings(
    this._instance,
    this._then,
  );

  final Query$UserEarnings$userEarnings _instance;

  final TRes Function(Query$UserEarnings$userEarnings) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? networth = _undefined,
    Object? pendingPayments = _undefined,
    Object? totalEarnings = _undefined,
    Object? earningsInMonth = _undefined,
    Object? completedPayments = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserEarnings$userEarnings(
        networth:
            networth == _undefined ? _instance.networth : (networth as double?),
        pendingPayments: pendingPayments == _undefined
            ? _instance.pendingPayments
            : (pendingPayments
                as Query$UserEarnings$userEarnings$pendingPayments?),
        totalEarnings: totalEarnings == _undefined
            ? _instance.totalEarnings
            : (totalEarnings as Query$UserEarnings$userEarnings$totalEarnings?),
        earningsInMonth: earningsInMonth == _undefined
            ? _instance.earningsInMonth
            : (earningsInMonth
                as Query$UserEarnings$userEarnings$earningsInMonth?),
        completedPayments: completedPayments == _undefined
            ? _instance.completedPayments
            : (completedPayments
                as Query$UserEarnings$userEarnings$completedPayments?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$UserEarnings$userEarnings$pendingPayments<TRes>
      get pendingPayments {
    final local$pendingPayments = _instance.pendingPayments;
    return local$pendingPayments == null
        ? CopyWith$Query$UserEarnings$userEarnings$pendingPayments.stub(
            _then(_instance))
        : CopyWith$Query$UserEarnings$userEarnings$pendingPayments(
            local$pendingPayments, (e) => call(pendingPayments: e));
  }

  CopyWith$Query$UserEarnings$userEarnings$totalEarnings<TRes>
      get totalEarnings {
    final local$totalEarnings = _instance.totalEarnings;
    return local$totalEarnings == null
        ? CopyWith$Query$UserEarnings$userEarnings$totalEarnings.stub(
            _then(_instance))
        : CopyWith$Query$UserEarnings$userEarnings$totalEarnings(
            local$totalEarnings, (e) => call(totalEarnings: e));
  }

  CopyWith$Query$UserEarnings$userEarnings$earningsInMonth<TRes>
      get earningsInMonth {
    final local$earningsInMonth = _instance.earningsInMonth;
    return local$earningsInMonth == null
        ? CopyWith$Query$UserEarnings$userEarnings$earningsInMonth.stub(
            _then(_instance))
        : CopyWith$Query$UserEarnings$userEarnings$earningsInMonth(
            local$earningsInMonth, (e) => call(earningsInMonth: e));
  }

  CopyWith$Query$UserEarnings$userEarnings$completedPayments<TRes>
      get completedPayments {
    final local$completedPayments = _instance.completedPayments;
    return local$completedPayments == null
        ? CopyWith$Query$UserEarnings$userEarnings$completedPayments.stub(
            _then(_instance))
        : CopyWith$Query$UserEarnings$userEarnings$completedPayments(
            local$completedPayments, (e) => call(completedPayments: e));
  }
}

class _CopyWithStubImpl$Query$UserEarnings$userEarnings<TRes>
    implements CopyWith$Query$UserEarnings$userEarnings<TRes> {
  _CopyWithStubImpl$Query$UserEarnings$userEarnings(this._res);

  TRes _res;

  call({
    double? networth,
    Query$UserEarnings$userEarnings$pendingPayments? pendingPayments,
    Query$UserEarnings$userEarnings$totalEarnings? totalEarnings,
    Query$UserEarnings$userEarnings$earningsInMonth? earningsInMonth,
    Query$UserEarnings$userEarnings$completedPayments? completedPayments,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$UserEarnings$userEarnings$pendingPayments<TRes>
      get pendingPayments =>
          CopyWith$Query$UserEarnings$userEarnings$pendingPayments.stub(_res);

  CopyWith$Query$UserEarnings$userEarnings$totalEarnings<TRes>
      get totalEarnings =>
          CopyWith$Query$UserEarnings$userEarnings$totalEarnings.stub(_res);

  CopyWith$Query$UserEarnings$userEarnings$earningsInMonth<TRes>
      get earningsInMonth =>
          CopyWith$Query$UserEarnings$userEarnings$earningsInMonth.stub(_res);

  CopyWith$Query$UserEarnings$userEarnings$completedPayments<TRes>
      get completedPayments =>
          CopyWith$Query$UserEarnings$userEarnings$completedPayments.stub(_res);
}

class Query$UserEarnings$userEarnings$pendingPayments {
  Query$UserEarnings$userEarnings$pendingPayments({
    this.quantity,
    this.value,
    this.$__typename = 'QuantityValuePair',
  });

  factory Query$UserEarnings$userEarnings$pendingPayments.fromJson(
      Map<String, dynamic> json) {
    final l$quantity = json['quantity'];
    final l$value = json['value'];
    final l$$__typename = json['__typename'];
    return Query$UserEarnings$userEarnings$pendingPayments(
      quantity: (l$quantity as int?),
      value: (l$value as num?)?.toDouble(),
      $__typename: (l$$__typename as String),
    );
  }

  final int? quantity;

  final double? value;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$quantity = quantity;
    _resultData['quantity'] = l$quantity;
    final l$value = value;
    _resultData['value'] = l$value;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$quantity = quantity;
    final l$value = value;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$quantity,
      l$value,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserEarnings$userEarnings$pendingPayments ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$quantity = quantity;
    final lOther$quantity = other.quantity;
    if (l$quantity != lOther$quantity) {
      return false;
    }
    final l$value = value;
    final lOther$value = other.value;
    if (l$value != lOther$value) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserEarnings$userEarnings$pendingPayments
    on Query$UserEarnings$userEarnings$pendingPayments {
  CopyWith$Query$UserEarnings$userEarnings$pendingPayments<
          Query$UserEarnings$userEarnings$pendingPayments>
      get copyWith => CopyWith$Query$UserEarnings$userEarnings$pendingPayments(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserEarnings$userEarnings$pendingPayments<TRes> {
  factory CopyWith$Query$UserEarnings$userEarnings$pendingPayments(
    Query$UserEarnings$userEarnings$pendingPayments instance,
    TRes Function(Query$UserEarnings$userEarnings$pendingPayments) then,
  ) = _CopyWithImpl$Query$UserEarnings$userEarnings$pendingPayments;

  factory CopyWith$Query$UserEarnings$userEarnings$pendingPayments.stub(
          TRes res) =
      _CopyWithStubImpl$Query$UserEarnings$userEarnings$pendingPayments;

  TRes call({
    int? quantity,
    double? value,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$UserEarnings$userEarnings$pendingPayments<TRes>
    implements CopyWith$Query$UserEarnings$userEarnings$pendingPayments<TRes> {
  _CopyWithImpl$Query$UserEarnings$userEarnings$pendingPayments(
    this._instance,
    this._then,
  );

  final Query$UserEarnings$userEarnings$pendingPayments _instance;

  final TRes Function(Query$UserEarnings$userEarnings$pendingPayments) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? quantity = _undefined,
    Object? value = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserEarnings$userEarnings$pendingPayments(
        quantity:
            quantity == _undefined ? _instance.quantity : (quantity as int?),
        value: value == _undefined ? _instance.value : (value as double?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$UserEarnings$userEarnings$pendingPayments<TRes>
    implements CopyWith$Query$UserEarnings$userEarnings$pendingPayments<TRes> {
  _CopyWithStubImpl$Query$UserEarnings$userEarnings$pendingPayments(this._res);

  TRes _res;

  call({
    int? quantity,
    double? value,
    String? $__typename,
  }) =>
      _res;
}

class Query$UserEarnings$userEarnings$totalEarnings {
  Query$UserEarnings$userEarnings$totalEarnings({
    this.quantity,
    this.value,
    this.$__typename = 'QuantityValuePair',
  });

  factory Query$UserEarnings$userEarnings$totalEarnings.fromJson(
      Map<String, dynamic> json) {
    final l$quantity = json['quantity'];
    final l$value = json['value'];
    final l$$__typename = json['__typename'];
    return Query$UserEarnings$userEarnings$totalEarnings(
      quantity: (l$quantity as int?),
      value: (l$value as num?)?.toDouble(),
      $__typename: (l$$__typename as String),
    );
  }

  final int? quantity;

  final double? value;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$quantity = quantity;
    _resultData['quantity'] = l$quantity;
    final l$value = value;
    _resultData['value'] = l$value;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$quantity = quantity;
    final l$value = value;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$quantity,
      l$value,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserEarnings$userEarnings$totalEarnings ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$quantity = quantity;
    final lOther$quantity = other.quantity;
    if (l$quantity != lOther$quantity) {
      return false;
    }
    final l$value = value;
    final lOther$value = other.value;
    if (l$value != lOther$value) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserEarnings$userEarnings$totalEarnings
    on Query$UserEarnings$userEarnings$totalEarnings {
  CopyWith$Query$UserEarnings$userEarnings$totalEarnings<
          Query$UserEarnings$userEarnings$totalEarnings>
      get copyWith => CopyWith$Query$UserEarnings$userEarnings$totalEarnings(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserEarnings$userEarnings$totalEarnings<TRes> {
  factory CopyWith$Query$UserEarnings$userEarnings$totalEarnings(
    Query$UserEarnings$userEarnings$totalEarnings instance,
    TRes Function(Query$UserEarnings$userEarnings$totalEarnings) then,
  ) = _CopyWithImpl$Query$UserEarnings$userEarnings$totalEarnings;

  factory CopyWith$Query$UserEarnings$userEarnings$totalEarnings.stub(
          TRes res) =
      _CopyWithStubImpl$Query$UserEarnings$userEarnings$totalEarnings;

  TRes call({
    int? quantity,
    double? value,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$UserEarnings$userEarnings$totalEarnings<TRes>
    implements CopyWith$Query$UserEarnings$userEarnings$totalEarnings<TRes> {
  _CopyWithImpl$Query$UserEarnings$userEarnings$totalEarnings(
    this._instance,
    this._then,
  );

  final Query$UserEarnings$userEarnings$totalEarnings _instance;

  final TRes Function(Query$UserEarnings$userEarnings$totalEarnings) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? quantity = _undefined,
    Object? value = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserEarnings$userEarnings$totalEarnings(
        quantity:
            quantity == _undefined ? _instance.quantity : (quantity as int?),
        value: value == _undefined ? _instance.value : (value as double?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$UserEarnings$userEarnings$totalEarnings<TRes>
    implements CopyWith$Query$UserEarnings$userEarnings$totalEarnings<TRes> {
  _CopyWithStubImpl$Query$UserEarnings$userEarnings$totalEarnings(this._res);

  TRes _res;

  call({
    int? quantity,
    double? value,
    String? $__typename,
  }) =>
      _res;
}

class Query$UserEarnings$userEarnings$earningsInMonth {
  Query$UserEarnings$userEarnings$earningsInMonth({
    this.quantity,
    this.value,
    this.$__typename = 'QuantityValuePair',
  });

  factory Query$UserEarnings$userEarnings$earningsInMonth.fromJson(
      Map<String, dynamic> json) {
    final l$quantity = json['quantity'];
    final l$value = json['value'];
    final l$$__typename = json['__typename'];
    return Query$UserEarnings$userEarnings$earningsInMonth(
      quantity: (l$quantity as int?),
      value: (l$value as num?)?.toDouble(),
      $__typename: (l$$__typename as String),
    );
  }

  final int? quantity;

  final double? value;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$quantity = quantity;
    _resultData['quantity'] = l$quantity;
    final l$value = value;
    _resultData['value'] = l$value;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$quantity = quantity;
    final l$value = value;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$quantity,
      l$value,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserEarnings$userEarnings$earningsInMonth ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$quantity = quantity;
    final lOther$quantity = other.quantity;
    if (l$quantity != lOther$quantity) {
      return false;
    }
    final l$value = value;
    final lOther$value = other.value;
    if (l$value != lOther$value) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserEarnings$userEarnings$earningsInMonth
    on Query$UserEarnings$userEarnings$earningsInMonth {
  CopyWith$Query$UserEarnings$userEarnings$earningsInMonth<
          Query$UserEarnings$userEarnings$earningsInMonth>
      get copyWith => CopyWith$Query$UserEarnings$userEarnings$earningsInMonth(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserEarnings$userEarnings$earningsInMonth<TRes> {
  factory CopyWith$Query$UserEarnings$userEarnings$earningsInMonth(
    Query$UserEarnings$userEarnings$earningsInMonth instance,
    TRes Function(Query$UserEarnings$userEarnings$earningsInMonth) then,
  ) = _CopyWithImpl$Query$UserEarnings$userEarnings$earningsInMonth;

  factory CopyWith$Query$UserEarnings$userEarnings$earningsInMonth.stub(
          TRes res) =
      _CopyWithStubImpl$Query$UserEarnings$userEarnings$earningsInMonth;

  TRes call({
    int? quantity,
    double? value,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$UserEarnings$userEarnings$earningsInMonth<TRes>
    implements CopyWith$Query$UserEarnings$userEarnings$earningsInMonth<TRes> {
  _CopyWithImpl$Query$UserEarnings$userEarnings$earningsInMonth(
    this._instance,
    this._then,
  );

  final Query$UserEarnings$userEarnings$earningsInMonth _instance;

  final TRes Function(Query$UserEarnings$userEarnings$earningsInMonth) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? quantity = _undefined,
    Object? value = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserEarnings$userEarnings$earningsInMonth(
        quantity:
            quantity == _undefined ? _instance.quantity : (quantity as int?),
        value: value == _undefined ? _instance.value : (value as double?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$UserEarnings$userEarnings$earningsInMonth<TRes>
    implements CopyWith$Query$UserEarnings$userEarnings$earningsInMonth<TRes> {
  _CopyWithStubImpl$Query$UserEarnings$userEarnings$earningsInMonth(this._res);

  TRes _res;

  call({
    int? quantity,
    double? value,
    String? $__typename,
  }) =>
      _res;
}

class Query$UserEarnings$userEarnings$completedPayments {
  Query$UserEarnings$userEarnings$completedPayments({
    this.quantity,
    this.value,
    this.$__typename = 'QuantityValuePair',
  });

  factory Query$UserEarnings$userEarnings$completedPayments.fromJson(
      Map<String, dynamic> json) {
    final l$quantity = json['quantity'];
    final l$value = json['value'];
    final l$$__typename = json['__typename'];
    return Query$UserEarnings$userEarnings$completedPayments(
      quantity: (l$quantity as int?),
      value: (l$value as num?)?.toDouble(),
      $__typename: (l$$__typename as String),
    );
  }

  final int? quantity;

  final double? value;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$quantity = quantity;
    _resultData['quantity'] = l$quantity;
    final l$value = value;
    _resultData['value'] = l$value;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$quantity = quantity;
    final l$value = value;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$quantity,
      l$value,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserEarnings$userEarnings$completedPayments ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$quantity = quantity;
    final lOther$quantity = other.quantity;
    if (l$quantity != lOther$quantity) {
      return false;
    }
    final l$value = value;
    final lOther$value = other.value;
    if (l$value != lOther$value) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserEarnings$userEarnings$completedPayments
    on Query$UserEarnings$userEarnings$completedPayments {
  CopyWith$Query$UserEarnings$userEarnings$completedPayments<
          Query$UserEarnings$userEarnings$completedPayments>
      get copyWith =>
          CopyWith$Query$UserEarnings$userEarnings$completedPayments(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserEarnings$userEarnings$completedPayments<
    TRes> {
  factory CopyWith$Query$UserEarnings$userEarnings$completedPayments(
    Query$UserEarnings$userEarnings$completedPayments instance,
    TRes Function(Query$UserEarnings$userEarnings$completedPayments) then,
  ) = _CopyWithImpl$Query$UserEarnings$userEarnings$completedPayments;

  factory CopyWith$Query$UserEarnings$userEarnings$completedPayments.stub(
          TRes res) =
      _CopyWithStubImpl$Query$UserEarnings$userEarnings$completedPayments;

  TRes call({
    int? quantity,
    double? value,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$UserEarnings$userEarnings$completedPayments<TRes>
    implements
        CopyWith$Query$UserEarnings$userEarnings$completedPayments<TRes> {
  _CopyWithImpl$Query$UserEarnings$userEarnings$completedPayments(
    this._instance,
    this._then,
  );

  final Query$UserEarnings$userEarnings$completedPayments _instance;

  final TRes Function(Query$UserEarnings$userEarnings$completedPayments) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? quantity = _undefined,
    Object? value = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserEarnings$userEarnings$completedPayments(
        quantity:
            quantity == _undefined ? _instance.quantity : (quantity as int?),
        value: value == _undefined ? _instance.value : (value as double?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$UserEarnings$userEarnings$completedPayments<TRes>
    implements
        CopyWith$Query$UserEarnings$userEarnings$completedPayments<TRes> {
  _CopyWithStubImpl$Query$UserEarnings$userEarnings$completedPayments(
      this._res);

  TRes _res;

  call({
    int? quantity,
    double? value,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$UserSearchHistory {
  factory Variables$Query$UserSearchHistory({
    Enum$SearchTypeEnum? searchType,
    int? pageCount,
    int? pageNumber,
  }) =>
      Variables$Query$UserSearchHistory._({
        if (searchType != null) r'searchType': searchType,
        if (pageCount != null) r'pageCount': pageCount,
        if (pageNumber != null) r'pageNumber': pageNumber,
      });

  Variables$Query$UserSearchHistory._(this._$data);

  factory Variables$Query$UserSearchHistory.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('searchType')) {
      final l$searchType = data['searchType'];
      result$data['searchType'] = l$searchType == null
          ? null
          : fromJson$Enum$SearchTypeEnum((l$searchType as String));
    }
    if (data.containsKey('pageCount')) {
      final l$pageCount = data['pageCount'];
      result$data['pageCount'] = (l$pageCount as int?);
    }
    if (data.containsKey('pageNumber')) {
      final l$pageNumber = data['pageNumber'];
      result$data['pageNumber'] = (l$pageNumber as int?);
    }
    return Variables$Query$UserSearchHistory._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$SearchTypeEnum? get searchType =>
      (_$data['searchType'] as Enum$SearchTypeEnum?);

  int? get pageCount => (_$data['pageCount'] as int?);

  int? get pageNumber => (_$data['pageNumber'] as int?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('searchType')) {
      final l$searchType = searchType;
      result$data['searchType'] = l$searchType == null
          ? null
          : toJson$Enum$SearchTypeEnum(l$searchType);
    }
    if (_$data.containsKey('pageCount')) {
      final l$pageCount = pageCount;
      result$data['pageCount'] = l$pageCount;
    }
    if (_$data.containsKey('pageNumber')) {
      final l$pageNumber = pageNumber;
      result$data['pageNumber'] = l$pageNumber;
    }
    return result$data;
  }

  CopyWith$Variables$Query$UserSearchHistory<Variables$Query$UserSearchHistory>
      get copyWith => CopyWith$Variables$Query$UserSearchHistory(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$UserSearchHistory ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$searchType = searchType;
    final lOther$searchType = other.searchType;
    if (_$data.containsKey('searchType') !=
        other._$data.containsKey('searchType')) {
      return false;
    }
    if (l$searchType != lOther$searchType) {
      return false;
    }
    final l$pageCount = pageCount;
    final lOther$pageCount = other.pageCount;
    if (_$data.containsKey('pageCount') !=
        other._$data.containsKey('pageCount')) {
      return false;
    }
    if (l$pageCount != lOther$pageCount) {
      return false;
    }
    final l$pageNumber = pageNumber;
    final lOther$pageNumber = other.pageNumber;
    if (_$data.containsKey('pageNumber') !=
        other._$data.containsKey('pageNumber')) {
      return false;
    }
    if (l$pageNumber != lOther$pageNumber) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$searchType = searchType;
    final l$pageCount = pageCount;
    final l$pageNumber = pageNumber;
    return Object.hashAll([
      _$data.containsKey('searchType') ? l$searchType : const {},
      _$data.containsKey('pageCount') ? l$pageCount : const {},
      _$data.containsKey('pageNumber') ? l$pageNumber : const {},
    ]);
  }
}

abstract class CopyWith$Variables$Query$UserSearchHistory<TRes> {
  factory CopyWith$Variables$Query$UserSearchHistory(
    Variables$Query$UserSearchHistory instance,
    TRes Function(Variables$Query$UserSearchHistory) then,
  ) = _CopyWithImpl$Variables$Query$UserSearchHistory;

  factory CopyWith$Variables$Query$UserSearchHistory.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$UserSearchHistory;

  TRes call({
    Enum$SearchTypeEnum? searchType,
    int? pageCount,
    int? pageNumber,
  });
}

class _CopyWithImpl$Variables$Query$UserSearchHistory<TRes>
    implements CopyWith$Variables$Query$UserSearchHistory<TRes> {
  _CopyWithImpl$Variables$Query$UserSearchHistory(
    this._instance,
    this._then,
  );

  final Variables$Query$UserSearchHistory _instance;

  final TRes Function(Variables$Query$UserSearchHistory) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? searchType = _undefined,
    Object? pageCount = _undefined,
    Object? pageNumber = _undefined,
  }) =>
      _then(Variables$Query$UserSearchHistory._({
        ..._instance._$data,
        if (searchType != _undefined)
          'searchType': (searchType as Enum$SearchTypeEnum?),
        if (pageCount != _undefined) 'pageCount': (pageCount as int?),
        if (pageNumber != _undefined) 'pageNumber': (pageNumber as int?),
      }));
}

class _CopyWithStubImpl$Variables$Query$UserSearchHistory<TRes>
    implements CopyWith$Variables$Query$UserSearchHistory<TRes> {
  _CopyWithStubImpl$Variables$Query$UserSearchHistory(this._res);

  TRes _res;

  call({
    Enum$SearchTypeEnum? searchType,
    int? pageCount,
    int? pageNumber,
  }) =>
      _res;
}

class Query$UserSearchHistory {
  Query$UserSearchHistory({
    this.userSearchHistory,
    this.$__typename = 'Query',
  });

  factory Query$UserSearchHistory.fromJson(Map<String, dynamic> json) {
    final l$userSearchHistory = json['userSearchHistory'];
    final l$$__typename = json['__typename'];
    return Query$UserSearchHistory(
      userSearchHistory: (l$userSearchHistory as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$UserSearchHistory$userSearchHistory.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$UserSearchHistory$userSearchHistory?>? userSearchHistory;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userSearchHistory = userSearchHistory;
    _resultData['userSearchHistory'] =
        l$userSearchHistory?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userSearchHistory = userSearchHistory;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userSearchHistory == null
          ? null
          : Object.hashAll(l$userSearchHistory.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserSearchHistory || runtimeType != other.runtimeType) {
      return false;
    }
    final l$userSearchHistory = userSearchHistory;
    final lOther$userSearchHistory = other.userSearchHistory;
    if (l$userSearchHistory != null && lOther$userSearchHistory != null) {
      if (l$userSearchHistory.length != lOther$userSearchHistory.length) {
        return false;
      }
      for (int i = 0; i < l$userSearchHistory.length; i++) {
        final l$userSearchHistory$entry = l$userSearchHistory[i];
        final lOther$userSearchHistory$entry = lOther$userSearchHistory[i];
        if (l$userSearchHistory$entry != lOther$userSearchHistory$entry) {
          return false;
        }
      }
    } else if (l$userSearchHistory != lOther$userSearchHistory) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserSearchHistory on Query$UserSearchHistory {
  CopyWith$Query$UserSearchHistory<Query$UserSearchHistory> get copyWith =>
      CopyWith$Query$UserSearchHistory(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$UserSearchHistory<TRes> {
  factory CopyWith$Query$UserSearchHistory(
    Query$UserSearchHistory instance,
    TRes Function(Query$UserSearchHistory) then,
  ) = _CopyWithImpl$Query$UserSearchHistory;

  factory CopyWith$Query$UserSearchHistory.stub(TRes res) =
      _CopyWithStubImpl$Query$UserSearchHistory;

  TRes call({
    List<Query$UserSearchHistory$userSearchHistory?>? userSearchHistory,
    String? $__typename,
  });
  TRes userSearchHistory(
      Iterable<Query$UserSearchHistory$userSearchHistory?>? Function(
              Iterable<
                  CopyWith$Query$UserSearchHistory$userSearchHistory<
                      Query$UserSearchHistory$userSearchHistory>?>?)
          _fn);
}

class _CopyWithImpl$Query$UserSearchHistory<TRes>
    implements CopyWith$Query$UserSearchHistory<TRes> {
  _CopyWithImpl$Query$UserSearchHistory(
    this._instance,
    this._then,
  );

  final Query$UserSearchHistory _instance;

  final TRes Function(Query$UserSearchHistory) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userSearchHistory = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserSearchHistory(
        userSearchHistory: userSearchHistory == _undefined
            ? _instance.userSearchHistory
            : (userSearchHistory
                as List<Query$UserSearchHistory$userSearchHistory?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes userSearchHistory(
          Iterable<Query$UserSearchHistory$userSearchHistory?>? Function(
                  Iterable<
                      CopyWith$Query$UserSearchHistory$userSearchHistory<
                          Query$UserSearchHistory$userSearchHistory>?>?)
              _fn) =>
      call(
          userSearchHistory:
              _fn(_instance.userSearchHistory?.map((e) => e == null
                  ? null
                  : CopyWith$Query$UserSearchHistory$userSearchHistory(
                      e,
                      (i) => i,
                    )))?.toList());
}

class _CopyWithStubImpl$Query$UserSearchHistory<TRes>
    implements CopyWith$Query$UserSearchHistory<TRes> {
  _CopyWithStubImpl$Query$UserSearchHistory(this._res);

  TRes _res;

  call({
    List<Query$UserSearchHistory$userSearchHistory?>? userSearchHistory,
    String? $__typename,
  }) =>
      _res;

  userSearchHistory(_fn) => _res;
}

const documentNodeQueryUserSearchHistory = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'UserSearchHistory'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'searchType')),
        type: NamedTypeNode(
          name: NameNode(value: 'SearchTypeEnum'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageCount')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageNumber')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'userSearchHistory'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'searchType'),
            value: VariableNode(name: NameNode(value: 'searchType')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageCount'),
            value: VariableNode(name: NameNode(value: 'pageCount')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageNumber'),
            value: VariableNode(name: NameNode(value: 'pageNumber')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'query'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'timestamp'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'searchType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'searchCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'lastSearched'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$UserSearchHistory _parserFn$Query$UserSearchHistory(
        Map<String, dynamic> data) =>
    Query$UserSearchHistory.fromJson(data);
typedef OnQueryComplete$Query$UserSearchHistory = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$UserSearchHistory?,
);

class Options$Query$UserSearchHistory
    extends graphql.QueryOptions<Query$UserSearchHistory> {
  Options$Query$UserSearchHistory({
    String? operationName,
    Variables$Query$UserSearchHistory? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$UserSearchHistory? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$UserSearchHistory? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null
                        ? null
                        : _parserFn$Query$UserSearchHistory(data),
                  ),
          onError: onError,
          document: documentNodeQueryUserSearchHistory,
          parserFn: _parserFn$Query$UserSearchHistory,
        );

  final OnQueryComplete$Query$UserSearchHistory? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$UserSearchHistory
    extends graphql.WatchQueryOptions<Query$UserSearchHistory> {
  WatchOptions$Query$UserSearchHistory({
    String? operationName,
    Variables$Query$UserSearchHistory? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$UserSearchHistory? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryUserSearchHistory,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$UserSearchHistory,
        );
}

class FetchMoreOptions$Query$UserSearchHistory
    extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$UserSearchHistory({
    required graphql.UpdateQuery updateQuery,
    Variables$Query$UserSearchHistory? variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables?.toJson() ?? {},
          document: documentNodeQueryUserSearchHistory,
        );
}

extension ClientExtension$Query$UserSearchHistory on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$UserSearchHistory>> query$UserSearchHistory(
          [Options$Query$UserSearchHistory? options]) async =>
      await this.query(options ?? Options$Query$UserSearchHistory());
  graphql.ObservableQuery<Query$UserSearchHistory> watchQuery$UserSearchHistory(
          [WatchOptions$Query$UserSearchHistory? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$UserSearchHistory());
  void writeQuery$UserSearchHistory({
    required Query$UserSearchHistory data,
    Variables$Query$UserSearchHistory? variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation:
              graphql.Operation(document: documentNodeQueryUserSearchHistory),
          variables: variables?.toJson() ?? const {},
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$UserSearchHistory? readQuery$UserSearchHistory({
    Variables$Query$UserSearchHistory? variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation:
            graphql.Operation(document: documentNodeQueryUserSearchHistory),
        variables: variables?.toJson() ?? const {},
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$UserSearchHistory.fromJson(result);
  }
}

class Query$UserSearchHistory$userSearchHistory {
  Query$UserSearchHistory$userSearchHistory({
    required this.id,
    required this.query,
    required this.timestamp,
    this.searchType,
    required this.searchCount,
    required this.lastSearched,
    this.$__typename = 'SearchHistoryType',
  });

  factory Query$UserSearchHistory$userSearchHistory.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$query = json['query'];
    final l$timestamp = json['timestamp'];
    final l$searchType = json['searchType'];
    final l$searchCount = json['searchCount'];
    final l$lastSearched = json['lastSearched'];
    final l$$__typename = json['__typename'];
    return Query$UserSearchHistory$userSearchHistory(
      id: (l$id as String),
      query: (l$query as String),
      timestamp: DateTime.parse((l$timestamp as String)),
      searchType: (l$searchType as String?),
      searchCount: (l$searchCount as int),
      lastSearched: DateTime.parse((l$lastSearched as String)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String query;

  final DateTime timestamp;

  final String? searchType;

  final int searchCount;

  final DateTime lastSearched;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$query = query;
    _resultData['query'] = l$query;
    final l$timestamp = timestamp;
    _resultData['timestamp'] = l$timestamp.toIso8601String();
    final l$searchType = searchType;
    _resultData['searchType'] = l$searchType;
    final l$searchCount = searchCount;
    _resultData['searchCount'] = l$searchCount;
    final l$lastSearched = lastSearched;
    _resultData['lastSearched'] = l$lastSearched.toIso8601String();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$query = query;
    final l$timestamp = timestamp;
    final l$searchType = searchType;
    final l$searchCount = searchCount;
    final l$lastSearched = lastSearched;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$query,
      l$timestamp,
      l$searchType,
      l$searchCount,
      l$lastSearched,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$UserSearchHistory$userSearchHistory ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$query = query;
    final lOther$query = other.query;
    if (l$query != lOther$query) {
      return false;
    }
    final l$timestamp = timestamp;
    final lOther$timestamp = other.timestamp;
    if (l$timestamp != lOther$timestamp) {
      return false;
    }
    final l$searchType = searchType;
    final lOther$searchType = other.searchType;
    if (l$searchType != lOther$searchType) {
      return false;
    }
    final l$searchCount = searchCount;
    final lOther$searchCount = other.searchCount;
    if (l$searchCount != lOther$searchCount) {
      return false;
    }
    final l$lastSearched = lastSearched;
    final lOther$lastSearched = other.lastSearched;
    if (l$lastSearched != lOther$lastSearched) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$UserSearchHistory$userSearchHistory
    on Query$UserSearchHistory$userSearchHistory {
  CopyWith$Query$UserSearchHistory$userSearchHistory<
          Query$UserSearchHistory$userSearchHistory>
      get copyWith => CopyWith$Query$UserSearchHistory$userSearchHistory(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$UserSearchHistory$userSearchHistory<TRes> {
  factory CopyWith$Query$UserSearchHistory$userSearchHistory(
    Query$UserSearchHistory$userSearchHistory instance,
    TRes Function(Query$UserSearchHistory$userSearchHistory) then,
  ) = _CopyWithImpl$Query$UserSearchHistory$userSearchHistory;

  factory CopyWith$Query$UserSearchHistory$userSearchHistory.stub(TRes res) =
      _CopyWithStubImpl$Query$UserSearchHistory$userSearchHistory;

  TRes call({
    String? id,
    String? query,
    DateTime? timestamp,
    String? searchType,
    int? searchCount,
    DateTime? lastSearched,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$UserSearchHistory$userSearchHistory<TRes>
    implements CopyWith$Query$UserSearchHistory$userSearchHistory<TRes> {
  _CopyWithImpl$Query$UserSearchHistory$userSearchHistory(
    this._instance,
    this._then,
  );

  final Query$UserSearchHistory$userSearchHistory _instance;

  final TRes Function(Query$UserSearchHistory$userSearchHistory) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? query = _undefined,
    Object? timestamp = _undefined,
    Object? searchType = _undefined,
    Object? searchCount = _undefined,
    Object? lastSearched = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$UserSearchHistory$userSearchHistory(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        query: query == _undefined || query == null
            ? _instance.query
            : (query as String),
        timestamp: timestamp == _undefined || timestamp == null
            ? _instance.timestamp
            : (timestamp as DateTime),
        searchType: searchType == _undefined
            ? _instance.searchType
            : (searchType as String?),
        searchCount: searchCount == _undefined || searchCount == null
            ? _instance.searchCount
            : (searchCount as int),
        lastSearched: lastSearched == _undefined || lastSearched == null
            ? _instance.lastSearched
            : (lastSearched as DateTime),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$UserSearchHistory$userSearchHistory<TRes>
    implements CopyWith$Query$UserSearchHistory$userSearchHistory<TRes> {
  _CopyWithStubImpl$Query$UserSearchHistory$userSearchHistory(this._res);

  TRes _res;

  call({
    String? id,
    String? query,
    DateTime? timestamp,
    String? searchType,
    int? searchCount,
    DateTime? lastSearched,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$RecommendedSearchHistory {
  factory Variables$Query$RecommendedSearchHistory({
    required Enum$SearchTypeEnum searchType,
    int? pageCount,
    int? pageNumber,
  }) =>
      Variables$Query$RecommendedSearchHistory._({
        r'searchType': searchType,
        if (pageCount != null) r'pageCount': pageCount,
        if (pageNumber != null) r'pageNumber': pageNumber,
      });

  Variables$Query$RecommendedSearchHistory._(this._$data);

  factory Variables$Query$RecommendedSearchHistory.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$searchType = data['searchType'];
    result$data['searchType'] =
        fromJson$Enum$SearchTypeEnum((l$searchType as String));
    if (data.containsKey('pageCount')) {
      final l$pageCount = data['pageCount'];
      result$data['pageCount'] = (l$pageCount as int?);
    }
    if (data.containsKey('pageNumber')) {
      final l$pageNumber = data['pageNumber'];
      result$data['pageNumber'] = (l$pageNumber as int?);
    }
    return Variables$Query$RecommendedSearchHistory._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$SearchTypeEnum get searchType =>
      (_$data['searchType'] as Enum$SearchTypeEnum);

  int? get pageCount => (_$data['pageCount'] as int?);

  int? get pageNumber => (_$data['pageNumber'] as int?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$searchType = searchType;
    result$data['searchType'] = toJson$Enum$SearchTypeEnum(l$searchType);
    if (_$data.containsKey('pageCount')) {
      final l$pageCount = pageCount;
      result$data['pageCount'] = l$pageCount;
    }
    if (_$data.containsKey('pageNumber')) {
      final l$pageNumber = pageNumber;
      result$data['pageNumber'] = l$pageNumber;
    }
    return result$data;
  }

  CopyWith$Variables$Query$RecommendedSearchHistory<
          Variables$Query$RecommendedSearchHistory>
      get copyWith => CopyWith$Variables$Query$RecommendedSearchHistory(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$RecommendedSearchHistory ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$searchType = searchType;
    final lOther$searchType = other.searchType;
    if (l$searchType != lOther$searchType) {
      return false;
    }
    final l$pageCount = pageCount;
    final lOther$pageCount = other.pageCount;
    if (_$data.containsKey('pageCount') !=
        other._$data.containsKey('pageCount')) {
      return false;
    }
    if (l$pageCount != lOther$pageCount) {
      return false;
    }
    final l$pageNumber = pageNumber;
    final lOther$pageNumber = other.pageNumber;
    if (_$data.containsKey('pageNumber') !=
        other._$data.containsKey('pageNumber')) {
      return false;
    }
    if (l$pageNumber != lOther$pageNumber) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$searchType = searchType;
    final l$pageCount = pageCount;
    final l$pageNumber = pageNumber;
    return Object.hashAll([
      l$searchType,
      _$data.containsKey('pageCount') ? l$pageCount : const {},
      _$data.containsKey('pageNumber') ? l$pageNumber : const {},
    ]);
  }
}

abstract class CopyWith$Variables$Query$RecommendedSearchHistory<TRes> {
  factory CopyWith$Variables$Query$RecommendedSearchHistory(
    Variables$Query$RecommendedSearchHistory instance,
    TRes Function(Variables$Query$RecommendedSearchHistory) then,
  ) = _CopyWithImpl$Variables$Query$RecommendedSearchHistory;

  factory CopyWith$Variables$Query$RecommendedSearchHistory.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$RecommendedSearchHistory;

  TRes call({
    Enum$SearchTypeEnum? searchType,
    int? pageCount,
    int? pageNumber,
  });
}

class _CopyWithImpl$Variables$Query$RecommendedSearchHistory<TRes>
    implements CopyWith$Variables$Query$RecommendedSearchHistory<TRes> {
  _CopyWithImpl$Variables$Query$RecommendedSearchHistory(
    this._instance,
    this._then,
  );

  final Variables$Query$RecommendedSearchHistory _instance;

  final TRes Function(Variables$Query$RecommendedSearchHistory) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? searchType = _undefined,
    Object? pageCount = _undefined,
    Object? pageNumber = _undefined,
  }) =>
      _then(Variables$Query$RecommendedSearchHistory._({
        ..._instance._$data,
        if (searchType != _undefined && searchType != null)
          'searchType': (searchType as Enum$SearchTypeEnum),
        if (pageCount != _undefined) 'pageCount': (pageCount as int?),
        if (pageNumber != _undefined) 'pageNumber': (pageNumber as int?),
      }));
}

class _CopyWithStubImpl$Variables$Query$RecommendedSearchHistory<TRes>
    implements CopyWith$Variables$Query$RecommendedSearchHistory<TRes> {
  _CopyWithStubImpl$Variables$Query$RecommendedSearchHistory(this._res);

  TRes _res;

  call({
    Enum$SearchTypeEnum? searchType,
    int? pageCount,
    int? pageNumber,
  }) =>
      _res;
}

class Query$RecommendedSearchHistory {
  Query$RecommendedSearchHistory({
    this.recommendedSearchHistory,
    this.$__typename = 'Query',
  });

  factory Query$RecommendedSearchHistory.fromJson(Map<String, dynamic> json) {
    final l$recommendedSearchHistory = json['recommendedSearchHistory'];
    final l$$__typename = json['__typename'];
    return Query$RecommendedSearchHistory(
      recommendedSearchHistory: (l$recommendedSearchHistory as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$RecommendedSearchHistory$recommendedSearchHistory
                  .fromJson((e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$RecommendedSearchHistory$recommendedSearchHistory?>?
      recommendedSearchHistory;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$recommendedSearchHistory = recommendedSearchHistory;
    _resultData['recommendedSearchHistory'] =
        l$recommendedSearchHistory?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$recommendedSearchHistory = recommendedSearchHistory;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$recommendedSearchHistory == null
          ? null
          : Object.hashAll(l$recommendedSearchHistory.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$RecommendedSearchHistory ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$recommendedSearchHistory = recommendedSearchHistory;
    final lOther$recommendedSearchHistory = other.recommendedSearchHistory;
    if (l$recommendedSearchHistory != null &&
        lOther$recommendedSearchHistory != null) {
      if (l$recommendedSearchHistory.length !=
          lOther$recommendedSearchHistory.length) {
        return false;
      }
      for (int i = 0; i < l$recommendedSearchHistory.length; i++) {
        final l$recommendedSearchHistory$entry = l$recommendedSearchHistory[i];
        final lOther$recommendedSearchHistory$entry =
            lOther$recommendedSearchHistory[i];
        if (l$recommendedSearchHistory$entry !=
            lOther$recommendedSearchHistory$entry) {
          return false;
        }
      }
    } else if (l$recommendedSearchHistory != lOther$recommendedSearchHistory) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$RecommendedSearchHistory
    on Query$RecommendedSearchHistory {
  CopyWith$Query$RecommendedSearchHistory<Query$RecommendedSearchHistory>
      get copyWith => CopyWith$Query$RecommendedSearchHistory(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$RecommendedSearchHistory<TRes> {
  factory CopyWith$Query$RecommendedSearchHistory(
    Query$RecommendedSearchHistory instance,
    TRes Function(Query$RecommendedSearchHistory) then,
  ) = _CopyWithImpl$Query$RecommendedSearchHistory;

  factory CopyWith$Query$RecommendedSearchHistory.stub(TRes res) =
      _CopyWithStubImpl$Query$RecommendedSearchHistory;

  TRes call({
    List<Query$RecommendedSearchHistory$recommendedSearchHistory?>?
        recommendedSearchHistory,
    String? $__typename,
  });
  TRes recommendedSearchHistory(
      Iterable<Query$RecommendedSearchHistory$recommendedSearchHistory?>? Function(
              Iterable<
                  CopyWith$Query$RecommendedSearchHistory$recommendedSearchHistory<
                      Query$RecommendedSearchHistory$recommendedSearchHistory>?>?)
          _fn);
}

class _CopyWithImpl$Query$RecommendedSearchHistory<TRes>
    implements CopyWith$Query$RecommendedSearchHistory<TRes> {
  _CopyWithImpl$Query$RecommendedSearchHistory(
    this._instance,
    this._then,
  );

  final Query$RecommendedSearchHistory _instance;

  final TRes Function(Query$RecommendedSearchHistory) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? recommendedSearchHistory = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$RecommendedSearchHistory(
        recommendedSearchHistory: recommendedSearchHistory == _undefined
            ? _instance.recommendedSearchHistory
            : (recommendedSearchHistory as List<
                Query$RecommendedSearchHistory$recommendedSearchHistory?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes recommendedSearchHistory(
          Iterable<Query$RecommendedSearchHistory$recommendedSearchHistory?>? Function(
                  Iterable<
                      CopyWith$Query$RecommendedSearchHistory$recommendedSearchHistory<
                          Query$RecommendedSearchHistory$recommendedSearchHistory>?>?)
              _fn) =>
      call(
          recommendedSearchHistory:
              _fn(_instance.recommendedSearchHistory?.map((e) => e == null
                  ? null
                  : CopyWith$Query$RecommendedSearchHistory$recommendedSearchHistory(
                      e,
                      (i) => i,
                    )))?.toList());
}

class _CopyWithStubImpl$Query$RecommendedSearchHistory<TRes>
    implements CopyWith$Query$RecommendedSearchHistory<TRes> {
  _CopyWithStubImpl$Query$RecommendedSearchHistory(this._res);

  TRes _res;

  call({
    List<Query$RecommendedSearchHistory$recommendedSearchHistory?>?
        recommendedSearchHistory,
    String? $__typename,
  }) =>
      _res;

  recommendedSearchHistory(_fn) => _res;
}

const documentNodeQueryRecommendedSearchHistory = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'RecommendedSearchHistory'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'searchType')),
        type: NamedTypeNode(
          name: NameNode(value: 'SearchTypeEnum'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageCount')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageNumber')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'recommendedSearchHistory'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'searchType'),
            value: VariableNode(name: NameNode(value: 'searchType')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageCount'),
            value: VariableNode(name: NameNode(value: 'pageCount')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageNumber'),
            value: VariableNode(name: NameNode(value: 'pageNumber')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'query'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'timestamp'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'searchType'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'searchCount'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'lastSearched'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$RecommendedSearchHistory _parserFn$Query$RecommendedSearchHistory(
        Map<String, dynamic> data) =>
    Query$RecommendedSearchHistory.fromJson(data);
typedef OnQueryComplete$Query$RecommendedSearchHistory = FutureOr<void>
    Function(
  Map<String, dynamic>?,
  Query$RecommendedSearchHistory?,
);

class Options$Query$RecommendedSearchHistory
    extends graphql.QueryOptions<Query$RecommendedSearchHistory> {
  Options$Query$RecommendedSearchHistory({
    String? operationName,
    required Variables$Query$RecommendedSearchHistory variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$RecommendedSearchHistory? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$RecommendedSearchHistory? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null
                        ? null
                        : _parserFn$Query$RecommendedSearchHistory(data),
                  ),
          onError: onError,
          document: documentNodeQueryRecommendedSearchHistory,
          parserFn: _parserFn$Query$RecommendedSearchHistory,
        );

  final OnQueryComplete$Query$RecommendedSearchHistory? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$RecommendedSearchHistory
    extends graphql.WatchQueryOptions<Query$RecommendedSearchHistory> {
  WatchOptions$Query$RecommendedSearchHistory({
    String? operationName,
    required Variables$Query$RecommendedSearchHistory variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$RecommendedSearchHistory? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryRecommendedSearchHistory,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$RecommendedSearchHistory,
        );
}

class FetchMoreOptions$Query$RecommendedSearchHistory
    extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$RecommendedSearchHistory({
    required graphql.UpdateQuery updateQuery,
    required Variables$Query$RecommendedSearchHistory variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables.toJson(),
          document: documentNodeQueryRecommendedSearchHistory,
        );
}

extension ClientExtension$Query$RecommendedSearchHistory
    on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$RecommendedSearchHistory>>
      query$RecommendedSearchHistory(
              Options$Query$RecommendedSearchHistory options) async =>
          await this.query(options);
  graphql.ObservableQuery<Query$RecommendedSearchHistory>
      watchQuery$RecommendedSearchHistory(
              WatchOptions$Query$RecommendedSearchHistory options) =>
          this.watchQuery(options);
  void writeQuery$RecommendedSearchHistory({
    required Query$RecommendedSearchHistory data,
    required Variables$Query$RecommendedSearchHistory variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation: graphql.Operation(
              document: documentNodeQueryRecommendedSearchHistory),
          variables: variables.toJson(),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$RecommendedSearchHistory? readQuery$RecommendedSearchHistory({
    required Variables$Query$RecommendedSearchHistory variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(
            document: documentNodeQueryRecommendedSearchHistory),
        variables: variables.toJson(),
      ),
      optimistic: optimistic,
    );
    return result == null
        ? null
        : Query$RecommendedSearchHistory.fromJson(result);
  }
}

class Query$RecommendedSearchHistory$recommendedSearchHistory {
  Query$RecommendedSearchHistory$recommendedSearchHistory({
    required this.id,
    required this.query,
    required this.timestamp,
    this.searchType,
    required this.searchCount,
    required this.lastSearched,
    this.$__typename = 'SearchHistoryType',
  });

  factory Query$RecommendedSearchHistory$recommendedSearchHistory.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$query = json['query'];
    final l$timestamp = json['timestamp'];
    final l$searchType = json['searchType'];
    final l$searchCount = json['searchCount'];
    final l$lastSearched = json['lastSearched'];
    final l$$__typename = json['__typename'];
    return Query$RecommendedSearchHistory$recommendedSearchHistory(
      id: (l$id as String),
      query: (l$query as String),
      timestamp: DateTime.parse((l$timestamp as String)),
      searchType: (l$searchType as String?),
      searchCount: (l$searchCount as int),
      lastSearched: DateTime.parse((l$lastSearched as String)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String query;

  final DateTime timestamp;

  final String? searchType;

  final int searchCount;

  final DateTime lastSearched;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$query = query;
    _resultData['query'] = l$query;
    final l$timestamp = timestamp;
    _resultData['timestamp'] = l$timestamp.toIso8601String();
    final l$searchType = searchType;
    _resultData['searchType'] = l$searchType;
    final l$searchCount = searchCount;
    _resultData['searchCount'] = l$searchCount;
    final l$lastSearched = lastSearched;
    _resultData['lastSearched'] = l$lastSearched.toIso8601String();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$query = query;
    final l$timestamp = timestamp;
    final l$searchType = searchType;
    final l$searchCount = searchCount;
    final l$lastSearched = lastSearched;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$query,
      l$timestamp,
      l$searchType,
      l$searchCount,
      l$lastSearched,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$RecommendedSearchHistory$recommendedSearchHistory ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$query = query;
    final lOther$query = other.query;
    if (l$query != lOther$query) {
      return false;
    }
    final l$timestamp = timestamp;
    final lOther$timestamp = other.timestamp;
    if (l$timestamp != lOther$timestamp) {
      return false;
    }
    final l$searchType = searchType;
    final lOther$searchType = other.searchType;
    if (l$searchType != lOther$searchType) {
      return false;
    }
    final l$searchCount = searchCount;
    final lOther$searchCount = other.searchCount;
    if (l$searchCount != lOther$searchCount) {
      return false;
    }
    final l$lastSearched = lastSearched;
    final lOther$lastSearched = other.lastSearched;
    if (l$lastSearched != lOther$lastSearched) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$RecommendedSearchHistory$recommendedSearchHistory
    on Query$RecommendedSearchHistory$recommendedSearchHistory {
  CopyWith$Query$RecommendedSearchHistory$recommendedSearchHistory<
          Query$RecommendedSearchHistory$recommendedSearchHistory>
      get copyWith =>
          CopyWith$Query$RecommendedSearchHistory$recommendedSearchHistory(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$RecommendedSearchHistory$recommendedSearchHistory<
    TRes> {
  factory CopyWith$Query$RecommendedSearchHistory$recommendedSearchHistory(
    Query$RecommendedSearchHistory$recommendedSearchHistory instance,
    TRes Function(Query$RecommendedSearchHistory$recommendedSearchHistory) then,
  ) = _CopyWithImpl$Query$RecommendedSearchHistory$recommendedSearchHistory;

  factory CopyWith$Query$RecommendedSearchHistory$recommendedSearchHistory.stub(
          TRes res) =
      _CopyWithStubImpl$Query$RecommendedSearchHistory$recommendedSearchHistory;

  TRes call({
    String? id,
    String? query,
    DateTime? timestamp,
    String? searchType,
    int? searchCount,
    DateTime? lastSearched,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$RecommendedSearchHistory$recommendedSearchHistory<
        TRes>
    implements
        CopyWith$Query$RecommendedSearchHistory$recommendedSearchHistory<TRes> {
  _CopyWithImpl$Query$RecommendedSearchHistory$recommendedSearchHistory(
    this._instance,
    this._then,
  );

  final Query$RecommendedSearchHistory$recommendedSearchHistory _instance;

  final TRes Function(Query$RecommendedSearchHistory$recommendedSearchHistory)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? query = _undefined,
    Object? timestamp = _undefined,
    Object? searchType = _undefined,
    Object? searchCount = _undefined,
    Object? lastSearched = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$RecommendedSearchHistory$recommendedSearchHistory(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        query: query == _undefined || query == null
            ? _instance.query
            : (query as String),
        timestamp: timestamp == _undefined || timestamp == null
            ? _instance.timestamp
            : (timestamp as DateTime),
        searchType: searchType == _undefined
            ? _instance.searchType
            : (searchType as String?),
        searchCount: searchCount == _undefined || searchCount == null
            ? _instance.searchCount
            : (searchCount as int),
        lastSearched: lastSearched == _undefined || lastSearched == null
            ? _instance.lastSearched
            : (lastSearched as DateTime),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$RecommendedSearchHistory$recommendedSearchHistory<
        TRes>
    implements
        CopyWith$Query$RecommendedSearchHistory$recommendedSearchHistory<TRes> {
  _CopyWithStubImpl$Query$RecommendedSearchHistory$recommendedSearchHistory(
      this._res);

  TRes _res;

  call({
    String? id,
    String? query,
    DateTime? timestamp,
    String? searchType,
    int? searchCount,
    DateTime? lastSearched,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$SearchHistory {
  factory Variables$Query$SearchHistory({
    required Enum$SearchTypeEnum searchType,
    required String searchTerm,
  }) =>
      Variables$Query$SearchHistory._({
        r'searchType': searchType,
        r'searchTerm': searchTerm,
      });

  Variables$Query$SearchHistory._(this._$data);

  factory Variables$Query$SearchHistory.fromJson(Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$searchType = data['searchType'];
    result$data['searchType'] =
        fromJson$Enum$SearchTypeEnum((l$searchType as String));
    final l$searchTerm = data['searchTerm'];
    result$data['searchTerm'] = (l$searchTerm as String);
    return Variables$Query$SearchHistory._(result$data);
  }

  Map<String, dynamic> _$data;

  Enum$SearchTypeEnum get searchType =>
      (_$data['searchType'] as Enum$SearchTypeEnum);

  String get searchTerm => (_$data['searchTerm'] as String);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$searchType = searchType;
    result$data['searchType'] = toJson$Enum$SearchTypeEnum(l$searchType);
    final l$searchTerm = searchTerm;
    result$data['searchTerm'] = l$searchTerm;
    return result$data;
  }

  CopyWith$Variables$Query$SearchHistory<Variables$Query$SearchHistory>
      get copyWith => CopyWith$Variables$Query$SearchHistory(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$SearchHistory ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$searchType = searchType;
    final lOther$searchType = other.searchType;
    if (l$searchType != lOther$searchType) {
      return false;
    }
    final l$searchTerm = searchTerm;
    final lOther$searchTerm = other.searchTerm;
    if (l$searchTerm != lOther$searchTerm) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$searchType = searchType;
    final l$searchTerm = searchTerm;
    return Object.hashAll([
      l$searchType,
      l$searchTerm,
    ]);
  }
}

abstract class CopyWith$Variables$Query$SearchHistory<TRes> {
  factory CopyWith$Variables$Query$SearchHistory(
    Variables$Query$SearchHistory instance,
    TRes Function(Variables$Query$SearchHistory) then,
  ) = _CopyWithImpl$Variables$Query$SearchHistory;

  factory CopyWith$Variables$Query$SearchHistory.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$SearchHistory;

  TRes call({
    Enum$SearchTypeEnum? searchType,
    String? searchTerm,
  });
}

class _CopyWithImpl$Variables$Query$SearchHistory<TRes>
    implements CopyWith$Variables$Query$SearchHistory<TRes> {
  _CopyWithImpl$Variables$Query$SearchHistory(
    this._instance,
    this._then,
  );

  final Variables$Query$SearchHistory _instance;

  final TRes Function(Variables$Query$SearchHistory) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? searchType = _undefined,
    Object? searchTerm = _undefined,
  }) =>
      _then(Variables$Query$SearchHistory._({
        ..._instance._$data,
        if (searchType != _undefined && searchType != null)
          'searchType': (searchType as Enum$SearchTypeEnum),
        if (searchTerm != _undefined && searchTerm != null)
          'searchTerm': (searchTerm as String),
      }));
}

class _CopyWithStubImpl$Variables$Query$SearchHistory<TRes>
    implements CopyWith$Variables$Query$SearchHistory<TRes> {
  _CopyWithStubImpl$Variables$Query$SearchHistory(this._res);

  TRes _res;

  call({
    Enum$SearchTypeEnum? searchType,
    String? searchTerm,
  }) =>
      _res;
}

class Query$SearchHistory {
  Query$SearchHistory({
    this.searchHistory,
    this.$__typename = 'Query',
  });

  factory Query$SearchHistory.fromJson(Map<String, dynamic> json) {
    final l$searchHistory = json['searchHistory'];
    final l$$__typename = json['__typename'];
    return Query$SearchHistory(
      searchHistory: (l$searchHistory as List<dynamic>?)
          ?.map((e) => (e as String?))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<String?>? searchHistory;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$searchHistory = searchHistory;
    _resultData['searchHistory'] = l$searchHistory?.map((e) => e).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$searchHistory = searchHistory;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$searchHistory == null
          ? null
          : Object.hashAll(l$searchHistory.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$SearchHistory || runtimeType != other.runtimeType) {
      return false;
    }
    final l$searchHistory = searchHistory;
    final lOther$searchHistory = other.searchHistory;
    if (l$searchHistory != null && lOther$searchHistory != null) {
      if (l$searchHistory.length != lOther$searchHistory.length) {
        return false;
      }
      for (int i = 0; i < l$searchHistory.length; i++) {
        final l$searchHistory$entry = l$searchHistory[i];
        final lOther$searchHistory$entry = lOther$searchHistory[i];
        if (l$searchHistory$entry != lOther$searchHistory$entry) {
          return false;
        }
      }
    } else if (l$searchHistory != lOther$searchHistory) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$SearchHistory on Query$SearchHistory {
  CopyWith$Query$SearchHistory<Query$SearchHistory> get copyWith =>
      CopyWith$Query$SearchHistory(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$SearchHistory<TRes> {
  factory CopyWith$Query$SearchHistory(
    Query$SearchHistory instance,
    TRes Function(Query$SearchHistory) then,
  ) = _CopyWithImpl$Query$SearchHistory;

  factory CopyWith$Query$SearchHistory.stub(TRes res) =
      _CopyWithStubImpl$Query$SearchHistory;

  TRes call({
    List<String?>? searchHistory,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$SearchHistory<TRes>
    implements CopyWith$Query$SearchHistory<TRes> {
  _CopyWithImpl$Query$SearchHistory(
    this._instance,
    this._then,
  );

  final Query$SearchHistory _instance;

  final TRes Function(Query$SearchHistory) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? searchHistory = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$SearchHistory(
        searchHistory: searchHistory == _undefined
            ? _instance.searchHistory
            : (searchHistory as List<String?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$SearchHistory<TRes>
    implements CopyWith$Query$SearchHistory<TRes> {
  _CopyWithStubImpl$Query$SearchHistory(this._res);

  TRes _res;

  call({
    List<String?>? searchHistory,
    String? $__typename,
  }) =>
      _res;
}

const documentNodeQuerySearchHistory = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'SearchHistory'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'searchType')),
        type: NamedTypeNode(
          name: NameNode(value: 'SearchTypeEnum'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'searchTerm')),
        type: NamedTypeNode(
          name: NameNode(value: 'String'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'searchHistory'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'searchType'),
            value: VariableNode(name: NameNode(value: 'searchType')),
          ),
          ArgumentNode(
            name: NameNode(value: 'searchTerm'),
            value: VariableNode(name: NameNode(value: 'searchTerm')),
          ),
        ],
        directives: [],
        selectionSet: null,
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$SearchHistory _parserFn$Query$SearchHistory(Map<String, dynamic> data) =>
    Query$SearchHistory.fromJson(data);
typedef OnQueryComplete$Query$SearchHistory = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$SearchHistory?,
);

class Options$Query$SearchHistory
    extends graphql.QueryOptions<Query$SearchHistory> {
  Options$Query$SearchHistory({
    String? operationName,
    required Variables$Query$SearchHistory variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$SearchHistory? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$SearchHistory? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null ? null : _parserFn$Query$SearchHistory(data),
                  ),
          onError: onError,
          document: documentNodeQuerySearchHistory,
          parserFn: _parserFn$Query$SearchHistory,
        );

  final OnQueryComplete$Query$SearchHistory? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$SearchHistory
    extends graphql.WatchQueryOptions<Query$SearchHistory> {
  WatchOptions$Query$SearchHistory({
    String? operationName,
    required Variables$Query$SearchHistory variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$SearchHistory? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQuerySearchHistory,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$SearchHistory,
        );
}

class FetchMoreOptions$Query$SearchHistory extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$SearchHistory({
    required graphql.UpdateQuery updateQuery,
    required Variables$Query$SearchHistory variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables.toJson(),
          document: documentNodeQuerySearchHistory,
        );
}

extension ClientExtension$Query$SearchHistory on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$SearchHistory>> query$SearchHistory(
          Options$Query$SearchHistory options) async =>
      await this.query(options);
  graphql.ObservableQuery<Query$SearchHistory> watchQuery$SearchHistory(
          WatchOptions$Query$SearchHistory options) =>
      this.watchQuery(options);
  void writeQuery$SearchHistory({
    required Query$SearchHistory data,
    required Variables$Query$SearchHistory variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation:
              graphql.Operation(document: documentNodeQuerySearchHistory),
          variables: variables.toJson(),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$SearchHistory? readQuery$SearchHistory({
    required Variables$Query$SearchHistory variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation: graphql.Operation(document: documentNodeQuerySearchHistory),
        variables: variables.toJson(),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$SearchHistory.fromJson(result);
  }
}

class Variables$Query$RecommendedSellers {
  factory Variables$Query$RecommendedSellers({
    int? pageCount,
    int? pageNumber,
  }) =>
      Variables$Query$RecommendedSellers._({
        if (pageCount != null) r'pageCount': pageCount,
        if (pageNumber != null) r'pageNumber': pageNumber,
      });

  Variables$Query$RecommendedSellers._(this._$data);

  factory Variables$Query$RecommendedSellers.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    if (data.containsKey('pageCount')) {
      final l$pageCount = data['pageCount'];
      result$data['pageCount'] = (l$pageCount as int?);
    }
    if (data.containsKey('pageNumber')) {
      final l$pageNumber = data['pageNumber'];
      result$data['pageNumber'] = (l$pageNumber as int?);
    }
    return Variables$Query$RecommendedSellers._(result$data);
  }

  Map<String, dynamic> _$data;

  int? get pageCount => (_$data['pageCount'] as int?);

  int? get pageNumber => (_$data['pageNumber'] as int?);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    if (_$data.containsKey('pageCount')) {
      final l$pageCount = pageCount;
      result$data['pageCount'] = l$pageCount;
    }
    if (_$data.containsKey('pageNumber')) {
      final l$pageNumber = pageNumber;
      result$data['pageNumber'] = l$pageNumber;
    }
    return result$data;
  }

  CopyWith$Variables$Query$RecommendedSellers<
          Variables$Query$RecommendedSellers>
      get copyWith => CopyWith$Variables$Query$RecommendedSellers(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$RecommendedSellers ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$pageCount = pageCount;
    final lOther$pageCount = other.pageCount;
    if (_$data.containsKey('pageCount') !=
        other._$data.containsKey('pageCount')) {
      return false;
    }
    if (l$pageCount != lOther$pageCount) {
      return false;
    }
    final l$pageNumber = pageNumber;
    final lOther$pageNumber = other.pageNumber;
    if (_$data.containsKey('pageNumber') !=
        other._$data.containsKey('pageNumber')) {
      return false;
    }
    if (l$pageNumber != lOther$pageNumber) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$pageCount = pageCount;
    final l$pageNumber = pageNumber;
    return Object.hashAll([
      _$data.containsKey('pageCount') ? l$pageCount : const {},
      _$data.containsKey('pageNumber') ? l$pageNumber : const {},
    ]);
  }
}

abstract class CopyWith$Variables$Query$RecommendedSellers<TRes> {
  factory CopyWith$Variables$Query$RecommendedSellers(
    Variables$Query$RecommendedSellers instance,
    TRes Function(Variables$Query$RecommendedSellers) then,
  ) = _CopyWithImpl$Variables$Query$RecommendedSellers;

  factory CopyWith$Variables$Query$RecommendedSellers.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$RecommendedSellers;

  TRes call({
    int? pageCount,
    int? pageNumber,
  });
}

class _CopyWithImpl$Variables$Query$RecommendedSellers<TRes>
    implements CopyWith$Variables$Query$RecommendedSellers<TRes> {
  _CopyWithImpl$Variables$Query$RecommendedSellers(
    this._instance,
    this._then,
  );

  final Variables$Query$RecommendedSellers _instance;

  final TRes Function(Variables$Query$RecommendedSellers) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? pageCount = _undefined,
    Object? pageNumber = _undefined,
  }) =>
      _then(Variables$Query$RecommendedSellers._({
        ..._instance._$data,
        if (pageCount != _undefined) 'pageCount': (pageCount as int?),
        if (pageNumber != _undefined) 'pageNumber': (pageNumber as int?),
      }));
}

class _CopyWithStubImpl$Variables$Query$RecommendedSellers<TRes>
    implements CopyWith$Variables$Query$RecommendedSellers<TRes> {
  _CopyWithStubImpl$Variables$Query$RecommendedSellers(this._res);

  TRes _res;

  call({
    int? pageCount,
    int? pageNumber,
  }) =>
      _res;
}

class Query$RecommendedSellers {
  Query$RecommendedSellers({
    this.recommendedSellers,
    this.$__typename = 'Query',
  });

  factory Query$RecommendedSellers.fromJson(Map<String, dynamic> json) {
    final l$recommendedSellers = json['recommendedSellers'];
    final l$$__typename = json['__typename'];
    return Query$RecommendedSellers(
      recommendedSellers: (l$recommendedSellers as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$RecommendedSellers$recommendedSellers.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$RecommendedSellers$recommendedSellers?>? recommendedSellers;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$recommendedSellers = recommendedSellers;
    _resultData['recommendedSellers'] =
        l$recommendedSellers?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$recommendedSellers = recommendedSellers;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$recommendedSellers == null
          ? null
          : Object.hashAll(l$recommendedSellers.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$RecommendedSellers ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$recommendedSellers = recommendedSellers;
    final lOther$recommendedSellers = other.recommendedSellers;
    if (l$recommendedSellers != null && lOther$recommendedSellers != null) {
      if (l$recommendedSellers.length != lOther$recommendedSellers.length) {
        return false;
      }
      for (int i = 0; i < l$recommendedSellers.length; i++) {
        final l$recommendedSellers$entry = l$recommendedSellers[i];
        final lOther$recommendedSellers$entry = lOther$recommendedSellers[i];
        if (l$recommendedSellers$entry != lOther$recommendedSellers$entry) {
          return false;
        }
      }
    } else if (l$recommendedSellers != lOther$recommendedSellers) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$RecommendedSellers
    on Query$RecommendedSellers {
  CopyWith$Query$RecommendedSellers<Query$RecommendedSellers> get copyWith =>
      CopyWith$Query$RecommendedSellers(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$RecommendedSellers<TRes> {
  factory CopyWith$Query$RecommendedSellers(
    Query$RecommendedSellers instance,
    TRes Function(Query$RecommendedSellers) then,
  ) = _CopyWithImpl$Query$RecommendedSellers;

  factory CopyWith$Query$RecommendedSellers.stub(TRes res) =
      _CopyWithStubImpl$Query$RecommendedSellers;

  TRes call({
    List<Query$RecommendedSellers$recommendedSellers?>? recommendedSellers,
    String? $__typename,
  });
  TRes recommendedSellers(
      Iterable<Query$RecommendedSellers$recommendedSellers?>? Function(
              Iterable<
                  CopyWith$Query$RecommendedSellers$recommendedSellers<
                      Query$RecommendedSellers$recommendedSellers>?>?)
          _fn);
}

class _CopyWithImpl$Query$RecommendedSellers<TRes>
    implements CopyWith$Query$RecommendedSellers<TRes> {
  _CopyWithImpl$Query$RecommendedSellers(
    this._instance,
    this._then,
  );

  final Query$RecommendedSellers _instance;

  final TRes Function(Query$RecommendedSellers) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? recommendedSellers = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$RecommendedSellers(
        recommendedSellers: recommendedSellers == _undefined
            ? _instance.recommendedSellers
            : (recommendedSellers
                as List<Query$RecommendedSellers$recommendedSellers?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes recommendedSellers(
          Iterable<Query$RecommendedSellers$recommendedSellers?>? Function(
                  Iterable<
                      CopyWith$Query$RecommendedSellers$recommendedSellers<
                          Query$RecommendedSellers$recommendedSellers>?>?)
              _fn) =>
      call(
          recommendedSellers:
              _fn(_instance.recommendedSellers?.map((e) => e == null
                  ? null
                  : CopyWith$Query$RecommendedSellers$recommendedSellers(
                      e,
                      (i) => i,
                    )))?.toList());
}

class _CopyWithStubImpl$Query$RecommendedSellers<TRes>
    implements CopyWith$Query$RecommendedSellers<TRes> {
  _CopyWithStubImpl$Query$RecommendedSellers(this._res);

  TRes _res;

  call({
    List<Query$RecommendedSellers$recommendedSellers?>? recommendedSellers,
    String? $__typename,
  }) =>
      _res;

  recommendedSellers(_fn) => _res;
}

const documentNodeQueryRecommendedSellers = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'RecommendedSellers'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageCount')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'pageNumber')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: false,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      ),
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'recommendedSellers'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'pageCount'),
            value: VariableNode(name: NameNode(value: 'pageCount')),
          ),
          ArgumentNode(
            name: NameNode(value: 'pageNumber'),
            value: VariableNode(name: NameNode(value: 'pageNumber')),
          ),
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'seller'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'firstName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'lastName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'email'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'bio'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'profilePictureUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'thumbnailUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'gender'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'displayName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'dob'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'dateJoined'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'lastLogin'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'fullName'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'listing'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'location'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'latitude'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'longitude'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'locationName'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: 'noOfFollowing'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'noOfFollowers'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'phone'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: SelectionSetNode(selections: [
                  FieldNode(
                    name: NameNode(value: 'number'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: 'countryCode'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                  FieldNode(
                    name: NameNode(value: '__typename'),
                    alias: null,
                    arguments: [],
                    directives: [],
                    selectionSet: null,
                  ),
                ]),
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'totalSales'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'totalShopValue'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'productViews'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'sellerScore'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'activeListings'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$RecommendedSellers _parserFn$Query$RecommendedSellers(
        Map<String, dynamic> data) =>
    Query$RecommendedSellers.fromJson(data);
typedef OnQueryComplete$Query$RecommendedSellers = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$RecommendedSellers?,
);

class Options$Query$RecommendedSellers
    extends graphql.QueryOptions<Query$RecommendedSellers> {
  Options$Query$RecommendedSellers({
    String? operationName,
    Variables$Query$RecommendedSellers? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$RecommendedSellers? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$RecommendedSellers? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null
                        ? null
                        : _parserFn$Query$RecommendedSellers(data),
                  ),
          onError: onError,
          document: documentNodeQueryRecommendedSellers,
          parserFn: _parserFn$Query$RecommendedSellers,
        );

  final OnQueryComplete$Query$RecommendedSellers? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$RecommendedSellers
    extends graphql.WatchQueryOptions<Query$RecommendedSellers> {
  WatchOptions$Query$RecommendedSellers({
    String? operationName,
    Variables$Query$RecommendedSellers? variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$RecommendedSellers? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables?.toJson() ?? {},
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryRecommendedSellers,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$RecommendedSellers,
        );
}

class FetchMoreOptions$Query$RecommendedSellers
    extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$RecommendedSellers({
    required graphql.UpdateQuery updateQuery,
    Variables$Query$RecommendedSellers? variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables?.toJson() ?? {},
          document: documentNodeQueryRecommendedSellers,
        );
}

extension ClientExtension$Query$RecommendedSellers on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$RecommendedSellers>>
      query$RecommendedSellers(
              [Options$Query$RecommendedSellers? options]) async =>
          await this.query(options ?? Options$Query$RecommendedSellers());
  graphql.ObservableQuery<Query$RecommendedSellers>
      watchQuery$RecommendedSellers(
              [WatchOptions$Query$RecommendedSellers? options]) =>
          this.watchQuery(options ?? WatchOptions$Query$RecommendedSellers());
  void writeQuery$RecommendedSellers({
    required Query$RecommendedSellers data,
    Variables$Query$RecommendedSellers? variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation:
              graphql.Operation(document: documentNodeQueryRecommendedSellers),
          variables: variables?.toJson() ?? const {},
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$RecommendedSellers? readQuery$RecommendedSellers({
    Variables$Query$RecommendedSellers? variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation:
            graphql.Operation(document: documentNodeQueryRecommendedSellers),
        variables: variables?.toJson() ?? const {},
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$RecommendedSellers.fromJson(result);
  }
}

class Query$RecommendedSellers$recommendedSellers {
  Query$RecommendedSellers$recommendedSellers({
    this.seller,
    this.totalSales,
    this.totalShopValue,
    this.productViews,
    this.sellerScore,
    this.activeListings,
    this.$__typename = 'RecommendedSellerType',
  });

  factory Query$RecommendedSellers$recommendedSellers.fromJson(
      Map<String, dynamic> json) {
    final l$seller = json['seller'];
    final l$totalSales = json['totalSales'];
    final l$totalShopValue = json['totalShopValue'];
    final l$productViews = json['productViews'];
    final l$sellerScore = json['sellerScore'];
    final l$activeListings = json['activeListings'];
    final l$$__typename = json['__typename'];
    return Query$RecommendedSellers$recommendedSellers(
      seller: l$seller == null
          ? null
          : Query$RecommendedSellers$recommendedSellers$seller.fromJson(
              (l$seller as Map<String, dynamic>)),
      totalSales: (l$totalSales as String?),
      totalShopValue: (l$totalShopValue as String?),
      productViews: (l$productViews as int?),
      sellerScore: (l$sellerScore as num?)?.toDouble(),
      activeListings: (l$activeListings as int?),
      $__typename: (l$$__typename as String),
    );
  }

  final Query$RecommendedSellers$recommendedSellers$seller? seller;

  final String? totalSales;

  final String? totalShopValue;

  final int? productViews;

  final double? sellerScore;

  final int? activeListings;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$seller = seller;
    _resultData['seller'] = l$seller?.toJson();
    final l$totalSales = totalSales;
    _resultData['totalSales'] = l$totalSales;
    final l$totalShopValue = totalShopValue;
    _resultData['totalShopValue'] = l$totalShopValue;
    final l$productViews = productViews;
    _resultData['productViews'] = l$productViews;
    final l$sellerScore = sellerScore;
    _resultData['sellerScore'] = l$sellerScore;
    final l$activeListings = activeListings;
    _resultData['activeListings'] = l$activeListings;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$seller = seller;
    final l$totalSales = totalSales;
    final l$totalShopValue = totalShopValue;
    final l$productViews = productViews;
    final l$sellerScore = sellerScore;
    final l$activeListings = activeListings;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$seller,
      l$totalSales,
      l$totalShopValue,
      l$productViews,
      l$sellerScore,
      l$activeListings,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$RecommendedSellers$recommendedSellers ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$seller = seller;
    final lOther$seller = other.seller;
    if (l$seller != lOther$seller) {
      return false;
    }
    final l$totalSales = totalSales;
    final lOther$totalSales = other.totalSales;
    if (l$totalSales != lOther$totalSales) {
      return false;
    }
    final l$totalShopValue = totalShopValue;
    final lOther$totalShopValue = other.totalShopValue;
    if (l$totalShopValue != lOther$totalShopValue) {
      return false;
    }
    final l$productViews = productViews;
    final lOther$productViews = other.productViews;
    if (l$productViews != lOther$productViews) {
      return false;
    }
    final l$sellerScore = sellerScore;
    final lOther$sellerScore = other.sellerScore;
    if (l$sellerScore != lOther$sellerScore) {
      return false;
    }
    final l$activeListings = activeListings;
    final lOther$activeListings = other.activeListings;
    if (l$activeListings != lOther$activeListings) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$RecommendedSellers$recommendedSellers
    on Query$RecommendedSellers$recommendedSellers {
  CopyWith$Query$RecommendedSellers$recommendedSellers<
          Query$RecommendedSellers$recommendedSellers>
      get copyWith => CopyWith$Query$RecommendedSellers$recommendedSellers(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$RecommendedSellers$recommendedSellers<TRes> {
  factory CopyWith$Query$RecommendedSellers$recommendedSellers(
    Query$RecommendedSellers$recommendedSellers instance,
    TRes Function(Query$RecommendedSellers$recommendedSellers) then,
  ) = _CopyWithImpl$Query$RecommendedSellers$recommendedSellers;

  factory CopyWith$Query$RecommendedSellers$recommendedSellers.stub(TRes res) =
      _CopyWithStubImpl$Query$RecommendedSellers$recommendedSellers;

  TRes call({
    Query$RecommendedSellers$recommendedSellers$seller? seller,
    String? totalSales,
    String? totalShopValue,
    int? productViews,
    double? sellerScore,
    int? activeListings,
    String? $__typename,
  });
  CopyWith$Query$RecommendedSellers$recommendedSellers$seller<TRes> get seller;
}

class _CopyWithImpl$Query$RecommendedSellers$recommendedSellers<TRes>
    implements CopyWith$Query$RecommendedSellers$recommendedSellers<TRes> {
  _CopyWithImpl$Query$RecommendedSellers$recommendedSellers(
    this._instance,
    this._then,
  );

  final Query$RecommendedSellers$recommendedSellers _instance;

  final TRes Function(Query$RecommendedSellers$recommendedSellers) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? seller = _undefined,
    Object? totalSales = _undefined,
    Object? totalShopValue = _undefined,
    Object? productViews = _undefined,
    Object? sellerScore = _undefined,
    Object? activeListings = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$RecommendedSellers$recommendedSellers(
        seller: seller == _undefined
            ? _instance.seller
            : (seller as Query$RecommendedSellers$recommendedSellers$seller?),
        totalSales: totalSales == _undefined
            ? _instance.totalSales
            : (totalSales as String?),
        totalShopValue: totalShopValue == _undefined
            ? _instance.totalShopValue
            : (totalShopValue as String?),
        productViews: productViews == _undefined
            ? _instance.productViews
            : (productViews as int?),
        sellerScore: sellerScore == _undefined
            ? _instance.sellerScore
            : (sellerScore as double?),
        activeListings: activeListings == _undefined
            ? _instance.activeListings
            : (activeListings as int?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$RecommendedSellers$recommendedSellers$seller<TRes> get seller {
    final local$seller = _instance.seller;
    return local$seller == null
        ? CopyWith$Query$RecommendedSellers$recommendedSellers$seller.stub(
            _then(_instance))
        : CopyWith$Query$RecommendedSellers$recommendedSellers$seller(
            local$seller, (e) => call(seller: e));
  }
}

class _CopyWithStubImpl$Query$RecommendedSellers$recommendedSellers<TRes>
    implements CopyWith$Query$RecommendedSellers$recommendedSellers<TRes> {
  _CopyWithStubImpl$Query$RecommendedSellers$recommendedSellers(this._res);

  TRes _res;

  call({
    Query$RecommendedSellers$recommendedSellers$seller? seller,
    String? totalSales,
    String? totalShopValue,
    int? productViews,
    double? sellerScore,
    int? activeListings,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$RecommendedSellers$recommendedSellers$seller<TRes>
      get seller =>
          CopyWith$Query$RecommendedSellers$recommendedSellers$seller.stub(
              _res);
}

class Query$RecommendedSellers$recommendedSellers$seller {
  Query$RecommendedSellers$recommendedSellers$seller({
    this.id,
    this.firstName,
    this.lastName,
    this.username,
    this.email,
    this.bio,
    this.profilePictureUrl,
    this.thumbnailUrl,
    this.gender,
    this.displayName,
    this.dob,
    this.dateJoined,
    this.lastLogin,
    this.fullName,
    this.listing,
    this.location,
    this.noOfFollowing,
    this.noOfFollowers,
    this.phone,
    this.$__typename = 'UserType',
  });

  factory Query$RecommendedSellers$recommendedSellers$seller.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$firstName = json['firstName'];
    final l$lastName = json['lastName'];
    final l$username = json['username'];
    final l$email = json['email'];
    final l$bio = json['bio'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$thumbnailUrl = json['thumbnailUrl'];
    final l$gender = json['gender'];
    final l$displayName = json['displayName'];
    final l$dob = json['dob'];
    final l$dateJoined = json['dateJoined'];
    final l$lastLogin = json['lastLogin'];
    final l$fullName = json['fullName'];
    final l$listing = json['listing'];
    final l$location = json['location'];
    final l$noOfFollowing = json['noOfFollowing'];
    final l$noOfFollowers = json['noOfFollowers'];
    final l$phone = json['phone'];
    final l$$__typename = json['__typename'];
    return Query$RecommendedSellers$recommendedSellers$seller(
      id: (l$id as int?),
      firstName: (l$firstName as String?),
      lastName: (l$lastName as String?),
      username: (l$username as String?),
      email: (l$email as String?),
      bio: (l$bio as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      thumbnailUrl: (l$thumbnailUrl as String?),
      gender: (l$gender as String?),
      displayName: (l$displayName as String?),
      dob: l$dob == null ? null : DateTime.parse((l$dob as String)),
      dateJoined: l$dateJoined == null
          ? null
          : DateTime.parse((l$dateJoined as String)),
      lastLogin:
          l$lastLogin == null ? null : DateTime.parse((l$lastLogin as String)),
      fullName: (l$fullName as String?),
      listing: (l$listing as int?),
      location: l$location == null
          ? null
          : Query$RecommendedSellers$recommendedSellers$seller$location
              .fromJson((l$location as Map<String, dynamic>)),
      noOfFollowing: (l$noOfFollowing as int?),
      noOfFollowers: (l$noOfFollowers as int?),
      phone: l$phone == null
          ? null
          : Query$RecommendedSellers$recommendedSellers$seller$phone.fromJson(
              (l$phone as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? firstName;

  final String? lastName;

  final String? username;

  final String? email;

  final String? bio;

  final String? profilePictureUrl;

  final String? thumbnailUrl;

  final String? gender;

  final String? displayName;

  final DateTime? dob;

  final DateTime? dateJoined;

  final DateTime? lastLogin;

  final String? fullName;

  final int? listing;

  final Query$RecommendedSellers$recommendedSellers$seller$location? location;

  final int? noOfFollowing;

  final int? noOfFollowers;

  final Query$RecommendedSellers$recommendedSellers$seller$phone? phone;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$firstName = firstName;
    _resultData['firstName'] = l$firstName;
    final l$lastName = lastName;
    _resultData['lastName'] = l$lastName;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$email = email;
    _resultData['email'] = l$email;
    final l$bio = bio;
    _resultData['bio'] = l$bio;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$thumbnailUrl = thumbnailUrl;
    _resultData['thumbnailUrl'] = l$thumbnailUrl;
    final l$gender = gender;
    _resultData['gender'] = l$gender;
    final l$displayName = displayName;
    _resultData['displayName'] = l$displayName;
    final l$dob = dob;
    _resultData['dob'] = l$dob?.toIso8601String();
    final l$dateJoined = dateJoined;
    _resultData['dateJoined'] = l$dateJoined?.toIso8601String();
    final l$lastLogin = lastLogin;
    _resultData['lastLogin'] = l$lastLogin?.toIso8601String();
    final l$fullName = fullName;
    _resultData['fullName'] = l$fullName;
    final l$listing = listing;
    _resultData['listing'] = l$listing;
    final l$location = location;
    _resultData['location'] = l$location?.toJson();
    final l$noOfFollowing = noOfFollowing;
    _resultData['noOfFollowing'] = l$noOfFollowing;
    final l$noOfFollowers = noOfFollowers;
    _resultData['noOfFollowers'] = l$noOfFollowers;
    final l$phone = phone;
    _resultData['phone'] = l$phone?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$firstName = firstName;
    final l$lastName = lastName;
    final l$username = username;
    final l$email = email;
    final l$bio = bio;
    final l$profilePictureUrl = profilePictureUrl;
    final l$thumbnailUrl = thumbnailUrl;
    final l$gender = gender;
    final l$displayName = displayName;
    final l$dob = dob;
    final l$dateJoined = dateJoined;
    final l$lastLogin = lastLogin;
    final l$fullName = fullName;
    final l$listing = listing;
    final l$location = location;
    final l$noOfFollowing = noOfFollowing;
    final l$noOfFollowers = noOfFollowers;
    final l$phone = phone;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$firstName,
      l$lastName,
      l$username,
      l$email,
      l$bio,
      l$profilePictureUrl,
      l$thumbnailUrl,
      l$gender,
      l$displayName,
      l$dob,
      l$dateJoined,
      l$lastLogin,
      l$fullName,
      l$listing,
      l$location,
      l$noOfFollowing,
      l$noOfFollowers,
      l$phone,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$RecommendedSellers$recommendedSellers$seller ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$firstName = firstName;
    final lOther$firstName = other.firstName;
    if (l$firstName != lOther$firstName) {
      return false;
    }
    final l$lastName = lastName;
    final lOther$lastName = other.lastName;
    if (l$lastName != lOther$lastName) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$email = email;
    final lOther$email = other.email;
    if (l$email != lOther$email) {
      return false;
    }
    final l$bio = bio;
    final lOther$bio = other.bio;
    if (l$bio != lOther$bio) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$thumbnailUrl = thumbnailUrl;
    final lOther$thumbnailUrl = other.thumbnailUrl;
    if (l$thumbnailUrl != lOther$thumbnailUrl) {
      return false;
    }
    final l$gender = gender;
    final lOther$gender = other.gender;
    if (l$gender != lOther$gender) {
      return false;
    }
    final l$displayName = displayName;
    final lOther$displayName = other.displayName;
    if (l$displayName != lOther$displayName) {
      return false;
    }
    final l$dob = dob;
    final lOther$dob = other.dob;
    if (l$dob != lOther$dob) {
      return false;
    }
    final l$dateJoined = dateJoined;
    final lOther$dateJoined = other.dateJoined;
    if (l$dateJoined != lOther$dateJoined) {
      return false;
    }
    final l$lastLogin = lastLogin;
    final lOther$lastLogin = other.lastLogin;
    if (l$lastLogin != lOther$lastLogin) {
      return false;
    }
    final l$fullName = fullName;
    final lOther$fullName = other.fullName;
    if (l$fullName != lOther$fullName) {
      return false;
    }
    final l$listing = listing;
    final lOther$listing = other.listing;
    if (l$listing != lOther$listing) {
      return false;
    }
    final l$location = location;
    final lOther$location = other.location;
    if (l$location != lOther$location) {
      return false;
    }
    final l$noOfFollowing = noOfFollowing;
    final lOther$noOfFollowing = other.noOfFollowing;
    if (l$noOfFollowing != lOther$noOfFollowing) {
      return false;
    }
    final l$noOfFollowers = noOfFollowers;
    final lOther$noOfFollowers = other.noOfFollowers;
    if (l$noOfFollowers != lOther$noOfFollowers) {
      return false;
    }
    final l$phone = phone;
    final lOther$phone = other.phone;
    if (l$phone != lOther$phone) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$RecommendedSellers$recommendedSellers$seller
    on Query$RecommendedSellers$recommendedSellers$seller {
  CopyWith$Query$RecommendedSellers$recommendedSellers$seller<
          Query$RecommendedSellers$recommendedSellers$seller>
      get copyWith =>
          CopyWith$Query$RecommendedSellers$recommendedSellers$seller(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$RecommendedSellers$recommendedSellers$seller<
    TRes> {
  factory CopyWith$Query$RecommendedSellers$recommendedSellers$seller(
    Query$RecommendedSellers$recommendedSellers$seller instance,
    TRes Function(Query$RecommendedSellers$recommendedSellers$seller) then,
  ) = _CopyWithImpl$Query$RecommendedSellers$recommendedSellers$seller;

  factory CopyWith$Query$RecommendedSellers$recommendedSellers$seller.stub(
          TRes res) =
      _CopyWithStubImpl$Query$RecommendedSellers$recommendedSellers$seller;

  TRes call({
    int? id,
    String? firstName,
    String? lastName,
    String? username,
    String? email,
    String? bio,
    String? profilePictureUrl,
    String? thumbnailUrl,
    String? gender,
    String? displayName,
    DateTime? dob,
    DateTime? dateJoined,
    DateTime? lastLogin,
    String? fullName,
    int? listing,
    Query$RecommendedSellers$recommendedSellers$seller$location? location,
    int? noOfFollowing,
    int? noOfFollowers,
    Query$RecommendedSellers$recommendedSellers$seller$phone? phone,
    String? $__typename,
  });
  CopyWith$Query$RecommendedSellers$recommendedSellers$seller$location<TRes>
      get location;
  CopyWith$Query$RecommendedSellers$recommendedSellers$seller$phone<TRes>
      get phone;
}

class _CopyWithImpl$Query$RecommendedSellers$recommendedSellers$seller<TRes>
    implements
        CopyWith$Query$RecommendedSellers$recommendedSellers$seller<TRes> {
  _CopyWithImpl$Query$RecommendedSellers$recommendedSellers$seller(
    this._instance,
    this._then,
  );

  final Query$RecommendedSellers$recommendedSellers$seller _instance;

  final TRes Function(Query$RecommendedSellers$recommendedSellers$seller) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? firstName = _undefined,
    Object? lastName = _undefined,
    Object? username = _undefined,
    Object? email = _undefined,
    Object? bio = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? thumbnailUrl = _undefined,
    Object? gender = _undefined,
    Object? displayName = _undefined,
    Object? dob = _undefined,
    Object? dateJoined = _undefined,
    Object? lastLogin = _undefined,
    Object? fullName = _undefined,
    Object? listing = _undefined,
    Object? location = _undefined,
    Object? noOfFollowing = _undefined,
    Object? noOfFollowers = _undefined,
    Object? phone = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$RecommendedSellers$recommendedSellers$seller(
        id: id == _undefined ? _instance.id : (id as int?),
        firstName: firstName == _undefined
            ? _instance.firstName
            : (firstName as String?),
        lastName:
            lastName == _undefined ? _instance.lastName : (lastName as String?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        email: email == _undefined ? _instance.email : (email as String?),
        bio: bio == _undefined ? _instance.bio : (bio as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        thumbnailUrl: thumbnailUrl == _undefined
            ? _instance.thumbnailUrl
            : (thumbnailUrl as String?),
        gender: gender == _undefined ? _instance.gender : (gender as String?),
        displayName: displayName == _undefined
            ? _instance.displayName
            : (displayName as String?),
        dob: dob == _undefined ? _instance.dob : (dob as DateTime?),
        dateJoined: dateJoined == _undefined
            ? _instance.dateJoined
            : (dateJoined as DateTime?),
        lastLogin: lastLogin == _undefined
            ? _instance.lastLogin
            : (lastLogin as DateTime?),
        fullName:
            fullName == _undefined ? _instance.fullName : (fullName as String?),
        listing: listing == _undefined ? _instance.listing : (listing as int?),
        location: location == _undefined
            ? _instance.location
            : (location
                as Query$RecommendedSellers$recommendedSellers$seller$location?),
        noOfFollowing: noOfFollowing == _undefined
            ? _instance.noOfFollowing
            : (noOfFollowing as int?),
        noOfFollowers: noOfFollowers == _undefined
            ? _instance.noOfFollowers
            : (noOfFollowers as int?),
        phone: phone == _undefined
            ? _instance.phone
            : (phone
                as Query$RecommendedSellers$recommendedSellers$seller$phone?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$RecommendedSellers$recommendedSellers$seller$location<TRes>
      get location {
    final local$location = _instance.location;
    return local$location == null
        ? CopyWith$Query$RecommendedSellers$recommendedSellers$seller$location
            .stub(_then(_instance))
        : CopyWith$Query$RecommendedSellers$recommendedSellers$seller$location(
            local$location, (e) => call(location: e));
  }

  CopyWith$Query$RecommendedSellers$recommendedSellers$seller$phone<TRes>
      get phone {
    final local$phone = _instance.phone;
    return local$phone == null
        ? CopyWith$Query$RecommendedSellers$recommendedSellers$seller$phone
            .stub(_then(_instance))
        : CopyWith$Query$RecommendedSellers$recommendedSellers$seller$phone(
            local$phone, (e) => call(phone: e));
  }
}

class _CopyWithStubImpl$Query$RecommendedSellers$recommendedSellers$seller<TRes>
    implements
        CopyWith$Query$RecommendedSellers$recommendedSellers$seller<TRes> {
  _CopyWithStubImpl$Query$RecommendedSellers$recommendedSellers$seller(
      this._res);

  TRes _res;

  call({
    int? id,
    String? firstName,
    String? lastName,
    String? username,
    String? email,
    String? bio,
    String? profilePictureUrl,
    String? thumbnailUrl,
    String? gender,
    String? displayName,
    DateTime? dob,
    DateTime? dateJoined,
    DateTime? lastLogin,
    String? fullName,
    int? listing,
    Query$RecommendedSellers$recommendedSellers$seller$location? location,
    int? noOfFollowing,
    int? noOfFollowers,
    Query$RecommendedSellers$recommendedSellers$seller$phone? phone,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$RecommendedSellers$recommendedSellers$seller$location<TRes>
      get location =>
          CopyWith$Query$RecommendedSellers$recommendedSellers$seller$location
              .stub(_res);

  CopyWith$Query$RecommendedSellers$recommendedSellers$seller$phone<TRes>
      get phone =>
          CopyWith$Query$RecommendedSellers$recommendedSellers$seller$phone
              .stub(_res);
}

class Query$RecommendedSellers$recommendedSellers$seller$location {
  Query$RecommendedSellers$recommendedSellers$seller$location({
    this.latitude,
    this.longitude,
    this.locationName,
    this.$__typename = 'LocationType',
  });

  factory Query$RecommendedSellers$recommendedSellers$seller$location.fromJson(
      Map<String, dynamic> json) {
    final l$latitude = json['latitude'];
    final l$longitude = json['longitude'];
    final l$locationName = json['locationName'];
    final l$$__typename = json['__typename'];
    return Query$RecommendedSellers$recommendedSellers$seller$location(
      latitude: (l$latitude as String?),
      longitude: (l$longitude as String?),
      locationName: (l$locationName as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? latitude;

  final String? longitude;

  final String? locationName;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$latitude = latitude;
    _resultData['latitude'] = l$latitude;
    final l$longitude = longitude;
    _resultData['longitude'] = l$longitude;
    final l$locationName = locationName;
    _resultData['locationName'] = l$locationName;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$latitude = latitude;
    final l$longitude = longitude;
    final l$locationName = locationName;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$latitude,
      l$longitude,
      l$locationName,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$RecommendedSellers$recommendedSellers$seller$location ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$latitude = latitude;
    final lOther$latitude = other.latitude;
    if (l$latitude != lOther$latitude) {
      return false;
    }
    final l$longitude = longitude;
    final lOther$longitude = other.longitude;
    if (l$longitude != lOther$longitude) {
      return false;
    }
    final l$locationName = locationName;
    final lOther$locationName = other.locationName;
    if (l$locationName != lOther$locationName) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$RecommendedSellers$recommendedSellers$seller$location
    on Query$RecommendedSellers$recommendedSellers$seller$location {
  CopyWith$Query$RecommendedSellers$recommendedSellers$seller$location<
          Query$RecommendedSellers$recommendedSellers$seller$location>
      get copyWith =>
          CopyWith$Query$RecommendedSellers$recommendedSellers$seller$location(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$RecommendedSellers$recommendedSellers$seller$location<
    TRes> {
  factory CopyWith$Query$RecommendedSellers$recommendedSellers$seller$location(
    Query$RecommendedSellers$recommendedSellers$seller$location instance,
    TRes Function(Query$RecommendedSellers$recommendedSellers$seller$location)
        then,
  ) = _CopyWithImpl$Query$RecommendedSellers$recommendedSellers$seller$location;

  factory CopyWith$Query$RecommendedSellers$recommendedSellers$seller$location.stub(
          TRes res) =
      _CopyWithStubImpl$Query$RecommendedSellers$recommendedSellers$seller$location;

  TRes call({
    String? latitude,
    String? longitude,
    String? locationName,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$RecommendedSellers$recommendedSellers$seller$location<
        TRes>
    implements
        CopyWith$Query$RecommendedSellers$recommendedSellers$seller$location<
            TRes> {
  _CopyWithImpl$Query$RecommendedSellers$recommendedSellers$seller$location(
    this._instance,
    this._then,
  );

  final Query$RecommendedSellers$recommendedSellers$seller$location _instance;

  final TRes Function(
      Query$RecommendedSellers$recommendedSellers$seller$location) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? latitude = _undefined,
    Object? longitude = _undefined,
    Object? locationName = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$RecommendedSellers$recommendedSellers$seller$location(
        latitude:
            latitude == _undefined ? _instance.latitude : (latitude as String?),
        longitude: longitude == _undefined
            ? _instance.longitude
            : (longitude as String?),
        locationName: locationName == _undefined
            ? _instance.locationName
            : (locationName as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$RecommendedSellers$recommendedSellers$seller$location<
        TRes>
    implements
        CopyWith$Query$RecommendedSellers$recommendedSellers$seller$location<
            TRes> {
  _CopyWithStubImpl$Query$RecommendedSellers$recommendedSellers$seller$location(
      this._res);

  TRes _res;

  call({
    String? latitude,
    String? longitude,
    String? locationName,
    String? $__typename,
  }) =>
      _res;
}

class Query$RecommendedSellers$recommendedSellers$seller$phone {
  Query$RecommendedSellers$recommendedSellers$seller$phone({
    this.number,
    this.countryCode,
    this.$__typename = 'PhoneType',
  });

  factory Query$RecommendedSellers$recommendedSellers$seller$phone.fromJson(
      Map<String, dynamic> json) {
    final l$number = json['number'];
    final l$countryCode = json['countryCode'];
    final l$$__typename = json['__typename'];
    return Query$RecommendedSellers$recommendedSellers$seller$phone(
      number: (l$number as String?),
      countryCode: (l$countryCode as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String? number;

  final String? countryCode;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$number = number;
    _resultData['number'] = l$number;
    final l$countryCode = countryCode;
    _resultData['countryCode'] = l$countryCode;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$number = number;
    final l$countryCode = countryCode;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$number,
      l$countryCode,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$RecommendedSellers$recommendedSellers$seller$phone ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$number = number;
    final lOther$number = other.number;
    if (l$number != lOther$number) {
      return false;
    }
    final l$countryCode = countryCode;
    final lOther$countryCode = other.countryCode;
    if (l$countryCode != lOther$countryCode) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$RecommendedSellers$recommendedSellers$seller$phone
    on Query$RecommendedSellers$recommendedSellers$seller$phone {
  CopyWith$Query$RecommendedSellers$recommendedSellers$seller$phone<
          Query$RecommendedSellers$recommendedSellers$seller$phone>
      get copyWith =>
          CopyWith$Query$RecommendedSellers$recommendedSellers$seller$phone(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$RecommendedSellers$recommendedSellers$seller$phone<
    TRes> {
  factory CopyWith$Query$RecommendedSellers$recommendedSellers$seller$phone(
    Query$RecommendedSellers$recommendedSellers$seller$phone instance,
    TRes Function(Query$RecommendedSellers$recommendedSellers$seller$phone)
        then,
  ) = _CopyWithImpl$Query$RecommendedSellers$recommendedSellers$seller$phone;

  factory CopyWith$Query$RecommendedSellers$recommendedSellers$seller$phone.stub(
          TRes res) =
      _CopyWithStubImpl$Query$RecommendedSellers$recommendedSellers$seller$phone;

  TRes call({
    String? number,
    String? countryCode,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$RecommendedSellers$recommendedSellers$seller$phone<
        TRes>
    implements
        CopyWith$Query$RecommendedSellers$recommendedSellers$seller$phone<
            TRes> {
  _CopyWithImpl$Query$RecommendedSellers$recommendedSellers$seller$phone(
    this._instance,
    this._then,
  );

  final Query$RecommendedSellers$recommendedSellers$seller$phone _instance;

  final TRes Function(Query$RecommendedSellers$recommendedSellers$seller$phone)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? number = _undefined,
    Object? countryCode = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$RecommendedSellers$recommendedSellers$seller$phone(
        number: number == _undefined ? _instance.number : (number as String?),
        countryCode: countryCode == _undefined
            ? _instance.countryCode
            : (countryCode as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$RecommendedSellers$recommendedSellers$seller$phone<
        TRes>
    implements
        CopyWith$Query$RecommendedSellers$recommendedSellers$seller$phone<
            TRes> {
  _CopyWithStubImpl$Query$RecommendedSellers$recommendedSellers$seller$phone(
      this._res);

  TRes _res;

  call({
    String? number,
    String? countryCode,
    String? $__typename,
  }) =>
      _res;
}

class Variables$Query$FavoriteBrandProducts {
  factory Variables$Query$FavoriteBrandProducts({required int topCount}) =>
      Variables$Query$FavoriteBrandProducts._({
        r'topCount': topCount,
      });

  Variables$Query$FavoriteBrandProducts._(this._$data);

  factory Variables$Query$FavoriteBrandProducts.fromJson(
      Map<String, dynamic> data) {
    final result$data = <String, dynamic>{};
    final l$topCount = data['topCount'];
    result$data['topCount'] = (l$topCount as int);
    return Variables$Query$FavoriteBrandProducts._(result$data);
  }

  Map<String, dynamic> _$data;

  int get topCount => (_$data['topCount'] as int);

  Map<String, dynamic> toJson() {
    final result$data = <String, dynamic>{};
    final l$topCount = topCount;
    result$data['topCount'] = l$topCount;
    return result$data;
  }

  CopyWith$Variables$Query$FavoriteBrandProducts<
          Variables$Query$FavoriteBrandProducts>
      get copyWith => CopyWith$Variables$Query$FavoriteBrandProducts(
            this,
            (i) => i,
          );

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Variables$Query$FavoriteBrandProducts ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$topCount = topCount;
    final lOther$topCount = other.topCount;
    if (l$topCount != lOther$topCount) {
      return false;
    }
    return true;
  }

  @override
  int get hashCode {
    final l$topCount = topCount;
    return Object.hashAll([l$topCount]);
  }
}

abstract class CopyWith$Variables$Query$FavoriteBrandProducts<TRes> {
  factory CopyWith$Variables$Query$FavoriteBrandProducts(
    Variables$Query$FavoriteBrandProducts instance,
    TRes Function(Variables$Query$FavoriteBrandProducts) then,
  ) = _CopyWithImpl$Variables$Query$FavoriteBrandProducts;

  factory CopyWith$Variables$Query$FavoriteBrandProducts.stub(TRes res) =
      _CopyWithStubImpl$Variables$Query$FavoriteBrandProducts;

  TRes call({int? topCount});
}

class _CopyWithImpl$Variables$Query$FavoriteBrandProducts<TRes>
    implements CopyWith$Variables$Query$FavoriteBrandProducts<TRes> {
  _CopyWithImpl$Variables$Query$FavoriteBrandProducts(
    this._instance,
    this._then,
  );

  final Variables$Query$FavoriteBrandProducts _instance;

  final TRes Function(Variables$Query$FavoriteBrandProducts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({Object? topCount = _undefined}) =>
      _then(Variables$Query$FavoriteBrandProducts._({
        ..._instance._$data,
        if (topCount != _undefined && topCount != null)
          'topCount': (topCount as int),
      }));
}

class _CopyWithStubImpl$Variables$Query$FavoriteBrandProducts<TRes>
    implements CopyWith$Variables$Query$FavoriteBrandProducts<TRes> {
  _CopyWithStubImpl$Variables$Query$FavoriteBrandProducts(this._res);

  TRes _res;

  call({int? topCount}) => _res;
}

class Query$FavoriteBrandProducts {
  Query$FavoriteBrandProducts({
    this.favoriteBrandProducts,
    this.$__typename = 'Query',
  });

  factory Query$FavoriteBrandProducts.fromJson(Map<String, dynamic> json) {
    final l$favoriteBrandProducts = json['favoriteBrandProducts'];
    final l$$__typename = json['__typename'];
    return Query$FavoriteBrandProducts(
      favoriteBrandProducts: (l$favoriteBrandProducts as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$FavoriteBrandProducts$favoriteBrandProducts.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$FavoriteBrandProducts$favoriteBrandProducts?>?
      favoriteBrandProducts;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$favoriteBrandProducts = favoriteBrandProducts;
    _resultData['favoriteBrandProducts'] =
        l$favoriteBrandProducts?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$favoriteBrandProducts = favoriteBrandProducts;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$favoriteBrandProducts == null
          ? null
          : Object.hashAll(l$favoriteBrandProducts.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$FavoriteBrandProducts ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$favoriteBrandProducts = favoriteBrandProducts;
    final lOther$favoriteBrandProducts = other.favoriteBrandProducts;
    if (l$favoriteBrandProducts != null &&
        lOther$favoriteBrandProducts != null) {
      if (l$favoriteBrandProducts.length !=
          lOther$favoriteBrandProducts.length) {
        return false;
      }
      for (int i = 0; i < l$favoriteBrandProducts.length; i++) {
        final l$favoriteBrandProducts$entry = l$favoriteBrandProducts[i];
        final lOther$favoriteBrandProducts$entry =
            lOther$favoriteBrandProducts[i];
        if (l$favoriteBrandProducts$entry !=
            lOther$favoriteBrandProducts$entry) {
          return false;
        }
      }
    } else if (l$favoriteBrandProducts != lOther$favoriteBrandProducts) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$FavoriteBrandProducts
    on Query$FavoriteBrandProducts {
  CopyWith$Query$FavoriteBrandProducts<Query$FavoriteBrandProducts>
      get copyWith => CopyWith$Query$FavoriteBrandProducts(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$FavoriteBrandProducts<TRes> {
  factory CopyWith$Query$FavoriteBrandProducts(
    Query$FavoriteBrandProducts instance,
    TRes Function(Query$FavoriteBrandProducts) then,
  ) = _CopyWithImpl$Query$FavoriteBrandProducts;

  factory CopyWith$Query$FavoriteBrandProducts.stub(TRes res) =
      _CopyWithStubImpl$Query$FavoriteBrandProducts;

  TRes call({
    List<Query$FavoriteBrandProducts$favoriteBrandProducts?>?
        favoriteBrandProducts,
    String? $__typename,
  });
  TRes favoriteBrandProducts(
      Iterable<Query$FavoriteBrandProducts$favoriteBrandProducts?>? Function(
              Iterable<
                  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts<
                      Query$FavoriteBrandProducts$favoriteBrandProducts>?>?)
          _fn);
}

class _CopyWithImpl$Query$FavoriteBrandProducts<TRes>
    implements CopyWith$Query$FavoriteBrandProducts<TRes> {
  _CopyWithImpl$Query$FavoriteBrandProducts(
    this._instance,
    this._then,
  );

  final Query$FavoriteBrandProducts _instance;

  final TRes Function(Query$FavoriteBrandProducts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? favoriteBrandProducts = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$FavoriteBrandProducts(
        favoriteBrandProducts: favoriteBrandProducts == _undefined
            ? _instance.favoriteBrandProducts
            : (favoriteBrandProducts
                as List<Query$FavoriteBrandProducts$favoriteBrandProducts?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes favoriteBrandProducts(
          Iterable<Query$FavoriteBrandProducts$favoriteBrandProducts?>? Function(
                  Iterable<
                      CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts<
                          Query$FavoriteBrandProducts$favoriteBrandProducts>?>?)
              _fn) =>
      call(
          favoriteBrandProducts:
              _fn(_instance.favoriteBrandProducts?.map((e) => e == null
                  ? null
                  : CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts(
                      e,
                      (i) => i,
                    )))?.toList());
}

class _CopyWithStubImpl$Query$FavoriteBrandProducts<TRes>
    implements CopyWith$Query$FavoriteBrandProducts<TRes> {
  _CopyWithStubImpl$Query$FavoriteBrandProducts(this._res);

  TRes _res;

  call({
    List<Query$FavoriteBrandProducts$favoriteBrandProducts?>?
        favoriteBrandProducts,
    String? $__typename,
  }) =>
      _res;

  favoriteBrandProducts(_fn) => _res;
}

const documentNodeQueryFavoriteBrandProducts = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'FavoriteBrandProducts'),
    variableDefinitions: [
      VariableDefinitionNode(
        variable: VariableNode(name: NameNode(value: 'topCount')),
        type: NamedTypeNode(
          name: NameNode(value: 'Int'),
          isNonNull: true,
        ),
        defaultValue: DefaultValueNode(value: null),
        directives: [],
      )
    ],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'favoriteBrandProducts'),
        alias: null,
        arguments: [
          ArgumentNode(
            name: NameNode(value: 'top'),
            value: VariableNode(name: NameNode(value: 'topCount')),
          )
        ],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'name'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'description'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isFeatured'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'category'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'seller'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'profilePictureUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'condition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'discountPrice'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'size'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'condition'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'price'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'parcelSize'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'views'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'likes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'userLiked'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'imagesUrl'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'createdAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'updatedAt'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'likes'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'color'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'materials'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: 'brand'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'name'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$FavoriteBrandProducts _parserFn$Query$FavoriteBrandProducts(
        Map<String, dynamic> data) =>
    Query$FavoriteBrandProducts.fromJson(data);
typedef OnQueryComplete$Query$FavoriteBrandProducts = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$FavoriteBrandProducts?,
);

class Options$Query$FavoriteBrandProducts
    extends graphql.QueryOptions<Query$FavoriteBrandProducts> {
  Options$Query$FavoriteBrandProducts({
    String? operationName,
    required Variables$Query$FavoriteBrandProducts variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$FavoriteBrandProducts? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$FavoriteBrandProducts? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null
                        ? null
                        : _parserFn$Query$FavoriteBrandProducts(data),
                  ),
          onError: onError,
          document: documentNodeQueryFavoriteBrandProducts,
          parserFn: _parserFn$Query$FavoriteBrandProducts,
        );

  final OnQueryComplete$Query$FavoriteBrandProducts? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$FavoriteBrandProducts
    extends graphql.WatchQueryOptions<Query$FavoriteBrandProducts> {
  WatchOptions$Query$FavoriteBrandProducts({
    String? operationName,
    required Variables$Query$FavoriteBrandProducts variables,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$FavoriteBrandProducts? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          variables: variables.toJson(),
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryFavoriteBrandProducts,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$FavoriteBrandProducts,
        );
}

class FetchMoreOptions$Query$FavoriteBrandProducts
    extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$FavoriteBrandProducts({
    required graphql.UpdateQuery updateQuery,
    required Variables$Query$FavoriteBrandProducts variables,
  }) : super(
          updateQuery: updateQuery,
          variables: variables.toJson(),
          document: documentNodeQueryFavoriteBrandProducts,
        );
}

extension ClientExtension$Query$FavoriteBrandProducts on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$FavoriteBrandProducts>>
      query$FavoriteBrandProducts(
              Options$Query$FavoriteBrandProducts options) async =>
          await this.query(options);
  graphql.ObservableQuery<Query$FavoriteBrandProducts>
      watchQuery$FavoriteBrandProducts(
              WatchOptions$Query$FavoriteBrandProducts options) =>
          this.watchQuery(options);
  void writeQuery$FavoriteBrandProducts({
    required Query$FavoriteBrandProducts data,
    required Variables$Query$FavoriteBrandProducts variables,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
          operation: graphql.Operation(
              document: documentNodeQueryFavoriteBrandProducts),
          variables: variables.toJson(),
        ),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$FavoriteBrandProducts? readQuery$FavoriteBrandProducts({
    required Variables$Query$FavoriteBrandProducts variables,
    bool optimistic = true,
  }) {
    final result = this.readQuery(
      graphql.Request(
        operation:
            graphql.Operation(document: documentNodeQueryFavoriteBrandProducts),
        variables: variables.toJson(),
      ),
      optimistic: optimistic,
    );
    return result == null ? null : Query$FavoriteBrandProducts.fromJson(result);
  }
}

class Query$FavoriteBrandProducts$favoriteBrandProducts {
  Query$FavoriteBrandProducts$favoriteBrandProducts({
    required this.id,
    required this.name,
    required this.description,
    required this.isFeatured,
    this.category,
    this.seller,
    this.condition,
    required this.discountPrice,
    this.size,
    this.price,
    this.parcelSize,
    required this.views,
    required this.likes,
    this.userLiked,
    required this.imagesUrl,
    required this.createdAt,
    required this.updatedAt,
    required this.color,
    this.materials,
    this.brand,
    this.$__typename = 'ProductType',
  });

  factory Query$FavoriteBrandProducts$favoriteBrandProducts.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$description = json['description'];
    final l$isFeatured = json['isFeatured'];
    final l$category = json['category'];
    final l$seller = json['seller'];
    final l$condition = json['condition'];
    final l$discountPrice = json['discountPrice'];
    final l$size = json['size'];
    final l$price = json['price'];
    final l$parcelSize = json['parcelSize'];
    final l$views = json['views'];
    final l$likes = json['likes'];
    final l$userLiked = json['userLiked'];
    final l$imagesUrl = json['imagesUrl'];
    final l$createdAt = json['createdAt'];
    final l$updatedAt = json['updatedAt'];
    final l$color = json['color'];
    final l$materials = json['materials'];
    final l$brand = json['brand'];
    final l$$__typename = json['__typename'];
    return Query$FavoriteBrandProducts$favoriteBrandProducts(
      id: (l$id as String),
      name: (l$name as String),
      description: (l$description as String),
      isFeatured: (l$isFeatured as bool),
      category: l$category == null
          ? null
          : Query$FavoriteBrandProducts$favoriteBrandProducts$category.fromJson(
              (l$category as Map<String, dynamic>)),
      seller: l$seller == null
          ? null
          : Query$FavoriteBrandProducts$favoriteBrandProducts$seller.fromJson(
              (l$seller as Map<String, dynamic>)),
      condition: l$condition == null
          ? null
          : fromJson$Enum$ProductsProductConditionChoices(
              (l$condition as String)),
      discountPrice: (l$discountPrice as String),
      size: l$size == null
          ? null
          : Query$FavoriteBrandProducts$favoriteBrandProducts$size.fromJson(
              (l$size as Map<String, dynamic>)),
      price: (l$price as num?)?.toDouble(),
      parcelSize: l$parcelSize == null
          ? null
          : fromJson$Enum$ProductsProductParcelSizeChoices(
              (l$parcelSize as String)),
      views: (l$views as int),
      likes: (l$likes as int),
      userLiked: (l$userLiked as bool?),
      imagesUrl:
          (l$imagesUrl as List<dynamic>).map((e) => (e as String)).toList(),
      createdAt: DateTime.parse((l$createdAt as String)),
      updatedAt: DateTime.parse((l$updatedAt as String)),
      color: (l$color as List<dynamic>).map((e) => (e as String)).toList(),
      materials: (l$materials as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$FavoriteBrandProducts$favoriteBrandProducts$materials
                  .fromJson((e as Map<String, dynamic>)))
          .toList(),
      brand: l$brand == null
          ? null
          : Query$FavoriteBrandProducts$favoriteBrandProducts$brand.fromJson(
              (l$brand as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String id;

  final String name;

  final String description;

  final bool isFeatured;

  final Query$FavoriteBrandProducts$favoriteBrandProducts$category? category;

  final Query$FavoriteBrandProducts$favoriteBrandProducts$seller? seller;

  final Enum$ProductsProductConditionChoices? condition;

  final String discountPrice;

  final Query$FavoriteBrandProducts$favoriteBrandProducts$size? size;

  final double? price;

  final Enum$ProductsProductParcelSizeChoices? parcelSize;

  final int views;

  final int likes;

  final bool? userLiked;

  final List<String> imagesUrl;

  final DateTime createdAt;

  final DateTime updatedAt;

  final List<String> color;

  final List<Query$FavoriteBrandProducts$favoriteBrandProducts$materials?>?
      materials;

  final Query$FavoriteBrandProducts$favoriteBrandProducts$brand? brand;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$description = description;
    _resultData['description'] = l$description;
    final l$isFeatured = isFeatured;
    _resultData['isFeatured'] = l$isFeatured;
    final l$category = category;
    _resultData['category'] = l$category?.toJson();
    final l$seller = seller;
    _resultData['seller'] = l$seller?.toJson();
    final l$condition = condition;
    _resultData['condition'] = l$condition == null
        ? null
        : toJson$Enum$ProductsProductConditionChoices(l$condition);
    final l$discountPrice = discountPrice;
    _resultData['discountPrice'] = l$discountPrice;
    final l$size = size;
    _resultData['size'] = l$size?.toJson();
    final l$price = price;
    _resultData['price'] = l$price;
    final l$parcelSize = parcelSize;
    _resultData['parcelSize'] = l$parcelSize == null
        ? null
        : toJson$Enum$ProductsProductParcelSizeChoices(l$parcelSize);
    final l$views = views;
    _resultData['views'] = l$views;
    final l$likes = likes;
    _resultData['likes'] = l$likes;
    final l$userLiked = userLiked;
    _resultData['userLiked'] = l$userLiked;
    final l$imagesUrl = imagesUrl;
    _resultData['imagesUrl'] = l$imagesUrl.map((e) => e).toList();
    final l$createdAt = createdAt;
    _resultData['createdAt'] = l$createdAt.toIso8601String();
    final l$updatedAt = updatedAt;
    _resultData['updatedAt'] = l$updatedAt.toIso8601String();
    final l$color = color;
    _resultData['color'] = l$color.map((e) => e).toList();
    final l$materials = materials;
    _resultData['materials'] = l$materials?.map((e) => e?.toJson()).toList();
    final l$brand = brand;
    _resultData['brand'] = l$brand?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$description = description;
    final l$isFeatured = isFeatured;
    final l$category = category;
    final l$seller = seller;
    final l$condition = condition;
    final l$discountPrice = discountPrice;
    final l$size = size;
    final l$price = price;
    final l$parcelSize = parcelSize;
    final l$views = views;
    final l$likes = likes;
    final l$userLiked = userLiked;
    final l$imagesUrl = imagesUrl;
    final l$createdAt = createdAt;
    final l$updatedAt = updatedAt;
    final l$color = color;
    final l$materials = materials;
    final l$brand = brand;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$description,
      l$isFeatured,
      l$category,
      l$seller,
      l$condition,
      l$discountPrice,
      l$size,
      l$price,
      l$parcelSize,
      l$views,
      l$likes,
      l$userLiked,
      Object.hashAll(l$imagesUrl.map((v) => v)),
      l$createdAt,
      l$updatedAt,
      Object.hashAll(l$color.map((v) => v)),
      l$materials == null ? null : Object.hashAll(l$materials.map((v) => v)),
      l$brand,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$FavoriteBrandProducts$favoriteBrandProducts ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$description = description;
    final lOther$description = other.description;
    if (l$description != lOther$description) {
      return false;
    }
    final l$isFeatured = isFeatured;
    final lOther$isFeatured = other.isFeatured;
    if (l$isFeatured != lOther$isFeatured) {
      return false;
    }
    final l$category = category;
    final lOther$category = other.category;
    if (l$category != lOther$category) {
      return false;
    }
    final l$seller = seller;
    final lOther$seller = other.seller;
    if (l$seller != lOther$seller) {
      return false;
    }
    final l$condition = condition;
    final lOther$condition = other.condition;
    if (l$condition != lOther$condition) {
      return false;
    }
    final l$discountPrice = discountPrice;
    final lOther$discountPrice = other.discountPrice;
    if (l$discountPrice != lOther$discountPrice) {
      return false;
    }
    final l$size = size;
    final lOther$size = other.size;
    if (l$size != lOther$size) {
      return false;
    }
    final l$price = price;
    final lOther$price = other.price;
    if (l$price != lOther$price) {
      return false;
    }
    final l$parcelSize = parcelSize;
    final lOther$parcelSize = other.parcelSize;
    if (l$parcelSize != lOther$parcelSize) {
      return false;
    }
    final l$views = views;
    final lOther$views = other.views;
    if (l$views != lOther$views) {
      return false;
    }
    final l$likes = likes;
    final lOther$likes = other.likes;
    if (l$likes != lOther$likes) {
      return false;
    }
    final l$userLiked = userLiked;
    final lOther$userLiked = other.userLiked;
    if (l$userLiked != lOther$userLiked) {
      return false;
    }
    final l$imagesUrl = imagesUrl;
    final lOther$imagesUrl = other.imagesUrl;
    if (l$imagesUrl.length != lOther$imagesUrl.length) {
      return false;
    }
    for (int i = 0; i < l$imagesUrl.length; i++) {
      final l$imagesUrl$entry = l$imagesUrl[i];
      final lOther$imagesUrl$entry = lOther$imagesUrl[i];
      if (l$imagesUrl$entry != lOther$imagesUrl$entry) {
        return false;
      }
    }
    final l$createdAt = createdAt;
    final lOther$createdAt = other.createdAt;
    if (l$createdAt != lOther$createdAt) {
      return false;
    }
    final l$updatedAt = updatedAt;
    final lOther$updatedAt = other.updatedAt;
    if (l$updatedAt != lOther$updatedAt) {
      return false;
    }
    final l$color = color;
    final lOther$color = other.color;
    if (l$color.length != lOther$color.length) {
      return false;
    }
    for (int i = 0; i < l$color.length; i++) {
      final l$color$entry = l$color[i];
      final lOther$color$entry = lOther$color[i];
      if (l$color$entry != lOther$color$entry) {
        return false;
      }
    }
    final l$materials = materials;
    final lOther$materials = other.materials;
    if (l$materials != null && lOther$materials != null) {
      if (l$materials.length != lOther$materials.length) {
        return false;
      }
      for (int i = 0; i < l$materials.length; i++) {
        final l$materials$entry = l$materials[i];
        final lOther$materials$entry = lOther$materials[i];
        if (l$materials$entry != lOther$materials$entry) {
          return false;
        }
      }
    } else if (l$materials != lOther$materials) {
      return false;
    }
    final l$brand = brand;
    final lOther$brand = other.brand;
    if (l$brand != lOther$brand) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$FavoriteBrandProducts$favoriteBrandProducts
    on Query$FavoriteBrandProducts$favoriteBrandProducts {
  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts<
          Query$FavoriteBrandProducts$favoriteBrandProducts>
      get copyWith =>
          CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts<
    TRes> {
  factory CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts(
    Query$FavoriteBrandProducts$favoriteBrandProducts instance,
    TRes Function(Query$FavoriteBrandProducts$favoriteBrandProducts) then,
  ) = _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts;

  factory CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts.stub(
          TRes res) =
      _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts;

  TRes call({
    String? id,
    String? name,
    String? description,
    bool? isFeatured,
    Query$FavoriteBrandProducts$favoriteBrandProducts$category? category,
    Query$FavoriteBrandProducts$favoriteBrandProducts$seller? seller,
    Enum$ProductsProductConditionChoices? condition,
    String? discountPrice,
    Query$FavoriteBrandProducts$favoriteBrandProducts$size? size,
    double? price,
    Enum$ProductsProductParcelSizeChoices? parcelSize,
    int? views,
    int? likes,
    bool? userLiked,
    List<String>? imagesUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<String>? color,
    List<Query$FavoriteBrandProducts$favoriteBrandProducts$materials?>?
        materials,
    Query$FavoriteBrandProducts$favoriteBrandProducts$brand? brand,
    String? $__typename,
  });
  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$category<TRes>
      get category;
  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$seller<TRes>
      get seller;
  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$size<TRes>
      get size;
  TRes materials(
      Iterable<Query$FavoriteBrandProducts$favoriteBrandProducts$materials?>? Function(
              Iterable<
                  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$materials<
                      Query$FavoriteBrandProducts$favoriteBrandProducts$materials>?>?)
          _fn);
  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$brand<TRes>
      get brand;
}

class _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts<TRes>
    implements
        CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts<TRes> {
  _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts(
    this._instance,
    this._then,
  );

  final Query$FavoriteBrandProducts$favoriteBrandProducts _instance;

  final TRes Function(Query$FavoriteBrandProducts$favoriteBrandProducts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? description = _undefined,
    Object? isFeatured = _undefined,
    Object? category = _undefined,
    Object? seller = _undefined,
    Object? condition = _undefined,
    Object? discountPrice = _undefined,
    Object? size = _undefined,
    Object? price = _undefined,
    Object? parcelSize = _undefined,
    Object? views = _undefined,
    Object? likes = _undefined,
    Object? userLiked = _undefined,
    Object? imagesUrl = _undefined,
    Object? createdAt = _undefined,
    Object? updatedAt = _undefined,
    Object? color = _undefined,
    Object? materials = _undefined,
    Object? brand = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$FavoriteBrandProducts$favoriteBrandProducts(
        id: id == _undefined || id == null ? _instance.id : (id as String),
        name: name == _undefined || name == null
            ? _instance.name
            : (name as String),
        description: description == _undefined || description == null
            ? _instance.description
            : (description as String),
        isFeatured: isFeatured == _undefined || isFeatured == null
            ? _instance.isFeatured
            : (isFeatured as bool),
        category: category == _undefined
            ? _instance.category
            : (category
                as Query$FavoriteBrandProducts$favoriteBrandProducts$category?),
        seller: seller == _undefined
            ? _instance.seller
            : (seller
                as Query$FavoriteBrandProducts$favoriteBrandProducts$seller?),
        condition: condition == _undefined
            ? _instance.condition
            : (condition as Enum$ProductsProductConditionChoices?),
        discountPrice: discountPrice == _undefined || discountPrice == null
            ? _instance.discountPrice
            : (discountPrice as String),
        size: size == _undefined
            ? _instance.size
            : (size as Query$FavoriteBrandProducts$favoriteBrandProducts$size?),
        price: price == _undefined ? _instance.price : (price as double?),
        parcelSize: parcelSize == _undefined
            ? _instance.parcelSize
            : (parcelSize as Enum$ProductsProductParcelSizeChoices?),
        views: views == _undefined || views == null
            ? _instance.views
            : (views as int),
        likes: likes == _undefined || likes == null
            ? _instance.likes
            : (likes as int),
        userLiked: userLiked == _undefined
            ? _instance.userLiked
            : (userLiked as bool?),
        imagesUrl: imagesUrl == _undefined || imagesUrl == null
            ? _instance.imagesUrl
            : (imagesUrl as List<String>),
        createdAt: createdAt == _undefined || createdAt == null
            ? _instance.createdAt
            : (createdAt as DateTime),
        updatedAt: updatedAt == _undefined || updatedAt == null
            ? _instance.updatedAt
            : (updatedAt as DateTime),
        color: color == _undefined || color == null
            ? _instance.color
            : (color as List<String>),
        materials: materials == _undefined
            ? _instance.materials
            : (materials as List<
                Query$FavoriteBrandProducts$favoriteBrandProducts$materials?>?),
        brand: brand == _undefined
            ? _instance.brand
            : (brand
                as Query$FavoriteBrandProducts$favoriteBrandProducts$brand?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$category<TRes>
      get category {
    final local$category = _instance.category;
    return local$category == null
        ? CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$category
            .stub(_then(_instance))
        : CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$category(
            local$category, (e) => call(category: e));
  }

  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$seller<TRes>
      get seller {
    final local$seller = _instance.seller;
    return local$seller == null
        ? CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$seller
            .stub(_then(_instance))
        : CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$seller(
            local$seller, (e) => call(seller: e));
  }

  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$size<TRes>
      get size {
    final local$size = _instance.size;
    return local$size == null
        ? CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$size.stub(
            _then(_instance))
        : CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$size(
            local$size, (e) => call(size: e));
  }

  TRes materials(
          Iterable<Query$FavoriteBrandProducts$favoriteBrandProducts$materials?>? Function(
                  Iterable<
                      CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$materials<
                          Query$FavoriteBrandProducts$favoriteBrandProducts$materials>?>?)
              _fn) =>
      call(
          materials: _fn(_instance.materials?.map((e) => e == null
              ? null
              : CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$materials(
                  e,
                  (i) => i,
                )))?.toList());

  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$brand<TRes>
      get brand {
    final local$brand = _instance.brand;
    return local$brand == null
        ? CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$brand.stub(
            _then(_instance))
        : CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$brand(
            local$brand, (e) => call(brand: e));
  }
}

class _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts<TRes>
    implements
        CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts<TRes> {
  _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts(
      this._res);

  TRes _res;

  call({
    String? id,
    String? name,
    String? description,
    bool? isFeatured,
    Query$FavoriteBrandProducts$favoriteBrandProducts$category? category,
    Query$FavoriteBrandProducts$favoriteBrandProducts$seller? seller,
    Enum$ProductsProductConditionChoices? condition,
    String? discountPrice,
    Query$FavoriteBrandProducts$favoriteBrandProducts$size? size,
    double? price,
    Enum$ProductsProductParcelSizeChoices? parcelSize,
    int? views,
    int? likes,
    bool? userLiked,
    List<String>? imagesUrl,
    DateTime? createdAt,
    DateTime? updatedAt,
    List<String>? color,
    List<Query$FavoriteBrandProducts$favoriteBrandProducts$materials?>?
        materials,
    Query$FavoriteBrandProducts$favoriteBrandProducts$brand? brand,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$category<TRes>
      get category =>
          CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$category
              .stub(_res);

  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$seller<TRes>
      get seller =>
          CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$seller
              .stub(_res);

  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$size<TRes>
      get size =>
          CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$size.stub(
              _res);

  materials(_fn) => _res;

  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$brand<TRes>
      get brand =>
          CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$brand.stub(
              _res);
}

class Query$FavoriteBrandProducts$favoriteBrandProducts$category {
  Query$FavoriteBrandProducts$favoriteBrandProducts$category({
    this.id,
    this.name,
    this.$__typename = 'CategoryType',
  });

  factory Query$FavoriteBrandProducts$favoriteBrandProducts$category.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$FavoriteBrandProducts$favoriteBrandProducts$category(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$FavoriteBrandProducts$favoriteBrandProducts$category ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$FavoriteBrandProducts$favoriteBrandProducts$category
    on Query$FavoriteBrandProducts$favoriteBrandProducts$category {
  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$category<
          Query$FavoriteBrandProducts$favoriteBrandProducts$category>
      get copyWith =>
          CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$category(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$category<
    TRes> {
  factory CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$category(
    Query$FavoriteBrandProducts$favoriteBrandProducts$category instance,
    TRes Function(Query$FavoriteBrandProducts$favoriteBrandProducts$category)
        then,
  ) = _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$category;

  factory CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$category.stub(
          TRes res) =
      _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$category;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$category<
        TRes>
    implements
        CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$category<
            TRes> {
  _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$category(
    this._instance,
    this._then,
  );

  final Query$FavoriteBrandProducts$favoriteBrandProducts$category _instance;

  final TRes Function(
      Query$FavoriteBrandProducts$favoriteBrandProducts$category) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$FavoriteBrandProducts$favoriteBrandProducts$category(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$category<
        TRes>
    implements
        CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$category<
            TRes> {
  _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$category(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$FavoriteBrandProducts$favoriteBrandProducts$seller {
  Query$FavoriteBrandProducts$favoriteBrandProducts$seller({
    this.id,
    this.username,
    this.profilePictureUrl,
    this.$__typename = 'UserType',
  });

  factory Query$FavoriteBrandProducts$favoriteBrandProducts$seller.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$$__typename = json['__typename'];
    return Query$FavoriteBrandProducts$favoriteBrandProducts$seller(
      id: (l$id as int?),
      username: (l$username as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String? profilePictureUrl;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$profilePictureUrl = profilePictureUrl;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$profilePictureUrl,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$FavoriteBrandProducts$favoriteBrandProducts$seller ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$FavoriteBrandProducts$favoriteBrandProducts$seller
    on Query$FavoriteBrandProducts$favoriteBrandProducts$seller {
  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$seller<
          Query$FavoriteBrandProducts$favoriteBrandProducts$seller>
      get copyWith =>
          CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$seller(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$seller<
    TRes> {
  factory CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$seller(
    Query$FavoriteBrandProducts$favoriteBrandProducts$seller instance,
    TRes Function(Query$FavoriteBrandProducts$favoriteBrandProducts$seller)
        then,
  ) = _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$seller;

  factory CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$seller.stub(
          TRes res) =
      _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$seller;

  TRes call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$seller<
        TRes>
    implements
        CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$seller<
            TRes> {
  _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$seller(
    this._instance,
    this._then,
  );

  final Query$FavoriteBrandProducts$favoriteBrandProducts$seller _instance;

  final TRes Function(Query$FavoriteBrandProducts$favoriteBrandProducts$seller)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$FavoriteBrandProducts$favoriteBrandProducts$seller(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$seller<
        TRes>
    implements
        CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$seller<
            TRes> {
  _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$seller(
      this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? $__typename,
  }) =>
      _res;
}

class Query$FavoriteBrandProducts$favoriteBrandProducts$size {
  Query$FavoriteBrandProducts$favoriteBrandProducts$size({
    this.id,
    this.name,
    this.$__typename = 'SizeType',
  });

  factory Query$FavoriteBrandProducts$favoriteBrandProducts$size.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$FavoriteBrandProducts$favoriteBrandProducts$size(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$FavoriteBrandProducts$favoriteBrandProducts$size ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$FavoriteBrandProducts$favoriteBrandProducts$size
    on Query$FavoriteBrandProducts$favoriteBrandProducts$size {
  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$size<
          Query$FavoriteBrandProducts$favoriteBrandProducts$size>
      get copyWith =>
          CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$size(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$size<
    TRes> {
  factory CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$size(
    Query$FavoriteBrandProducts$favoriteBrandProducts$size instance,
    TRes Function(Query$FavoriteBrandProducts$favoriteBrandProducts$size) then,
  ) = _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$size;

  factory CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$size.stub(
          TRes res) =
      _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$size;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$size<TRes>
    implements
        CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$size<TRes> {
  _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$size(
    this._instance,
    this._then,
  );

  final Query$FavoriteBrandProducts$favoriteBrandProducts$size _instance;

  final TRes Function(Query$FavoriteBrandProducts$favoriteBrandProducts$size)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$FavoriteBrandProducts$favoriteBrandProducts$size(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$size<
        TRes>
    implements
        CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$size<TRes> {
  _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$size(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$FavoriteBrandProducts$favoriteBrandProducts$materials {
  Query$FavoriteBrandProducts$favoriteBrandProducts$materials({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$FavoriteBrandProducts$favoriteBrandProducts$materials.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$FavoriteBrandProducts$favoriteBrandProducts$materials(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$FavoriteBrandProducts$favoriteBrandProducts$materials ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$FavoriteBrandProducts$favoriteBrandProducts$materials
    on Query$FavoriteBrandProducts$favoriteBrandProducts$materials {
  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$materials<
          Query$FavoriteBrandProducts$favoriteBrandProducts$materials>
      get copyWith =>
          CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$materials(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$materials<
    TRes> {
  factory CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$materials(
    Query$FavoriteBrandProducts$favoriteBrandProducts$materials instance,
    TRes Function(Query$FavoriteBrandProducts$favoriteBrandProducts$materials)
        then,
  ) = _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$materials;

  factory CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$materials.stub(
          TRes res) =
      _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$materials;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$materials<
        TRes>
    implements
        CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$materials<
            TRes> {
  _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$materials(
    this._instance,
    this._then,
  );

  final Query$FavoriteBrandProducts$favoriteBrandProducts$materials _instance;

  final TRes Function(
      Query$FavoriteBrandProducts$favoriteBrandProducts$materials) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$FavoriteBrandProducts$favoriteBrandProducts$materials(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$materials<
        TRes>
    implements
        CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$materials<
            TRes> {
  _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$materials(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$FavoriteBrandProducts$favoriteBrandProducts$brand {
  Query$FavoriteBrandProducts$favoriteBrandProducts$brand({
    this.id,
    this.name,
    this.$__typename = 'BrandType',
  });

  factory Query$FavoriteBrandProducts$favoriteBrandProducts$brand.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$name = json['name'];
    final l$$__typename = json['__typename'];
    return Query$FavoriteBrandProducts$favoriteBrandProducts$brand(
      id: (l$id as int?),
      name: (l$name as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? name;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$name = name;
    _resultData['name'] = l$name;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$name = name;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$name,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$FavoriteBrandProducts$favoriteBrandProducts$brand ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$name = name;
    final lOther$name = other.name;
    if (l$name != lOther$name) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$FavoriteBrandProducts$favoriteBrandProducts$brand
    on Query$FavoriteBrandProducts$favoriteBrandProducts$brand {
  CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$brand<
          Query$FavoriteBrandProducts$favoriteBrandProducts$brand>
      get copyWith =>
          CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$brand(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$brand<
    TRes> {
  factory CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$brand(
    Query$FavoriteBrandProducts$favoriteBrandProducts$brand instance,
    TRes Function(Query$FavoriteBrandProducts$favoriteBrandProducts$brand) then,
  ) = _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$brand;

  factory CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$brand.stub(
          TRes res) =
      _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$brand;

  TRes call({
    int? id,
    String? name,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$brand<
        TRes>
    implements
        CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$brand<TRes> {
  _CopyWithImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$brand(
    this._instance,
    this._then,
  );

  final Query$FavoriteBrandProducts$favoriteBrandProducts$brand _instance;

  final TRes Function(Query$FavoriteBrandProducts$favoriteBrandProducts$brand)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? name = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$FavoriteBrandProducts$favoriteBrandProducts$brand(
        id: id == _undefined ? _instance.id : (id as int?),
        name: name == _undefined ? _instance.name : (name as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$brand<
        TRes>
    implements
        CopyWith$Query$FavoriteBrandProducts$favoriteBrandProducts$brand<TRes> {
  _CopyWithStubImpl$Query$FavoriteBrandProducts$favoriteBrandProducts$brand(
      this._res);

  TRes _res;

  call({
    int? id,
    String? name,
    String? $__typename,
  }) =>
      _res;
}

class Query$userMultibuyDiscounts {
  Query$userMultibuyDiscounts({
    this.userMultibuyDiscounts,
    this.$__typename = 'Query',
  });

  factory Query$userMultibuyDiscounts.fromJson(Map<String, dynamic> json) {
    final l$userMultibuyDiscounts = json['userMultibuyDiscounts'];
    final l$$__typename = json['__typename'];
    return Query$userMultibuyDiscounts(
      userMultibuyDiscounts: (l$userMultibuyDiscounts as List<dynamic>?)
          ?.map((e) => e == null
              ? null
              : Query$userMultibuyDiscounts$userMultibuyDiscounts.fromJson(
                  (e as Map<String, dynamic>)))
          .toList(),
      $__typename: (l$$__typename as String),
    );
  }

  final List<Query$userMultibuyDiscounts$userMultibuyDiscounts?>?
      userMultibuyDiscounts;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userMultibuyDiscounts = userMultibuyDiscounts;
    _resultData['userMultibuyDiscounts'] =
        l$userMultibuyDiscounts?.map((e) => e?.toJson()).toList();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userMultibuyDiscounts = userMultibuyDiscounts;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userMultibuyDiscounts == null
          ? null
          : Object.hashAll(l$userMultibuyDiscounts.map((v) => v)),
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$userMultibuyDiscounts ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userMultibuyDiscounts = userMultibuyDiscounts;
    final lOther$userMultibuyDiscounts = other.userMultibuyDiscounts;
    if (l$userMultibuyDiscounts != null &&
        lOther$userMultibuyDiscounts != null) {
      if (l$userMultibuyDiscounts.length !=
          lOther$userMultibuyDiscounts.length) {
        return false;
      }
      for (int i = 0; i < l$userMultibuyDiscounts.length; i++) {
        final l$userMultibuyDiscounts$entry = l$userMultibuyDiscounts[i];
        final lOther$userMultibuyDiscounts$entry =
            lOther$userMultibuyDiscounts[i];
        if (l$userMultibuyDiscounts$entry !=
            lOther$userMultibuyDiscounts$entry) {
          return false;
        }
      }
    } else if (l$userMultibuyDiscounts != lOther$userMultibuyDiscounts) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$userMultibuyDiscounts
    on Query$userMultibuyDiscounts {
  CopyWith$Query$userMultibuyDiscounts<Query$userMultibuyDiscounts>
      get copyWith => CopyWith$Query$userMultibuyDiscounts(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$userMultibuyDiscounts<TRes> {
  factory CopyWith$Query$userMultibuyDiscounts(
    Query$userMultibuyDiscounts instance,
    TRes Function(Query$userMultibuyDiscounts) then,
  ) = _CopyWithImpl$Query$userMultibuyDiscounts;

  factory CopyWith$Query$userMultibuyDiscounts.stub(TRes res) =
      _CopyWithStubImpl$Query$userMultibuyDiscounts;

  TRes call({
    List<Query$userMultibuyDiscounts$userMultibuyDiscounts?>?
        userMultibuyDiscounts,
    String? $__typename,
  });
  TRes userMultibuyDiscounts(
      Iterable<Query$userMultibuyDiscounts$userMultibuyDiscounts?>? Function(
              Iterable<
                  CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts<
                      Query$userMultibuyDiscounts$userMultibuyDiscounts>?>?)
          _fn);
}

class _CopyWithImpl$Query$userMultibuyDiscounts<TRes>
    implements CopyWith$Query$userMultibuyDiscounts<TRes> {
  _CopyWithImpl$Query$userMultibuyDiscounts(
    this._instance,
    this._then,
  );

  final Query$userMultibuyDiscounts _instance;

  final TRes Function(Query$userMultibuyDiscounts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userMultibuyDiscounts = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$userMultibuyDiscounts(
        userMultibuyDiscounts: userMultibuyDiscounts == _undefined
            ? _instance.userMultibuyDiscounts
            : (userMultibuyDiscounts
                as List<Query$userMultibuyDiscounts$userMultibuyDiscounts?>?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  TRes userMultibuyDiscounts(
          Iterable<Query$userMultibuyDiscounts$userMultibuyDiscounts?>? Function(
                  Iterable<
                      CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts<
                          Query$userMultibuyDiscounts$userMultibuyDiscounts>?>?)
              _fn) =>
      call(
          userMultibuyDiscounts:
              _fn(_instance.userMultibuyDiscounts?.map((e) => e == null
                  ? null
                  : CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts(
                      e,
                      (i) => i,
                    )))?.toList());
}

class _CopyWithStubImpl$Query$userMultibuyDiscounts<TRes>
    implements CopyWith$Query$userMultibuyDiscounts<TRes> {
  _CopyWithStubImpl$Query$userMultibuyDiscounts(this._res);

  TRes _res;

  call({
    List<Query$userMultibuyDiscounts$userMultibuyDiscounts?>?
        userMultibuyDiscounts,
    String? $__typename,
  }) =>
      _res;

  userMultibuyDiscounts(_fn) => _res;
}

const documentNodeQueryuserMultibuyDiscounts = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'userMultibuyDiscounts'),
    variableDefinitions: [],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'userMultibuyDiscounts'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'discountValue'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'id'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'isActive'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'minItems'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'seller'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: SelectionSetNode(selections: [
              FieldNode(
                name: NameNode(value: 'id'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'username'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: 'profilePictureUrl'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
              FieldNode(
                name: NameNode(value: '__typename'),
                alias: null,
                arguments: [],
                directives: [],
                selectionSet: null,
              ),
            ]),
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$userMultibuyDiscounts _parserFn$Query$userMultibuyDiscounts(
        Map<String, dynamic> data) =>
    Query$userMultibuyDiscounts.fromJson(data);
typedef OnQueryComplete$Query$userMultibuyDiscounts = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$userMultibuyDiscounts?,
);

class Options$Query$userMultibuyDiscounts
    extends graphql.QueryOptions<Query$userMultibuyDiscounts> {
  Options$Query$userMultibuyDiscounts({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$userMultibuyDiscounts? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$userMultibuyDiscounts? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null
                        ? null
                        : _parserFn$Query$userMultibuyDiscounts(data),
                  ),
          onError: onError,
          document: documentNodeQueryuserMultibuyDiscounts,
          parserFn: _parserFn$Query$userMultibuyDiscounts,
        );

  final OnQueryComplete$Query$userMultibuyDiscounts? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$userMultibuyDiscounts
    extends graphql.WatchQueryOptions<Query$userMultibuyDiscounts> {
  WatchOptions$Query$userMultibuyDiscounts({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$userMultibuyDiscounts? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryuserMultibuyDiscounts,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$userMultibuyDiscounts,
        );
}

class FetchMoreOptions$Query$userMultibuyDiscounts
    extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$userMultibuyDiscounts(
      {required graphql.UpdateQuery updateQuery})
      : super(
          updateQuery: updateQuery,
          document: documentNodeQueryuserMultibuyDiscounts,
        );
}

extension ClientExtension$Query$userMultibuyDiscounts on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$userMultibuyDiscounts>>
      query$userMultibuyDiscounts(
              [Options$Query$userMultibuyDiscounts? options]) async =>
          await this.query(options ?? Options$Query$userMultibuyDiscounts());
  graphql.ObservableQuery<
      Query$userMultibuyDiscounts> watchQuery$userMultibuyDiscounts(
          [WatchOptions$Query$userMultibuyDiscounts? options]) =>
      this.watchQuery(options ?? WatchOptions$Query$userMultibuyDiscounts());
  void writeQuery$userMultibuyDiscounts({
    required Query$userMultibuyDiscounts data,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
            operation: graphql.Operation(
                document: documentNodeQueryuserMultibuyDiscounts)),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$userMultibuyDiscounts? readQuery$userMultibuyDiscounts(
      {bool optimistic = true}) {
    final result = this.readQuery(
      graphql.Request(
          operation: graphql.Operation(
              document: documentNodeQueryuserMultibuyDiscounts)),
      optimistic: optimistic,
    );
    return result == null ? null : Query$userMultibuyDiscounts.fromJson(result);
  }
}

class Query$userMultibuyDiscounts$userMultibuyDiscounts {
  Query$userMultibuyDiscounts$userMultibuyDiscounts({
    required this.discountValue,
    required this.id,
    required this.isActive,
    required this.minItems,
    this.seller,
    this.$__typename = 'MultibuyDiscountType',
  });

  factory Query$userMultibuyDiscounts$userMultibuyDiscounts.fromJson(
      Map<String, dynamic> json) {
    final l$discountValue = json['discountValue'];
    final l$id = json['id'];
    final l$isActive = json['isActive'];
    final l$minItems = json['minItems'];
    final l$seller = json['seller'];
    final l$$__typename = json['__typename'];
    return Query$userMultibuyDiscounts$userMultibuyDiscounts(
      discountValue: (l$discountValue as String),
      id: (l$id as String),
      isActive: (l$isActive as bool),
      minItems: (l$minItems as int),
      seller: l$seller == null
          ? null
          : Query$userMultibuyDiscounts$userMultibuyDiscounts$seller.fromJson(
              (l$seller as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final String discountValue;

  final String id;

  final bool isActive;

  final int minItems;

  final Query$userMultibuyDiscounts$userMultibuyDiscounts$seller? seller;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$discountValue = discountValue;
    _resultData['discountValue'] = l$discountValue;
    final l$id = id;
    _resultData['id'] = l$id;
    final l$isActive = isActive;
    _resultData['isActive'] = l$isActive;
    final l$minItems = minItems;
    _resultData['minItems'] = l$minItems;
    final l$seller = seller;
    _resultData['seller'] = l$seller?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$discountValue = discountValue;
    final l$id = id;
    final l$isActive = isActive;
    final l$minItems = minItems;
    final l$seller = seller;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$discountValue,
      l$id,
      l$isActive,
      l$minItems,
      l$seller,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$userMultibuyDiscounts$userMultibuyDiscounts ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$discountValue = discountValue;
    final lOther$discountValue = other.discountValue;
    if (l$discountValue != lOther$discountValue) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$isActive = isActive;
    final lOther$isActive = other.isActive;
    if (l$isActive != lOther$isActive) {
      return false;
    }
    final l$minItems = minItems;
    final lOther$minItems = other.minItems;
    if (l$minItems != lOther$minItems) {
      return false;
    }
    final l$seller = seller;
    final lOther$seller = other.seller;
    if (l$seller != lOther$seller) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$userMultibuyDiscounts$userMultibuyDiscounts
    on Query$userMultibuyDiscounts$userMultibuyDiscounts {
  CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts<
          Query$userMultibuyDiscounts$userMultibuyDiscounts>
      get copyWith =>
          CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts<
    TRes> {
  factory CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts(
    Query$userMultibuyDiscounts$userMultibuyDiscounts instance,
    TRes Function(Query$userMultibuyDiscounts$userMultibuyDiscounts) then,
  ) = _CopyWithImpl$Query$userMultibuyDiscounts$userMultibuyDiscounts;

  factory CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts.stub(
          TRes res) =
      _CopyWithStubImpl$Query$userMultibuyDiscounts$userMultibuyDiscounts;

  TRes call({
    String? discountValue,
    String? id,
    bool? isActive,
    int? minItems,
    Query$userMultibuyDiscounts$userMultibuyDiscounts$seller? seller,
    String? $__typename,
  });
  CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller<TRes>
      get seller;
}

class _CopyWithImpl$Query$userMultibuyDiscounts$userMultibuyDiscounts<TRes>
    implements
        CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts<TRes> {
  _CopyWithImpl$Query$userMultibuyDiscounts$userMultibuyDiscounts(
    this._instance,
    this._then,
  );

  final Query$userMultibuyDiscounts$userMultibuyDiscounts _instance;

  final TRes Function(Query$userMultibuyDiscounts$userMultibuyDiscounts) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? discountValue = _undefined,
    Object? id = _undefined,
    Object? isActive = _undefined,
    Object? minItems = _undefined,
    Object? seller = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$userMultibuyDiscounts$userMultibuyDiscounts(
        discountValue: discountValue == _undefined || discountValue == null
            ? _instance.discountValue
            : (discountValue as String),
        id: id == _undefined || id == null ? _instance.id : (id as String),
        isActive: isActive == _undefined || isActive == null
            ? _instance.isActive
            : (isActive as bool),
        minItems: minItems == _undefined || minItems == null
            ? _instance.minItems
            : (minItems as int),
        seller: seller == _undefined
            ? _instance.seller
            : (seller
                as Query$userMultibuyDiscounts$userMultibuyDiscounts$seller?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller<TRes>
      get seller {
    final local$seller = _instance.seller;
    return local$seller == null
        ? CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller
            .stub(_then(_instance))
        : CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller(
            local$seller, (e) => call(seller: e));
  }
}

class _CopyWithStubImpl$Query$userMultibuyDiscounts$userMultibuyDiscounts<TRes>
    implements
        CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts<TRes> {
  _CopyWithStubImpl$Query$userMultibuyDiscounts$userMultibuyDiscounts(
      this._res);

  TRes _res;

  call({
    String? discountValue,
    String? id,
    bool? isActive,
    int? minItems,
    Query$userMultibuyDiscounts$userMultibuyDiscounts$seller? seller,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller<TRes>
      get seller =>
          CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller
              .stub(_res);
}

class Query$userMultibuyDiscounts$userMultibuyDiscounts$seller {
  Query$userMultibuyDiscounts$userMultibuyDiscounts$seller({
    this.id,
    this.username,
    this.profilePictureUrl,
    this.$__typename = 'UserType',
  });

  factory Query$userMultibuyDiscounts$userMultibuyDiscounts$seller.fromJson(
      Map<String, dynamic> json) {
    final l$id = json['id'];
    final l$username = json['username'];
    final l$profilePictureUrl = json['profilePictureUrl'];
    final l$$__typename = json['__typename'];
    return Query$userMultibuyDiscounts$userMultibuyDiscounts$seller(
      id: (l$id as int?),
      username: (l$username as String?),
      profilePictureUrl: (l$profilePictureUrl as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final int? id;

  final String? username;

  final String? profilePictureUrl;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$id = id;
    _resultData['id'] = l$id;
    final l$username = username;
    _resultData['username'] = l$username;
    final l$profilePictureUrl = profilePictureUrl;
    _resultData['profilePictureUrl'] = l$profilePictureUrl;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$id = id;
    final l$username = username;
    final l$profilePictureUrl = profilePictureUrl;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$id,
      l$username,
      l$profilePictureUrl,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$userMultibuyDiscounts$userMultibuyDiscounts$seller ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$id = id;
    final lOther$id = other.id;
    if (l$id != lOther$id) {
      return false;
    }
    final l$username = username;
    final lOther$username = other.username;
    if (l$username != lOther$username) {
      return false;
    }
    final l$profilePictureUrl = profilePictureUrl;
    final lOther$profilePictureUrl = other.profilePictureUrl;
    if (l$profilePictureUrl != lOther$profilePictureUrl) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller
    on Query$userMultibuyDiscounts$userMultibuyDiscounts$seller {
  CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller<
          Query$userMultibuyDiscounts$userMultibuyDiscounts$seller>
      get copyWith =>
          CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller<
    TRes> {
  factory CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller(
    Query$userMultibuyDiscounts$userMultibuyDiscounts$seller instance,
    TRes Function(Query$userMultibuyDiscounts$userMultibuyDiscounts$seller)
        then,
  ) = _CopyWithImpl$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller;

  factory CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller.stub(
          TRes res) =
      _CopyWithStubImpl$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller;

  TRes call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller<
        TRes>
    implements
        CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller<
            TRes> {
  _CopyWithImpl$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller(
    this._instance,
    this._then,
  );

  final Query$userMultibuyDiscounts$userMultibuyDiscounts$seller _instance;

  final TRes Function(Query$userMultibuyDiscounts$userMultibuyDiscounts$seller)
      _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? id = _undefined,
    Object? username = _undefined,
    Object? profilePictureUrl = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$userMultibuyDiscounts$userMultibuyDiscounts$seller(
        id: id == _undefined ? _instance.id : (id as int?),
        username:
            username == _undefined ? _instance.username : (username as String?),
        profilePictureUrl: profilePictureUrl == _undefined
            ? _instance.profilePictureUrl
            : (profilePictureUrl as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller<
        TRes>
    implements
        CopyWith$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller<
            TRes> {
  _CopyWithStubImpl$Query$userMultibuyDiscounts$userMultibuyDiscounts$seller(
      this._res);

  TRes _res;

  call({
    int? id,
    String? username,
    String? profilePictureUrl,
    String? $__typename,
  }) =>
      _res;
}

class Query$userPaymentMethods {
  Query$userPaymentMethods({
    this.userPaymentMethods,
    this.$__typename = 'Query',
  });

  factory Query$userPaymentMethods.fromJson(Map<String, dynamic> json) {
    final l$userPaymentMethods = json['userPaymentMethods'];
    final l$$__typename = json['__typename'];
    return Query$userPaymentMethods(
      userPaymentMethods: l$userPaymentMethods == null
          ? null
          : Query$userPaymentMethods$userPaymentMethods.fromJson(
              (l$userPaymentMethods as Map<String, dynamic>)),
      $__typename: (l$$__typename as String),
    );
  }

  final Query$userPaymentMethods$userPaymentMethods? userPaymentMethods;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$userPaymentMethods = userPaymentMethods;
    _resultData['userPaymentMethods'] = l$userPaymentMethods?.toJson();
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$userPaymentMethods = userPaymentMethods;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$userPaymentMethods,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$userPaymentMethods ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$userPaymentMethods = userPaymentMethods;
    final lOther$userPaymentMethods = other.userPaymentMethods;
    if (l$userPaymentMethods != lOther$userPaymentMethods) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$userPaymentMethods
    on Query$userPaymentMethods {
  CopyWith$Query$userPaymentMethods<Query$userPaymentMethods> get copyWith =>
      CopyWith$Query$userPaymentMethods(
        this,
        (i) => i,
      );
}

abstract class CopyWith$Query$userPaymentMethods<TRes> {
  factory CopyWith$Query$userPaymentMethods(
    Query$userPaymentMethods instance,
    TRes Function(Query$userPaymentMethods) then,
  ) = _CopyWithImpl$Query$userPaymentMethods;

  factory CopyWith$Query$userPaymentMethods.stub(TRes res) =
      _CopyWithStubImpl$Query$userPaymentMethods;

  TRes call({
    Query$userPaymentMethods$userPaymentMethods? userPaymentMethods,
    String? $__typename,
  });
  CopyWith$Query$userPaymentMethods$userPaymentMethods<TRes>
      get userPaymentMethods;
}

class _CopyWithImpl$Query$userPaymentMethods<TRes>
    implements CopyWith$Query$userPaymentMethods<TRes> {
  _CopyWithImpl$Query$userPaymentMethods(
    this._instance,
    this._then,
  );

  final Query$userPaymentMethods _instance;

  final TRes Function(Query$userPaymentMethods) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? userPaymentMethods = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$userPaymentMethods(
        userPaymentMethods: userPaymentMethods == _undefined
            ? _instance.userPaymentMethods
            : (userPaymentMethods
                as Query$userPaymentMethods$userPaymentMethods?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));

  CopyWith$Query$userPaymentMethods$userPaymentMethods<TRes>
      get userPaymentMethods {
    final local$userPaymentMethods = _instance.userPaymentMethods;
    return local$userPaymentMethods == null
        ? CopyWith$Query$userPaymentMethods$userPaymentMethods.stub(
            _then(_instance))
        : CopyWith$Query$userPaymentMethods$userPaymentMethods(
            local$userPaymentMethods, (e) => call(userPaymentMethods: e));
  }
}

class _CopyWithStubImpl$Query$userPaymentMethods<TRes>
    implements CopyWith$Query$userPaymentMethods<TRes> {
  _CopyWithStubImpl$Query$userPaymentMethods(this._res);

  TRes _res;

  call({
    Query$userPaymentMethods$userPaymentMethods? userPaymentMethods,
    String? $__typename,
  }) =>
      _res;

  CopyWith$Query$userPaymentMethods$userPaymentMethods<TRes>
      get userPaymentMethods =>
          CopyWith$Query$userPaymentMethods$userPaymentMethods.stub(_res);
}

const documentNodeQueryuserPaymentMethods = DocumentNode(definitions: [
  OperationDefinitionNode(
    type: OperationType.query,
    name: NameNode(value: 'userPaymentMethods'),
    variableDefinitions: [],
    directives: [],
    selectionSet: SelectionSetNode(selections: [
      FieldNode(
        name: NameNode(value: 'userPaymentMethods'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: SelectionSetNode(selections: [
          FieldNode(
            name: NameNode(value: 'paymentMethodId'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'last4Digits'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: 'cardBrand'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
          FieldNode(
            name: NameNode(value: '__typename'),
            alias: null,
            arguments: [],
            directives: [],
            selectionSet: null,
          ),
        ]),
      ),
      FieldNode(
        name: NameNode(value: '__typename'),
        alias: null,
        arguments: [],
        directives: [],
        selectionSet: null,
      ),
    ]),
  ),
]);
Query$userPaymentMethods _parserFn$Query$userPaymentMethods(
        Map<String, dynamic> data) =>
    Query$userPaymentMethods.fromJson(data);
typedef OnQueryComplete$Query$userPaymentMethods = FutureOr<void> Function(
  Map<String, dynamic>?,
  Query$userPaymentMethods?,
);

class Options$Query$userPaymentMethods
    extends graphql.QueryOptions<Query$userPaymentMethods> {
  Options$Query$userPaymentMethods({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$userPaymentMethods? typedOptimisticResult,
    Duration? pollInterval,
    graphql.Context? context,
    OnQueryComplete$Query$userPaymentMethods? onComplete,
    graphql.OnQueryError? onError,
  })  : onCompleteWithParsed = onComplete,
        super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          pollInterval: pollInterval,
          context: context,
          onComplete: onComplete == null
              ? null
              : (data) => onComplete(
                    data,
                    data == null
                        ? null
                        : _parserFn$Query$userPaymentMethods(data),
                  ),
          onError: onError,
          document: documentNodeQueryuserPaymentMethods,
          parserFn: _parserFn$Query$userPaymentMethods,
        );

  final OnQueryComplete$Query$userPaymentMethods? onCompleteWithParsed;

  @override
  List<Object?> get properties => [
        ...super.onComplete == null
            ? super.properties
            : super.properties.where((property) => property != onComplete),
        onCompleteWithParsed,
      ];
}

class WatchOptions$Query$userPaymentMethods
    extends graphql.WatchQueryOptions<Query$userPaymentMethods> {
  WatchOptions$Query$userPaymentMethods({
    String? operationName,
    graphql.FetchPolicy? fetchPolicy,
    graphql.ErrorPolicy? errorPolicy,
    graphql.CacheRereadPolicy? cacheRereadPolicy,
    Object? optimisticResult,
    Query$userPaymentMethods? typedOptimisticResult,
    graphql.Context? context,
    Duration? pollInterval,
    bool? eagerlyFetchResults,
    bool carryForwardDataOnException = true,
    bool fetchResults = false,
  }) : super(
          operationName: operationName,
          fetchPolicy: fetchPolicy,
          errorPolicy: errorPolicy,
          cacheRereadPolicy: cacheRereadPolicy,
          optimisticResult: optimisticResult ?? typedOptimisticResult?.toJson(),
          context: context,
          document: documentNodeQueryuserPaymentMethods,
          pollInterval: pollInterval,
          eagerlyFetchResults: eagerlyFetchResults,
          carryForwardDataOnException: carryForwardDataOnException,
          fetchResults: fetchResults,
          parserFn: _parserFn$Query$userPaymentMethods,
        );
}

class FetchMoreOptions$Query$userPaymentMethods
    extends graphql.FetchMoreOptions {
  FetchMoreOptions$Query$userPaymentMethods(
      {required graphql.UpdateQuery updateQuery})
      : super(
          updateQuery: updateQuery,
          document: documentNodeQueryuserPaymentMethods,
        );
}

extension ClientExtension$Query$userPaymentMethods on graphql.GraphQLClient {
  Future<graphql.QueryResult<Query$userPaymentMethods>>
      query$userPaymentMethods(
              [Options$Query$userPaymentMethods? options]) async =>
          await this.query(options ?? Options$Query$userPaymentMethods());
  graphql.ObservableQuery<Query$userPaymentMethods>
      watchQuery$userPaymentMethods(
              [WatchOptions$Query$userPaymentMethods? options]) =>
          this.watchQuery(options ?? WatchOptions$Query$userPaymentMethods());
  void writeQuery$userPaymentMethods({
    required Query$userPaymentMethods data,
    bool broadcast = true,
  }) =>
      this.writeQuery(
        graphql.Request(
            operation: graphql.Operation(
                document: documentNodeQueryuserPaymentMethods)),
        data: data.toJson(),
        broadcast: broadcast,
      );
  Query$userPaymentMethods? readQuery$userPaymentMethods(
      {bool optimistic = true}) {
    final result = this.readQuery(
      graphql.Request(
          operation:
              graphql.Operation(document: documentNodeQueryuserPaymentMethods)),
      optimistic: optimistic,
    );
    return result == null ? null : Query$userPaymentMethods.fromJson(result);
  }
}

class Query$userPaymentMethods$userPaymentMethods {
  Query$userPaymentMethods$userPaymentMethods({
    required this.paymentMethodId,
    required this.last4Digits,
    this.cardBrand,
    this.$__typename = 'PaymentMethodType',
  });

  factory Query$userPaymentMethods$userPaymentMethods.fromJson(
      Map<String, dynamic> json) {
    final l$paymentMethodId = json['paymentMethodId'];
    final l$last4Digits = json['last4Digits'];
    final l$cardBrand = json['cardBrand'];
    final l$$__typename = json['__typename'];
    return Query$userPaymentMethods$userPaymentMethods(
      paymentMethodId: (l$paymentMethodId as String),
      last4Digits: (l$last4Digits as String),
      cardBrand: (l$cardBrand as String?),
      $__typename: (l$$__typename as String),
    );
  }

  final String paymentMethodId;

  final String last4Digits;

  final String? cardBrand;

  final String $__typename;

  Map<String, dynamic> toJson() {
    final _resultData = <String, dynamic>{};
    final l$paymentMethodId = paymentMethodId;
    _resultData['paymentMethodId'] = l$paymentMethodId;
    final l$last4Digits = last4Digits;
    _resultData['last4Digits'] = l$last4Digits;
    final l$cardBrand = cardBrand;
    _resultData['cardBrand'] = l$cardBrand;
    final l$$__typename = $__typename;
    _resultData['__typename'] = l$$__typename;
    return _resultData;
  }

  @override
  int get hashCode {
    final l$paymentMethodId = paymentMethodId;
    final l$last4Digits = last4Digits;
    final l$cardBrand = cardBrand;
    final l$$__typename = $__typename;
    return Object.hashAll([
      l$paymentMethodId,
      l$last4Digits,
      l$cardBrand,
      l$$__typename,
    ]);
  }

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) {
      return true;
    }
    if (other is! Query$userPaymentMethods$userPaymentMethods ||
        runtimeType != other.runtimeType) {
      return false;
    }
    final l$paymentMethodId = paymentMethodId;
    final lOther$paymentMethodId = other.paymentMethodId;
    if (l$paymentMethodId != lOther$paymentMethodId) {
      return false;
    }
    final l$last4Digits = last4Digits;
    final lOther$last4Digits = other.last4Digits;
    if (l$last4Digits != lOther$last4Digits) {
      return false;
    }
    final l$cardBrand = cardBrand;
    final lOther$cardBrand = other.cardBrand;
    if (l$cardBrand != lOther$cardBrand) {
      return false;
    }
    final l$$__typename = $__typename;
    final lOther$$__typename = other.$__typename;
    if (l$$__typename != lOther$$__typename) {
      return false;
    }
    return true;
  }
}

extension UtilityExtension$Query$userPaymentMethods$userPaymentMethods
    on Query$userPaymentMethods$userPaymentMethods {
  CopyWith$Query$userPaymentMethods$userPaymentMethods<
          Query$userPaymentMethods$userPaymentMethods>
      get copyWith => CopyWith$Query$userPaymentMethods$userPaymentMethods(
            this,
            (i) => i,
          );
}

abstract class CopyWith$Query$userPaymentMethods$userPaymentMethods<TRes> {
  factory CopyWith$Query$userPaymentMethods$userPaymentMethods(
    Query$userPaymentMethods$userPaymentMethods instance,
    TRes Function(Query$userPaymentMethods$userPaymentMethods) then,
  ) = _CopyWithImpl$Query$userPaymentMethods$userPaymentMethods;

  factory CopyWith$Query$userPaymentMethods$userPaymentMethods.stub(TRes res) =
      _CopyWithStubImpl$Query$userPaymentMethods$userPaymentMethods;

  TRes call({
    String? paymentMethodId,
    String? last4Digits,
    String? cardBrand,
    String? $__typename,
  });
}

class _CopyWithImpl$Query$userPaymentMethods$userPaymentMethods<TRes>
    implements CopyWith$Query$userPaymentMethods$userPaymentMethods<TRes> {
  _CopyWithImpl$Query$userPaymentMethods$userPaymentMethods(
    this._instance,
    this._then,
  );

  final Query$userPaymentMethods$userPaymentMethods _instance;

  final TRes Function(Query$userPaymentMethods$userPaymentMethods) _then;

  static const _undefined = <dynamic, dynamic>{};

  TRes call({
    Object? paymentMethodId = _undefined,
    Object? last4Digits = _undefined,
    Object? cardBrand = _undefined,
    Object? $__typename = _undefined,
  }) =>
      _then(Query$userPaymentMethods$userPaymentMethods(
        paymentMethodId:
            paymentMethodId == _undefined || paymentMethodId == null
                ? _instance.paymentMethodId
                : (paymentMethodId as String),
        last4Digits: last4Digits == _undefined || last4Digits == null
            ? _instance.last4Digits
            : (last4Digits as String),
        cardBrand: cardBrand == _undefined
            ? _instance.cardBrand
            : (cardBrand as String?),
        $__typename: $__typename == _undefined || $__typename == null
            ? _instance.$__typename
            : ($__typename as String),
      ));
}

class _CopyWithStubImpl$Query$userPaymentMethods$userPaymentMethods<TRes>
    implements CopyWith$Query$userPaymentMethods$userPaymentMethods<TRes> {
  _CopyWithStubImpl$Query$userPaymentMethods$userPaymentMethods(this._res);

  TRes _res;

  call({
    String? paymentMethodId,
    String? last4Digits,
    String? cardBrand,
    String? $__typename,
  }) =>
      _res;
}
