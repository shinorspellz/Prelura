"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""An enumeration."""
enum AccountsUserGenderChoices {
  """Male"""
  MALE

  """Female"""
  FEMALE

  """Any"""
  ANY
}

"""An enumeration."""
enum AccountsUserPreferredCurrencyChoices {
  """US Dollar"""
  USD

  """British Pound"""
  EUR

  """Canadian Dollar"""
  GBP
}

type AddPaymentMethod {
  success: Boolean
  paymentMethod: PaymentMethodType
  message: String
}

type AdminBannerType {
  id: Int
  title: String
  season: String
  bannerUrl: [String]
  isActive: Boolean
  createdBy: AdminUserType
  updatedBy: AdminUserType
  createdAt: DateTime
  updatedAt: DateTime
}

type AdminLogin {
  user: AdminUserType
  message: String
  token: String
}

type AdminUserType {
  id: Int
  username: String
  email: String
  firstName: String
  lastName: String
  profilePictureUrl: String
  thumbnailUrl: String
  gender: String
  displayName: String
  dateJoined: DateTime
  lastLogin: DateTime
  fullName: String
  phone: PhoneType
  location: LocationType
  bio: String
}

"""
Archive account and revoke refresh tokens.

User must be verified and confirm password.
"""
type ArchiveAccount {
  errors: ExpectedErrorType
  success: Boolean
}

type ArchiveConversation {
  message: String
}

enum BannerActionInputEnum {
  ADD
  REMOVE
}

input BannerInputType {
  url: String!

  """Action to perform on banner_url: 'ADD' or 'REMOVE'"""
  action: BannerActionInputEnum!
}

type BannerType {
  id: Int
  title: String
  season: String
  bannerUrl: [String]
  isActive: Boolean
}

type BlockedUserType {
  id: Int
  username: String
  firstName: String
  lastName: String
  displayName: String
  label: String
  isVerified: Boolean
  blueTickVerified: Boolean
  thumbnailUrl: String
  profilePictureUrl: String
}

type BlockUserMutation {
  success: Boolean
  message: String
}

type BrandType {
  id: Int
  name: String
}

type CancelOrder {
  success: Boolean
}

type CategoryGroupType {
  id: Int
  name: String
  count: Int
}

type CategoryType {
  id: Int
  name: String
}

type CategoryTypes {
  id: ID!
  name: String!
  parent: CategoryTypes
  children: [CategoryTypes!]!
  hasChildren: Boolean
  fullPath: String
}

type ChangeEmail {
  message: String
}

"""An enumeration."""
enum ChatsMessageAttachmentTypeChoices {
  """PICTURE"""
  PICTURE

  """VIDEO"""
  VIDEO

  """AUDIO"""
  AUDIO

  """ZIP"""
  ZIP
}

enum ClientOrderStatusEnum {
  IN_PROGRESS
  CANCELLED
  COMPLETED
}

enum ConditionEnum {
  BRAND_NEW_WITH_TAGS
  BRAND_NEW_WITHOUT_TAGS
  EXCELLENT_CONDITION
  GOOD_CONDITION
  HEAVILY_USED
}

type ConfirmPayment {
  paymentStatus: String
}

type ConversationType {
  id: ID!
  name: String!
  disableResponse: Boolean!
  createdAt: DateTime!
  lastModified: DateTime!
  participant1Deleted: Boolean!
  participant2Deleted: Boolean!
  isOfferConversation: Boolean!
  offer: OfferType
  recipient: UserType
  lastMessage: MessageType
  unreadMessagesCount: Int
}

type CreateBanner {
  message: String
  success: Boolean
}

type CreateChat {
  chat: ConversationType
}

type CreateOffer {
  success: Boolean
  message: String
  data: OfferReturnType
}

type CreateOrder {
  success: Boolean
  order: OrderType
}

type CreateOrUpdateMultibuyDiscount {
  success: Boolean
  multibuyDiscounts: [MultibuyDiscountType]
}

type CreatePaymentIntent {
  clientSecret: String
  paymentRef: String
}

type CreateProduct {
  success: Boolean
  message: String
  product: ProductType
}

enum CurrencyEnum {
  USD
  EUR
  GBP
}

type CustomResendActivationEmail {
  errors: ExpectedErrorType
  success: Boolean
}

"""
The `Date` scalar type represents a Date
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar Date

"""
The `DateTime` scalar type represents a DateTime
value as specified by
[iso8601](https://en.wikipedia.org/wiki/ISO_8601).
"""
scalar DateTime

type DeactivateMultibuyDiscounts {
  success: Boolean
}

"""The `Decimal` scalar type represents a python Decimal."""
scalar Decimal

"""
Delete account permanently or make `user.is_active=False`.

The behavior is defined on settings.
Anyway user refresh tokens are revoked.

User must be verified and confirm password.
"""
type DeleteAccount {
  errors: ExpectedErrorType
  success: Boolean
}

type DeleteBanner {
  message: String
  success: Boolean
}

type DeleteConversation {
  message: String
}

type DeleteMediaFiles {
  success: Boolean
}

type DeleteMessage {
  message: String
}

type DeleteNotification {
  success: Boolean
}

type DeletePaymentMethod {
  success: Boolean
  error: String
}

type DeleteProduct {
  success: Boolean
  message: String
}

type DeleteSearchHistory {
  success: Boolean
  message: String
}

type EarningType {
  networth: Float
  pendingPayments: QuantityValuePair
  completedPayments: QuantityValuePair
  earningsInMonth: QuantityValuePair
  totalEarnings: QuantityValuePair
}

"""

    Errors messages and codes mapped to
    fields or non fields errors.
    Example:
    {
        field_name: [
            {
                "message": "error message",
                "code": "error_code"
            }
        ],
        other_field: [
            {
                "message": "error message",
                "code": "error_code"
            }
        ],
        nonFieldErrors: [
            {
                "message": "error message",
                "code": "error_code"
            }
        ]
    }
    
"""
scalar ExpectedErrorType

enum FileTypeEnum {
  BANNER
  PRODUCT
  PROFILE_PICTURE
}

type FlagProduct {
  message: String
  success: Boolean
}

type FlagUser {
  message: String
  success: Boolean
}

enum FlagUserReasonEnum {
  TERMS_VIOLATION
  SPAM_ACTIVITY
  INAPPROPRIATE_CONTENT
  HARASSMENT
  LEGAL_REQUEST
  OTHER
}

type FollowUser {
  success: Boolean
}

"""
The `GenericScalar` scalar type represents a generic
GraphQL scalar value that could be:
String, Boolean, Int, Float, List or Object.
"""
scalar GenericScalar

enum ImageActionEnum {
  ADD
  REMOVE
  UPDATE_INDEX
}

input ImagesInputType {
  url: String!
  thumbnail: String!
}

input ImageUpdateInputType {
  images: [ImagesInputType]!
  action: ImageActionEnum!
}

"""
Allows use of a JSON String for input / output from the GraphQL schema.

Use of this type is *not recommended* as you lose the benefits of having a defined, static
schema (one of the key benefits of GraphQL).
"""
scalar JSONString

type LikedProductType {
  product: ProductType
}

type LikeProduct {
  success: Boolean
}

input LocationInputType {
  latitude: String
  longitude: String
  locationName: String
}

type LocationType {
  latitude: String
  longitude: String
  locationName: String
}

type LogoutMutation {
  message: String
}

type MessageType {
  id: ID!
  sender: UserType
  text: String!
  attachment: String
  attachmentType: ChatsMessageAttachmentTypeChoices
  conversation: ConversationType
  createdAt: DateTime!
  read: Boolean!
  deleted: Boolean!
  isItem: Boolean!
  itemId: Int
  replyTo: MessageType
  itemType: String
  imageUrls: [JSONString!]!
  replies: [MessageType!]!
  senderName: String
  receiverProfile: String
}

type MultibuyDiscountType {
  id: ID!
  seller: UserType
  minItems: Int!
  discountValue: Decimal!
  isActive: Boolean!
}

input MultibuyInputType {
  id: Int
  minItems: Int!
  discountPercentage: Decimal!
  isActive: Boolean = true
}

type Mutation {
  sendSmsOtp(
    """
    Specifies the purpose of the OTP. The action determines the context for the
    OTP message, such as verifying an account, logging in, resetting a password,
    or two-factor authentication (2FA). The OTP message content will change
    based on the selected action.
    """
    action: SmsActionChoicesEnum
    channel: SmsChannelChoicesEnum

    """
    If the user does not have a phone number on file, this field allows them to
    provide a new phone number for verification. In this case, an OTP will be
    sent to the provided phone number, and the user will be prompted to enter
    the OTP to complete verification. If the user already has a phone number,
    leave this field empty to send an OTP to the existing phone number. The OTP
    can then be used to verify and update to a new number.
    """
    phoneNumber: String
  ): SendSmsOtp
  upload(files: [Upload]!, filetype: FileTypeEnum!): UploadPictures
  deleteMediaFiles(fileUrls: [String], filetype: FileTypeEnum!): DeleteMediaFiles
  adminLogin(password: String!, username: String!): AdminLogin
  createBanner(bannerUrl: [String]!, isActive: Boolean!, season: SeasonEnum!, title: String!): CreateBanner
  updateBanner(banner: BannerInputType, id: ID!, isActive: Boolean, season: SeasonEnum, title: String): UpdateBanner
  deleteBanner(id: ID!): DeleteBanner
  flagProduct(flagType: ProductFlagTypeEnum!, id: ID!, notes: String, reason: ProductFlagReasonEnum!): FlagProduct
  flagUser(id: ID!, notes: String, reason: FlagUserReasonEnum!): FlagUser
  createPaymentIntent(orderId: Int!, paymentMethod: PaymentMethodEnum!): CreatePaymentIntent

  """Confirm a payment"""
  confirmPayment(paymentRef: String!): ConfirmPayment
  addPaymentMethod(paymentMethodId: String!): AddPaymentMethod
  setDefaultPaymentMethod(paymentMethodId: String!): SetDefaultPaymentMethod
  deletePaymentMethod(paymentMethodId: String!): DeletePaymentMethod
  createChat(recipient: String!): CreateChat
  deleteMessage(messageId: Int!): DeleteMessage
  deleteConversation(conversationId: Int!): DeleteConversation
  archiveConversation(conversationId: Int!): ArchiveConversation
  unarchiveConversation(conversationId: Int!): UnarchiveConversation
  updateReadMessages(messageIds: [Int]!): UpdateReadMessages

  """Read notification"""
  readNotification(notificationId: Int): ReadNotification

  """Delete notification"""
  deleteNotification(notificationId: Int!): DeleteNotification

  """update user notification preferences"""
  updateNotificationPreference(emailNotifications: NotificationsPreferenceInputType, inappNotifications: NotificationsPreferenceInputType, isEmailNotification: Boolean!, isPushNotification: Boolean!, isSilentModeOn: Boolean!): UpdateNotificationPreference
  createProduct(brand: Int, category: Int!, color: [String], condition: ConditionEnum, customBrand: String, description: String!, discount: Float, imagesUrl: [ImagesInputType]!, isFeatured: Boolean, materials: [Int], name: String!, parcelSize: ParcelSizeEnum, price: Float!, size: Int, style: StyleEnum): CreateProduct
  updateProduct(brand: Int, category: Int, color: [String], condition: ConditionEnum, customBrand: String, description: String, discountPrice: Float, imagesUrl: ImageUpdateInputType, isFeatured: Boolean, materials: [Int], name: String, parcelSize: ParcelSizeEnum, price: Float, productId: Int!, size: Int, style: StyleEnum): UpdateProduct
  deleteProduct(productId: Int!): DeleteProduct
  likeProduct(productId: Int!): LikeProduct
  createOrder(productId: Int, productIds: [Int], shippingFee: Float): CreateOrder
  cancelOrder(orderId: Int!): CancelOrder
  createOffer(message: String, offerPrice: Float!, productIds: [Int]!): CreateOffer
  createMultibuyDiscount(inputs: [MultibuyInputType]!): CreateOrUpdateMultibuyDiscount
  deactivateMultibuyDiscounts: DeactivateMultibuyDiscounts

  """
  
      This class encapsulates the business logic related to 
      offers and ensures consistency in actions such as accepting, rejecting, and countering offers.
  
      Functionality Overview:
      -----------------------
      - **Accept Offer**: Handles the logic for accepting an offer made by a buyer. This changes 
        the status of the offer to "ACCEPTED", sets an expiry time, and notifies the relevant 
        parties of the acceptance.
  
      - **Reject Offer**: Allows either the buyer or seller to reject an offer, changing the 
        status to "REJECTED", and notifying the opposite party about the rejection.
  
      - **Counter Offer**: Enables both buyers and sellers to counter an existing offer. The 
        counter action cancels the current offer and creates a new child offer linked to the 
        original (root) offer, allowing for a back-and-forth negotiation process.
  
      - **Offer History Management**: When an offer is accepted, rejected, or countered, the 
        entire chain of offers (parent and children) related to the original offer is retrieved 
        and included in the response to provide a full context of the negotiation.
  
      - **Notification System**: Automatically triggers notifications to the relevant users 
        (seller or buyer) when an offer is accepted, rejected, or countered, ensuring that 
        both parties stay informed about the status of their offers.
  
      Key Rules:
      -------------------
      - An offer is created by the buyer with a status of "PENDING".
      - The seller can then accept, reject, or counter the offer.
      - If countered, the current offer is cancelled, and a new offer is created as a child of 
        the original offer, forming a hierarchical negotiation structure.
      - Both buyer and seller can continue to counter offers until either party accepts or rejects.
      - No modifications can be made to an offer with a "CANCELLED" status.
      - The entire chain of offers (root and children) is retrieved to maintain a record of 
        the negotiation process.
      
  """
  respondToOffer(action: OfferActionEnum!, offerId: Int!, offerPrice: Float): RespondToOffer
  reportProduct(content: String, productId: ID!, reason: String!): ReportProduct
  updateProfile(
    bio: String
    country: String
    displayName: String
    dob: String
    fcmToken: String
    firstName: String
    gender: String
    isVacationMode: Boolean
    lastName: String
    location: LocationInputType

    """
    The one-time password (OTP) code that the user must provide to verify their
    identity and update their phone number. The OTP code is sent to the user's
    registered phone number, and it is valid for 5 minutes. The user must enter
    the correct OTP code in order for the phone number update to be successful.
    """
    otp: String
    phoneNumber: PhoneInputType
    postcode: String
    preferredCurrency: CurrencyEnum
    profilePicture: ProfilePictureInputType
    shippingAddress: ShippingAddressInputType
    use2fa: Boolean
    username: String
  ): UpdateUserMutation
  followUser(followedId: Int!): FollowUser
  blockUnblock(blockUser: Boolean!, userId: Int!): BlockUserMutation
  unfollowUser(followedId: Int!): UnfollowUser
  rateUser(comment: String!, rating: Int!, userId: Int!): RateUser
  resetPassword(email: String): ResetPassword

  """Change email address"""
  changeEmail(email: String): ChangeEmail
  verifyAccount(code: String!): VerifyAccount
  deleteSearchHistory(clearAll: Boolean = false, searchId: ID): DeleteSearchHistory
  reportAccount(content: String, reason: String!, username: String!): ReportAccount

  """
  Register user with fields defined in the settings.
  
  If the email field of the user model is part of the
  registration fields (default), check if there is
  no user with that email or as a secondary email.
  
  If it exists, it does not register the user,
  even if the email field is not defined as unique
  (default of the default django user model).
  
  When creating the user, it also creates a `UserStatus`
  related to that user, making it possible to track
  if the user is archived, verified and has a secondary
  email.
  
  Send account verification email.
  
  If allowed to not verified users login, return token.
  """
  register(displayName: String, dob: Date, email: String!, username: String!, firstName: String!, lastName: String!, password1: String!, password2: String!): NewRegister

  """
  Obtain JSON web token for given user.
  
  Allow to perform login with different fields,
  and secondary email if set. The fields are
  defined on settings.
  
  Not verified users can login by default. This
  can be changes on settings.
  
  If user is archived, make it unarchive and
  return `unarchiving=True` on output.
  """
  login(password: String!, email: String, username: String): NewObtainJSONWebToken
  logout(fcmToken: String!, refreshToken: String!): LogoutMutation
  resendActivationEmail(email: String!): CustomResendActivationEmail

  """
  Change account password when user knows the old password.
  
  A new token and refresh token are sent. User must be verified.
  """
  passwordChange(oldPassword: String!, newPassword1: String!, newPassword2: String!): PasswordChange

  """
  Delete account permanently or make `user.is_active=False`.
  
  The behavior is defined on settings.
  Anyway user refresh tokens are revoked.
  
  User must be verified and confirm password.
  """
  deleteAccount(password: String!): DeleteAccount

  """Social Auth Mutation"""
  socialAuth(accessToken: String!, provider: String!): SocialAuth
  passwordReset(code: String!, email: String!, password: String!): PasswordReset

  """
  Archive account and revoke refresh tokens.
  
  User must be verified and confirm password.
  """
  archiveAccount(password: String!): ArchiveAccount
  verifyToken(token: String): Verify
  refreshToken(refreshToken: String): Refresh
}

"""
Obtain JSON web token for given user.

Allow to perform login with different fields,
and secondary email if set. The fields are
defined on settings.

Not verified users can login by default. This
can be changes on settings.

If user is archived, make it unarchive and
return `unarchiving=True` on output.
"""
type NewObtainJSONWebToken {
  payload: GenericScalar
  refreshExpiresIn: Int
  errors: ExpectedErrorType
  success: Boolean
  user: UserNode
  unarchiving: Boolean
  restToken: String
  use2fa: Boolean
  useGoogleAuthenticator: Boolean
  token: String!
  refreshToken: String!
}

"""
Register user with fields defined in the settings.

If the email field of the user model is part of the
registration fields (default), check if there is
no user with that email or as a secondary email.

If it exists, it does not register the user,
even if the email field is not defined as unique
(default of the default django user model).

When creating the user, it also creates a `UserStatus`
related to that user, making it possible to track
if the user is archived, verified and has a secondary
email.

Send account verification email.

If allowed to not verified users login, return token.
"""
type NewRegister {
  errors: ExpectedErrorType
  success: Boolean
  token: String
  refreshToken: String
}

"""An object with an ID"""
interface Node {
  """The ID of the object"""
  id: ID!
}

type NotificationPreferenceType {
  user: UserType
  isPushNotification: Boolean!
  isEmailNotification: Boolean!
  inappNotifications: JSONString!
  emailNotifications: JSONString!
}

input NotificationsPreferenceInputType {
  likes: Boolean
  newFollowers: Boolean
  profileView: Boolean
  messages: Boolean
}

type NotificationType {
  id: ID!
  sender: SenderType
  message: String!
  model: String!
  modelId: String!
  modelGroup: String
  isRead: Boolean!
  delivered: Boolean!
  deleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  meta: JSONString
}

enum OfferActionEnum {
  ACCEPT
  REJECT
  COUNTER
}

type OfferReturnType {
  offer: [OfferType]
  conversationId: Int
}

type OfferType {
  id: ID!
  products: [ProductType!]!
  buyer: UserType
  offerPrice: Decimal!
  status: String
  message: String
  expiresAt: DateTime
  parent: OfferType
  createdBy: String
  updatedBy: String
  createdAt: DateTime!
  updatedAt: DateTime!
  deleted: Boolean!
  children: [OfferType!]!
  conversation: [ConversationType!]!
}

input OrderFiltersInput {
  status: ClientOrderStatusEnum
  isSeller: Boolean
}

enum OrderStatusEnum {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

type OrderType {
  id: ID!
  user: UserType
  priceTotal: Decimal!
  discountPrice: Decimal!
  shippingFee: Decimal!
  shippingAddress: JSONString!
  status: OrderStatusEnum
  createdAt: DateTime!
  updatedAt: DateTime!
  products: [ProductType]
}

"""
The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum ParcelSizeEnum {
  SMALL
  MEDIUM
  LARGE
}

enum ParentCategoryEnum {
  MEN
  WOMEN
  BOYS
  GIRLS
  TODDLERS
}

"""
Change account password when user knows the old password.

A new token and refresh token are sent. User must be verified.
"""
type PasswordChange {
  errors: ExpectedErrorType
  success: Boolean
  token: String
  refreshToken: String
}

type PasswordReset {
  message: String
  token: String
  restToken: String
  user: UserType
}

enum PaymentMethodEnum {
  BANK_TRANSFER
  CARD
  STRIPE
  APPLE_PAY
  GOOGLE_PAY
}

type PaymentMethodType {
  id: ID!
  user: UserNode!
  paymentType: String!
  paymentMethodId: String!
  last4Digits: String!
  cardBrand: String
  expMonth: String
  expYear: String
  bankName: String
  isDefault: Boolean!
  deleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""An enumeration."""
enum PaymentsPaymentPaymentMethodChoices {
  """Bank Transfer"""
  BANK_TRANSFER

  """Card"""
  CARD

  """Stripe"""
  STRIPE

  """Apple Pay"""
  APPLE_PAY

  """Google Pay"""
  GOOGLE_PAY
}

"""An enumeration."""
enum PaymentsPaymentPaymentStatusChoices {
  """PENDING"""
  PENDING

  """SUCCESSFUL"""
  SUCCESSFUL

  """REFUNDED"""
  REFUNDED

  """FAILED"""
  FAILED

  """CANCELLED"""
  CANCELLED
}

type PaymentType {
  id: ID!
  order: OrderType!
  user: UserNode
  paymentMethod: PaymentsPaymentPaymentMethodChoices!
  paymentRef: String
  paymentIntentId: String
  paymentStatus: PaymentsPaymentPaymentStatusChoices!
  paymentAmount: Decimal!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input PhoneInputType {
  countryCode: String!
  number: String!
  completed: String
}

type PhoneType {
  countryCode: String
  number: String
  completed: String
}

input ProductFiltersInput {
  name: String
  brand: Int
  category: Int
  parentCategory: ParentCategoryEnum
  size: Int
  customBrand: String
  minPrice: Float
  maxPrice: Float
  status: ProductStatusEnum
  style: StyleEnum
  condition: ConditionEnum
  discountPrice: Boolean
  hashtags: [String]
  colors: [String]
}

enum ProductFlagReasonEnum {
  COMMUNITY_GUIDELINES
  INAPPROPRIATE_CONTENT
  COPYRIGHT_INFRINGEMENT
  DUPLICATE_IMAGES
  SPAM
  OTHER
}

enum ProductFlagTypeEnum {
  HIDDEN
  REMOVED
  FLAGGED
}

enum ProductGroupingEnum {
  BRAND
  CATEGORY
  TOP_BRAND
}

"""An enumeration."""
enum ProductsProductConditionChoices {
  """Brand New with Tags"""
  BRAND_NEW_WITH_TAGS

  """Brand New without Tags"""
  BRAND_NEW_WITHOUT_TAGS

  """Excellent Condition"""
  EXCELLENT_CONDITION

  """Good Condition"""
  GOOD_CONDITION

  """Heavily Used"""
  HEAVILY_USED
}

"""An enumeration."""
enum ProductsProductParcelSizeChoices {
  """Small"""
  SMALL

  """Medium"""
  MEDIUM

  """Large"""
  LARGE
}

"""An enumeration."""
enum ProductsProductStatusChoices {
  """ACTIVE"""
  ACTIVE

  """INACTIVE"""
  INACTIVE

  """SOLD"""
  SOLD

  """FLAGGED"""
  FLAGGED
}

"""An enumeration."""
enum ProductsProductStyleChoices {
  """Workwear"""
  WORKWEAR

  """Workout"""
  WORKOUT

  """Casual"""
  CASUAL

  """Party Dress"""
  PARTY_DRESS

  """Party Outfit"""
  PARTY_OUTFIT

  """Formal Wear"""
  FORMAL_WEAR

  """Evening Wear"""
  EVENING_WEAR

  """Wedding Guest"""
  WEDDING_GUEST

  """Loungewear"""
  LOUNGEWEAR

  """Vacation/Resort Wear"""
  VACATION_RESORT_WEAR

  """Festival Wear"""
  FESTIVAL_WEAR

  """Activewear"""
  ACTIVEWEAR

  """Nightwear"""
  NIGHTWEAR

  """Vintage"""
  VINTAGE

  """Y2K"""
  Y2K

  """Boho"""
  BOHO

  """Minimalist"""
  MINIMALIST

  """Grunge"""
  GRUNGE

  """Chic"""
  CHIC

  """Streetwear"""
  STREETWEAR

  """Preppy"""
  PREPPY

  """Retro"""
  RETRO

  """Cottagecore"""
  COTTAGECORE

  """Glam"""
  GLAM

  """Summer Styles"""
  SUMMER_STYLES

  """Winter Essentials"""
  WINTER_ESSENTIALS

  """Spring Florals"""
  SPRING_FLORALS

  """Autumn Layers"""
  AUTUMN_LAYERS

  """Rainy Day Wear"""
  RAINY_DAY_WEAR

  """Denim & Jeans"""
  DENIM_JEANS

  """Dresses & Gowns"""
  DRESSES_GOWNS

  """Jackets & Coats"""
  JACKETS_COATS

  """Knitwear & Sweaters"""
  KNITWEAR_SWEATERS

  """Skirts & Shorts"""
  SKIRTS_SHORTS

  """Suits & Blazers"""
  SUITS_BLAZERS

  """Tops & Blouses"""
  TOPS_BLOUSES

  """Shoes & Footwear"""
  SHOES_FOOTWEAR

  """Travel-Friendly"""
  TRAVEL_FRIENDLY

  """Maternity Wear"""
  MATERNITY_WEAR

  """Athleisure"""
  ATHLEISURE

  """Eco-Friendly/Upcycled"""
  ECO_FRIENDLY_UPCYCLED

  """Festival-Ready"""
  FESTIVAL_READY

  """Date Night"""
  DATE_NIGHT

  """Ethnic Wear"""
  ETHNIC_WEAR

  """Office Party Outfit"""
  OFFICE_PARTY_OUTFIT

  """Cocktail Attire"""
  COCKTAIL_ATTIRE

  """Prom Dresses"""
  PROM_DRESSES

  """Music Concert Wear"""
  MUSIC_CONCERT_WEAR

  """Oversized"""
  OVERSIZED

  """Slim Fit"""
  SLIM_FIT

  """Relaxed Fit"""
  RELAXED_FIT

  """Christmas"""
  CHRISTMAS

  """School Uniforms"""
  SCHOOL_UNIFORMS
}

enum ProductStatusEnum {
  ACTIVE
  INACTIVE
  SOLD
}

type ProductType {
  id: ID!
  name: String!
  seller: UserType
  description: String!
  category: CategoryType
  size: SizeType
  style: ProductsProductStyleChoices
  parcelSize: ProductsProductParcelSizeChoices
  condition: ProductsProductConditionChoices
  price: Float
  views: Int!
  likes: Int!
  discountPrice: Decimal!
  imagesUrl: [JSONString!]!
  status: ProductsProductStatusChoices!
  materials: [BrandType]
  color: [String!]!
  brand: BrandType
  customBrand: String
  hashtags: JSONString!
  isFeatured: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  offers: [OfferType!]!
  userLiked: Boolean
}

input ProfilePictureInputType {
  profilePictureUrl: String
  thumbnailUrl: String
}

type QuantityValuePair {
  quantity: Int
  value: Float
}

type Query {
  getBannerForCurrentSeason: String
  banners: [AdminBannerType]
  payment(paymentId: Int!): [PaymentType]
  userEarnings(usernameId: Int): EarningType
  userPaymentMethods: PaymentMethodType
  conversation(id: ID!, pageCount: Int, pageNumber: Int): [MessageType]
  conversations: [ConversationType]
  archivedConversations: [ConversationType]
  conversationTotalNumber: Int
  notifications(pageCount: Int, pageNumber: Int): [NotificationType]
  notificationPreference: NotificationPreferenceType
  notificationsTotalNumber: Int

  """
  
      This method is responsible for retrieving a paginated list of products
  based on optional filtering and search criteria. 
      The results can be filtered by various product attributes such as name, category, brand, price, condition, and more.
  
      Parameters:
      - `page_count`: The number of products to return per page (optional).
      - `page_number`: The page number for pagination (optional).
      - `filters`: A dictionary of optional filters that can be applied to the product search. 
        Possible keys in the `filters` dictionary include:
        - `name`: Filter products by name.
        - `brand`: Filter products by brand ID.
        - `category`: Filter products by a specific category ID.
        - "parent_category" (enum): Filters products based on the slug of parent category, 
              finding all child categories that match [MEN, WOMEN, BOYS, GIRLS, TODDLERS] prefix.
        - `custom_brand`: Filter products by custom brand.
        - `price`: Filter products by price (less than or equal to the provided price).
        - `condition`: Filter products by condition (e.g., "new", "used").
        - `size`: Filter products by size.
        - `style`: Filter products by style.
        - `status`: Filter products by status (e.g., "available", "out of stock").
        - `discount_price`: Filter products with a discount price.
        - `hashtags`: Filter products that contain specific hashtags.
      - `search`: A string to search for in the product name.
  
      Returns:
      - A paginated list of products matching the filters and search criteria.
      - `pagination_result`: A tuple containing:
        - `result`: A list of products for the current page.
        - `total_pages`: Total number of pages based on the current `page_count`.
        - `total_items`: Total number of products matching the filters and search criteria.
  
      This method also handles pagination of the results to ensure efficient retrieval of large datasets.
      
  """
  allProducts(filters: ProductFiltersInput, sort: SortEnum, search: String, pageCount: Int, pageNumber: Int): [ProductType]
  banner: BannerType

  """
  
      This method retrieves a paginated list of products associated with a
  specific user (either the logged-in user or a user identified by username).
      The products can be filtered by a search term (name) and are excluded if marked as deleted.
  
      Parameters:
      - `page_count`: The number of products to return per page (optional).
      - `page_number`: The page number for pagination (optional).
      - `username`: The username of the seller to filter products by. If not provided, it will use the logged-in user.
      - `search`: A string to search for in the product name (optional).
  
      Returns:
      - A paginated list of products for the specified user.
  
      This method also handles pagination of the results to ensure efficient retrieval of large datasets. 
      The method will return a list of products that match the filters and pagination settings.
      
  """
  userProducts(search: String, username: String, filters: ProductFiltersInput, sort: SortEnum, pageCount: Int, pageNumber: Int): [ProductType]

  """
  
      The seller recommendation system works by evaluating different metrics related
      to the seller's performance over the last 30 days. Here's how it works:
  
      1.  Total Sales: It looks at how much the seller has sold in the last 30
  days, focusing only on orders that were delivered.
  
      2.  Total Shop Value: It adds up the prices of all the seller's active products that are currently for sale.
  
      3.  Product Views: It counts how many times the seller’s products were viewed by customers in the last 30 days.
  
      4.  Active Listings: It counts how many products the seller currently has available for sale.
  
      5.  Seller Score: It combines all these metrics (sales, shop value, and views) into one score. 
          The total sales are given the most weight (50%), the shop value is given a smaller weight (30%),
          and product views are given the least weight (20%).
  
  """
  recommendedSellers(pageCount: Int, pageNumber: Int): [RecommendedSellerType]

  """
  
      Retrieves a grouped list of products based on the specified `group_by` parameter.
  
      This method allows the user to retrieve products grouped by various categories or brands. 
      The available grouping options are:
  
      - **CATEGORY**: Groups products by their category (e.g., Men, Women, Kids).
      - **BRAND**: Groups products by their brand (e.g., Nike, Adidas). If the
  brand is `None`, the `custom_brand` field is used.
      - **TOP_BRAND**: Retrieves the top 10 brands based on the number of products a user has in each brand.
  
      Parameters:
      - `user_id`: The ID of the user whose products are being grouped.
      - `group_by`: The criteria to group the products. Possible values are:
          - `ProductGroupingEnum.CATEGORY`: Group by product category.
          - `ProductGroupingEnum.BRAND`: Group by brand name.
          - `ProductGroupingEnum.TOP_BRAND`: Retrieve the top 10 brands by product count.
  
      Returns:
      - A list of `CategoryGroupType` objects, each containing the name of the
  group and the count of products in that group.
      
  """
  userProductGrouping(userId: Int!, groupBy: ProductGroupingEnum!): [CategoryGroupType]

  """
  
      This method retrieves a specific product by its ID for the logged-in user.
  It ensures that only products that are not deleted are returned. 
      If the product exists and the user is authorized, it will increment the
  product's views if the logged-in user hasn't viewed it before.
  
      Parameters:
      - `id`: The ID of the product to retrieve.
  
      Returns:
      - The `Product` object corresponding to the given ID if it exists and is not deleted, otherwise raises an error.
      
  """
  product(id: Int!): ProductType
  likedProducts(pageCount: Int, pageNumber: Int): [LikedProductType]
  categories(parentId: Int): [CategoryTypes]
  sizes(path: String!): [SizeType]
  brands(search: String, pageCount: Int, pageNumber: Int): [BrandType]
  popularBrands(top: Int!): [BrandType]
  materials(search: String, pageCount: Int, pageNumber: Int): [BrandType]
  similarProducts(productId: Int, categoryId: Int, pageCount: Int, pageNumber: Int): [ProductType]
  recommendProducts(pageCount: Int, pageNumber: Int): [ProductType]
  recentlyViewedProducts: [ProductType]
  filterProductsByPrice(priceLimit: Float!, pageCount: Int, pageNumber: Int): [ProductType]
  favoriteBrandProducts(top: Int!): [ProductType]
  userOrders(filters: OrderFiltersInput, pageCount: Int, pageNumber: Int): [OrderType]
  userMultibuyDiscounts: [MultibuyDiscountType]
  allProductsTotalNumber: Int
  brandsTotalNumber: Int
  filterProductsByPriceTotalNumber: Int
  likedProductsTotalNumber: Int
  materialsTotalNumber: Int
  similarProductsTotalNumber: Int
  recommendedSellersTotalNumber: Int
  recommendProductsTotalNumber: Int
  userOrdersTotalNumber: Int
  viewMe: UserType
  getUser(username: String!): UserType
  searchUsers(search: String!): [UserType]
  following(
    """Username of the user to get followings"""
    username: String
    search: String
    latestFirst: Boolean
    pageCount: Int
    pageNumber: Int
  ): [UserType]
  followers(
    """Username of the user to get followers"""
    username: String
    search: String
    latestFirst: Boolean
    pageCount: Int
    pageNumber: Int
  ): [UserType]
  blockedUsers(search: String, pageCount: Int, pageNumber: Int): [BlockedUserType]
  userSearchHistory(searchType: SearchTypeEnum, pageCount: Int, pageNumber: Int): [SearchHistoryType]
  recommendedSearchHistory(searchType: SearchTypeEnum!, pageCount: Int, pageNumber: Int): [SearchHistoryType]
  searchHistory(searchTerm: String!, searchType: SearchTypeEnum!): [String]
  followingTotalNumber: Int
  followersTotalNumber: Int
  blockedUsersTotalNumber: Int
  userSearchHistoryTotalNumber: Int
}

type RateUser {
  success: Boolean
  message: String
}

type ReadNotification {
  success: Boolean
}

type RecommendedSellerType {
  seller: UserType
  totalSales: Decimal
  totalShopValue: Decimal
  productViews: Int
  sellerScore: Float
  activeListings: Int
}

type Refresh {
  payload: GenericScalar!
  refreshExpiresIn: Int!
  token: String!
  refreshToken: String!
}

type ReportAccount {
  message: String
}

type ReportProduct {
  message: String
}

type ResetPassword {
  message: String
}

type RespondToOffer {
  success: Boolean
  message: String
  data: OfferReturnType
}

type SearchHistoryType {
  id: ID!
  query: String!
  timestamp: DateTime!
  searchType: String
  searchCount: Int!
  lastSearched: DateTime!
}

enum SearchTypeEnum {
  USER
  PRODUCT
}

enum SeasonEnum {
  CHRISTMAS
  HALLOWEEN
  SUMMER
  WINTER
  SPRING
  AUTUMN
  BLACK_FRIDAY
  EASTER
}

type SenderType {
  username: String
  thumbnailUrl: String
  profilePictureUrl: String
}

type SendSmsOtp {
  success: Boolean
  message: String
}

type SetDefaultPaymentMethod {
  success: Boolean
  error: String
}

input ShippingAddressInputType {
  address: String!
  city: String!
  country: String!
  postcode: String!
}

type SizeType {
  id: Int
  name: String
}

enum SmsActionChoicesEnum {
  VERIFY
  LOGIN
  RESET
  TWOFACTOR
}

enum SmsChannelChoicesEnum {
  SMS
  WHATSAPP
}

"""Social Auth Mutation"""
type SocialAuth {
  social: SocialType
}

scalar SocialCamelJSON

type SocialNode implements Node {
  """The ID of the object"""
  id: ID!
  user: UserNode!
  provider: String!
  uid: String!
  extraData: SocialCamelJSON
  created: DateTime!
  modified: DateTime!
}

type SocialNodeConnection {
  """Pagination data for this connection."""
  pageInfo: PageInfo!

  """Contains the nodes in this connection."""
  edges: [SocialNodeEdge]!
}

"""A Relay edge containing a `SocialNode` and its cursor."""
type SocialNodeEdge {
  """The item at the end of the edge"""
  node: SocialNode

  """A cursor for use in pagination"""
  cursor: String!
}

type SocialType {
  id: ID!
  user: UserNode!
  provider: String!
  uid: String!
  extraData: SocialCamelJSON
  created: DateTime!
  modified: DateTime!
}

enum SortEnum {
  NEWEST
  PRICE_ASC
  PRICE_DESC
}

enum StyleEnum {
  WORKWEAR
  WORKOUT
  CASUAL
  PARTY_DRESS
  PARTY_OUTFIT
  FORMAL_WEAR
  EVENING_WEAR
  WEDDING_GUEST
  LOUNGEWEAR
  VACATION_RESORT_WEAR
  FESTIVAL_WEAR
  ACTIVEWEAR
  NIGHTWEAR
  VINTAGE
  Y2K
  BOHO
  MINIMALIST
  GRUNGE
  CHIC
  STREETWEAR
  PREPPY
  RETRO
  COTTAGECORE
  GLAM
  SUMMER_STYLES
  WINTER_ESSENTIALS
  SPRING_FLORALS
  AUTUMN_LAYERS
  RAINY_DAY_WEAR
  DENIM_JEANS
  DRESSES_GOWNS
  JACKETS_COATS
  KNITWEAR_SWEATERS
  SKIRTS_SHORTS
  SUITS_BLAZERS
  TOPS_BLOUSES
  SHOES_FOOTWEAR
  TRAVEL_FRIENDLY
  MATERNITY_WEAR
  ATHLEISURE
  ECO_FRIENDLY
  FESTIVAL_READY
  DATE_NIGHT
  ETHNIC_WEAR
  OFFICE_PARTY_OUTFIT
  COCKTAIL_ATTIRE
  PROM_DRESSES
  MUSIC_CONCERT_WEAR
  OVERSIZED
  SLIM_FIT
  RELAXED_FIT
  CHRISTMAS
  SCHOOL_UNIFORMS
}

type UnarchiveConversation {
  message: String
}

type UnfollowUser {
  success: Boolean
}

type UpdateBanner {
  message: String
  success: Boolean
}

"""
Mutation to update user notification preferences.

Allows updating push and email notification settings, as well as
in-app and email notification details. Can also turn off all notifications
with a single flag.

If is_all_notifications_off is True, it overrides other inputs and
disables all notifications. Otherwise, it updates individual settings
based on the provided inputs.
"""
type UpdateNotificationPreference {
  success: Boolean
  notificationPreference: NotificationPreferenceType
}

type UpdateProduct {
  success: Boolean
  message: String
  product: ProductType
}

type UpdateReadMessages {
  success: Boolean
  updatedCount: Int
}

type UpdateUserMutation {
  message: String
  user: UserType
  token: String
  restToken: String
}

"""
Create scalar that ignores normal serialization/deserialization, since
that will be handled by the multipart request spec
"""
scalar Upload

type UploadPictures {
  baseUrl: String
  data: [JSONString]
  success: Boolean
}

type UserNode implements Node {
  """The ID of the object"""
  id: ID!
  firstName: String!
  lastName: String
  username: String!
  email: String
  bio: String
  profilePictureUrl: String
  thumbnailUrl: String
  gender: AccountsUserGenderChoices
  phoneNumber: JSONString!
  country: String
  postcode: String
  isActive: Boolean!
  isStaff: Boolean!
  isVerified: Boolean!
  isBanned: Boolean!
  deleted: Boolean!
  views: Int!
  displayName: String
  blueTickVerified: Boolean!
  dob: Date
  dobChangeCount: Int!
  use2fa: Boolean!
  dateJoined: DateTime!
  lastLogin: DateTime
  lastSeen: DateTime
  isVacationMode: Boolean!
  inWaitlist: Boolean!
  useGoogleAuthenticator: Boolean!
  gASecret: String
  usernameLastUpdated: DateTime
  fcmTokens: [String!]!
  preferredCurrency: AccountsUserPreferredCurrencyChoices!
  stripeCustomerId: String
  shippingAddress: JSONString!
  meta: JSONString!
  searchhistorySet: [SearchHistoryType!]!
  socialAuth(offset: Int, before: String, after: String, first: Int, last: Int, uid: String, uid_In: [String], provider: String, provider_In: [String]): SocialNodeConnection!
  products: [ProductType!]!
  orders: [OrderType!]!
  multibuyDiscounts: [MultibuyDiscountType!]!
  madeOffers: [OfferType!]!
  createdOffers: [OfferType!]!
  updatedOffers: [OfferType!]!
  sentNotifications: [NotificationType!]!
  notificationPreferences: NotificationPreferenceType
  participant1: [ConversationType!]!
  participant2: [ConversationType!]!
  messageSender: [MessageType!]!
  paymentSet: [PaymentType!]!
  paymentmethodSet: [PaymentMethodType!]!
  pk: Int
  archived: Boolean
  verified: Boolean
  secondaryEmail: String
}

type UserType {
  id: Int
  firstName: String
  lastName: String
  username: String
  email: String
  bio: String
  lastSeen: DateTime
  location: LocationType
  profilePictureUrl: String
  thumbnailUrl: String
  gender: String
  displayName: String
  dob: DateTime
  dateJoined: DateTime
  lastLogin: DateTime
  fullName: String
  phone: PhoneType
  listing: Int
  isVerified: Boolean
  isVacationMode: Boolean
  isFollowing: Boolean
  noOfFollowing: Int
  noOfFollowers: Int
  preferredCurrency: CurrencyEnum
  shippingAddress: JSONString
  isMultibuyEnabled: Boolean
}

type Verify {
  payload: GenericScalar!
}

type VerifyAccount {
  success: Boolean
}

